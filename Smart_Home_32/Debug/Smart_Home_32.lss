
Smart_Home_32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000077e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e2  00800060  000077e8  0000787c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a8  00800142  00800142  0000795e  2**0
                  ALLOC
  3 .stab         000070e0  00000000  00000000  00007960  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b40  00000000  00000000  0000ea40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00010580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000106c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00010830  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00012479  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00013364  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00014114  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00014274  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00014501  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014ccf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__vector_1>
       8:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__vector_2>
       c:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f7 e7       	ldi	r31, 0x77	; 119
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 34       	cpi	r26, 0x42	; 66
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e4       	ldi	r26, 0x42	; 66
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3e       	cpi	r26, 0xEA	; 234
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3b 3a 	call	0x7476	; 0x7476 <main>
      8a:	0c 94 f2 3b 	jmp	0x77e4	; 0x77e4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9a 3b 	jmp	0x7734	; 0x7734 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e2       	ldi	r26, 0x29	; 41
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b6 3b 	jmp	0x776c	; 0x776c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a6 3b 	jmp	0x774c	; 0x774c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c2 3b 	jmp	0x7784	; 0x7784 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a6 3b 	jmp	0x774c	; 0x774c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c2 3b 	jmp	0x7784	; 0x7784 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9a 3b 	jmp	0x7734	; 0x7734 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e2       	ldi	r24, 0x29	; 41
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b6 3b 	jmp	0x776c	; 0x776c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a6 3b 	jmp	0x774c	; 0x774c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c2 3b 	jmp	0x7784	; 0x7784 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a6 3b 	jmp	0x774c	; 0x774c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c2 3b 	jmp	0x7784	; 0x7784 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a6 3b 	jmp	0x774c	; 0x774c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c2 3b 	jmp	0x7784	; 0x7784 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 aa 3b 	jmp	0x7754	; 0x7754 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c6 3b 	jmp	0x778c	; 0x778c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_voidInit>:
void (*Global_ptrFunctionRXcomplete) (void) = NULL;
void (*Global_ptrFunctionTXcomplete) (void) = NULL;
void (*Global_ptrFunctionDataRegEmpty) (void) = NULL;

void UART_voidInit (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//Set the mode to be transmitter and receiver at the same time
	   SET_BIT(UCSRB,UCSRB_RXEN);  //Enable transmission
     b4e:	aa e2       	ldi	r26, 0x2A	; 42
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ea e2       	ldi	r30, 0x2A	; 42
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 61       	ori	r24, 0x10	; 16
     b5a:	8c 93       	st	X, r24
	   SET_BIT(UCSRB,UCSRB_TXEN);  //Enable receiver
     b5c:	aa e2       	ldi	r26, 0x2A	; 42
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ea e2       	ldi	r30, 0x2A	; 42
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	8c 93       	st	X, r24

	//SEt character size to be 8 bit
	   CLR_BIT(UCSRB,UCSRB_UCSZ2);
     b6a:	aa e2       	ldi	r26, 0x2A	; 42
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ea e2       	ldi	r30, 0x2A	; 42
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8b 7f       	andi	r24, 0xFB	; 251
     b76:	8c 93       	st	X, r24
	   UCSRC = (1<<UCSRC_UCSZ1) | (1<<UCSRC_UCSZ2) | (1<<UCSRC_URSEL);
     b78:	e0 e4       	ldi	r30, 0x40	; 64
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	86 e8       	ldi	r24, 0x86	; 134
     b7e:	80 83       	st	Z, r24
	   UBRRL =51;
     b80:	e9 e2       	ldi	r30, 0x29	; 41
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	83 e3       	ldi	r24, 0x33	; 51
     b86:	80 83       	st	Z, r24

	// Set Baud rate to be 9600 bps
	   UBRRL =51;
     b88:	e9 e2       	ldi	r30, 0x29	; 41
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	83 e3       	ldi	r24, 0x33	; 51
     b8e:	80 83       	st	Z, r24

	   //No parity bits
	   // 1 stop bit
}
     b90:	cf 91       	pop	r28
     b92:	df 91       	pop	r29
     b94:	08 95       	ret

00000b96 <UART_voidSendDataSync>:

void UART_voidSendDataSync(u8 Copy_u8Data )
{
     b96:	df 93       	push	r29
     b98:	cf 93       	push	r28
     b9a:	0f 92       	push	r0
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	89 83       	std	Y+1, r24	; 0x01
	//1. make sure that the transmission buffer is empty
	while ((GET_BIT(UCSRA,UCSRA_UDRE)) == 0);
     ba2:	eb e2       	ldi	r30, 0x2B	; 43
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	82 95       	swap	r24
     baa:	86 95       	lsr	r24
     bac:	87 70       	andi	r24, 0x07	; 7
     bae:	88 2f       	mov	r24, r24
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	81 70       	andi	r24, 0x01	; 1
     bb4:	90 70       	andi	r25, 0x00	; 0
     bb6:	00 97       	sbiw	r24, 0x00	; 0
     bb8:	a1 f3       	breq	.-24     	; 0xba2 <UART_voidSendDataSync+0xc>
	//2.Write the data to get transmission
	UDR = Copy_u8Data;
     bba:	ec e2       	ldi	r30, 0x2C	; 44
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	80 83       	st	Z, r24
	//3.Wait till the end of transmission
	while ((GET_BIT(UCSRA ,UCSRA_TXC)) == 0 );
     bc2:	eb e2       	ldi	r30, 0x2B	; 43
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	82 95       	swap	r24
     bca:	86 95       	lsr	r24
     bcc:	86 95       	lsr	r24
     bce:	83 70       	andi	r24, 0x03	; 3
     bd0:	88 2f       	mov	r24, r24
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	81 70       	andi	r24, 0x01	; 1
     bd6:	90 70       	andi	r25, 0x00	; 0
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	99 f3       	breq	.-26     	; 0xbc2 <UART_voidSendDataSync+0x2c>
	//4.Clear end of transmission flag
	SET_BIT(UCSRA ,UCSRA_TXC);
     bdc:	ab e2       	ldi	r26, 0x2B	; 43
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	eb e2       	ldi	r30, 0x2B	; 43
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	80 64       	ori	r24, 0x40	; 64
     be8:	8c 93       	st	X, r24
}
     bea:	0f 90       	pop	r0
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret

00000bf2 <UART_voidSendDataAsync>:

void UART_voidSendDataAsync(u8 Copy_u8Data , void(*Copy_ptrFunction)(void))
{
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <UART_voidSendDataAsync+0x6>
     bf8:	0f 92       	push	r0
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	7b 83       	std	Y+3, r23	; 0x03
     c02:	6a 83       	std	Y+2, r22	; 0x02

  //1.Enable TX intr
	SET_BIT(UCSRB,UCSRB_TXCIE);
     c04:	aa e2       	ldi	r26, 0x2A	; 42
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ea e2       	ldi	r30, 0x2A	; 42
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	80 64       	ori	r24, 0x40	; 64
     c10:	8c 93       	st	X, r24

	Global_ptrFunctionTXcomplete = Copy_ptrFunction;
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	9b 81       	ldd	r25, Y+3	; 0x03
     c16:	90 93 47 01 	sts	0x0147, r25
     c1a:	80 93 46 01 	sts	0x0146, r24

	UDR = Copy_u8Data ;
     c1e:	ec e2       	ldi	r30, 0x2C	; 44
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	80 83       	st	Z, r24

}
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	cf 91       	pop	r28
     c2e:	df 91       	pop	r29
     c30:	08 95       	ret

00000c32 <UART_voidSendStringSync>:


void UART_voidSendStringSync(char * Copy_ptrToString)
{
     c32:	df 93       	push	r29
     c34:	cf 93       	push	r28
     c36:	00 d0       	rcall	.+0      	; 0xc38 <UART_voidSendStringSync+0x6>
     c38:	0f 92       	push	r0
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	9b 83       	std	Y+3, r25	; 0x03
     c40:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iterator = 0 ;
     c42:	19 82       	std	Y+1, r1	; 0x01
     c44:	0e c0       	rjmp	.+28     	; 0xc62 <UART_voidSendStringSync+0x30>
	while(Copy_ptrToString[Local_u8Iterator] != '\0')
	{
		UART_voidSendDataSync(Copy_ptrToString[Local_u8Iterator]);
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	28 2f       	mov	r18, r24
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	9b 81       	ldd	r25, Y+3	; 0x03
     c50:	fc 01       	movw	r30, r24
     c52:	e2 0f       	add	r30, r18
     c54:	f3 1f       	adc	r31, r19
     c56:	80 81       	ld	r24, Z
     c58:	0e 94 cb 05 	call	0xb96	; 0xb96 <UART_voidSendDataSync>
		Local_u8Iterator++;
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	8f 5f       	subi	r24, 0xFF	; 255
     c60:	89 83       	std	Y+1, r24	; 0x01


void UART_voidSendStringSync(char * Copy_ptrToString)
{
	u8 Local_u8Iterator = 0 ;
	while(Copy_ptrToString[Local_u8Iterator] != '\0')
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	9b 81       	ldd	r25, Y+3	; 0x03
     c6c:	fc 01       	movw	r30, r24
     c6e:	e2 0f       	add	r30, r18
     c70:	f3 1f       	adc	r31, r19
     c72:	80 81       	ld	r24, Z
     c74:	88 23       	and	r24, r24
     c76:	39 f7       	brne	.-50     	; 0xc46 <UART_voidSendStringSync+0x14>
	{
		UART_voidSendDataSync(Copy_ptrToString[Local_u8Iterator]);
		Local_u8Iterator++;
	}

}
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	08 95       	ret

00000c84 <UART_u8ReceiveDataSync>:

u8 UART_u8ReceiveDataSync(void)
{
     c84:	df 93       	push	r29
     c86:	cf 93       	push	r28
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
	//1.Wait till the end of reception
	while ((GET_BIT(UCSRA ,UCSRA_RXC)) == 0 );
     c8c:	eb e2       	ldi	r30, 0x2B	; 43
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	88 23       	and	r24, r24
     c94:	dc f7       	brge	.-10     	; 0xc8c <UART_u8ReceiveDataSync+0x8>
	//2. Get the received data -> the flag is cleared
	return UDR ;
     c96:	ec e2       	ldi	r30, 0x2C	; 44
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z

}
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <UART_voidSendNumber>:

void UART_voidSendNumber(u32 copy_u32Number)
{
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	28 97       	sbiw	r28, 0x08	; 8
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	6d 83       	std	Y+5, r22	; 0x05
     cc0:	7e 83       	std	Y+6, r23	; 0x06
     cc2:	8f 83       	std	Y+7, r24	; 0x07
     cc4:	98 87       	std	Y+8, r25	; 0x08
	u32 Local_u32Reverse = 1;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	a0 e0       	ldi	r26, 0x00	; 0
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	89 83       	std	Y+1, r24	; 0x01
     cd0:	9a 83       	std	Y+2, r25	; 0x02
     cd2:	ab 83       	std	Y+3, r26	; 0x03
     cd4:	bc 83       	std	Y+4, r27	; 0x04
     cd6:	36 c0       	rjmp	.+108    	; 0xd44 <UART_voidSendNumber+0xa2>
while(copy_u32Number != 0)
{
	Local_u32Reverse = Local_u32Reverse * 10 + copy_u32Number%10;
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	9a 81       	ldd	r25, Y+2	; 0x02
     cdc:	ab 81       	ldd	r26, Y+3	; 0x03
     cde:	bc 81       	ldd	r27, Y+4	; 0x04
     ce0:	2a e0       	ldi	r18, 0x0A	; 10
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	50 e0       	ldi	r21, 0x00	; 0
     ce8:	bc 01       	movw	r22, r24
     cea:	cd 01       	movw	r24, r26
     cec:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <__mulsi3>
     cf0:	7b 01       	movw	r14, r22
     cf2:	8c 01       	movw	r16, r24
     cf4:	8d 81       	ldd	r24, Y+5	; 0x05
     cf6:	9e 81       	ldd	r25, Y+6	; 0x06
     cf8:	af 81       	ldd	r26, Y+7	; 0x07
     cfa:	b8 85       	ldd	r27, Y+8	; 0x08
     cfc:	2a e0       	ldi	r18, 0x0A	; 10
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	50 e0       	ldi	r21, 0x00	; 0
     d04:	bc 01       	movw	r22, r24
     d06:	cd 01       	movw	r24, r26
     d08:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <__udivmodsi4>
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
     d10:	8e 0d       	add	r24, r14
     d12:	9f 1d       	adc	r25, r15
     d14:	a0 1f       	adc	r26, r16
     d16:	b1 1f       	adc	r27, r17
     d18:	89 83       	std	Y+1, r24	; 0x01
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	ab 83       	std	Y+3, r26	; 0x03
     d1e:	bc 83       	std	Y+4, r27	; 0x04
	copy_u32Number /= 10;
     d20:	8d 81       	ldd	r24, Y+5	; 0x05
     d22:	9e 81       	ldd	r25, Y+6	; 0x06
     d24:	af 81       	ldd	r26, Y+7	; 0x07
     d26:	b8 85       	ldd	r27, Y+8	; 0x08
     d28:	2a e0       	ldi	r18, 0x0A	; 10
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	40 e0       	ldi	r20, 0x00	; 0
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	bc 01       	movw	r22, r24
     d32:	cd 01       	movw	r24, r26
     d34:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <__udivmodsi4>
     d38:	da 01       	movw	r26, r20
     d3a:	c9 01       	movw	r24, r18
     d3c:	8d 83       	std	Y+5, r24	; 0x05
     d3e:	9e 83       	std	Y+6, r25	; 0x06
     d40:	af 83       	std	Y+7, r26	; 0x07
     d42:	b8 87       	std	Y+8, r27	; 0x08
}

void UART_voidSendNumber(u32 copy_u32Number)
{
	u32 Local_u32Reverse = 1;
while(copy_u32Number != 0)
     d44:	8d 81       	ldd	r24, Y+5	; 0x05
     d46:	9e 81       	ldd	r25, Y+6	; 0x06
     d48:	af 81       	ldd	r26, Y+7	; 0x07
     d4a:	b8 85       	ldd	r27, Y+8	; 0x08
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	a1 05       	cpc	r26, r1
     d50:	b1 05       	cpc	r27, r1
     d52:	11 f6       	brne	.-124    	; 0xcd8 <UART_voidSendNumber+0x36>
	copy_u32Number /= 10;

}
do
{
	UART_voidSendDataSync((Local_u32Reverse%10) +'0');
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	9a 81       	ldd	r25, Y+2	; 0x02
     d58:	ab 81       	ldd	r26, Y+3	; 0x03
     d5a:	bc 81       	ldd	r27, Y+4	; 0x04
     d5c:	2a e0       	ldi	r18, 0x0A	; 10
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e0       	ldi	r20, 0x00	; 0
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	bc 01       	movw	r22, r24
     d66:	cd 01       	movw	r24, r26
     d68:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <__udivmodsi4>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	80 5d       	subi	r24, 0xD0	; 208
     d72:	0e 94 cb 05 	call	0xb96	; 0xb96 <UART_voidSendDataSync>
	Local_u32Reverse /= 10;
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	9a 81       	ldd	r25, Y+2	; 0x02
     d7a:	ab 81       	ldd	r26, Y+3	; 0x03
     d7c:	bc 81       	ldd	r27, Y+4	; 0x04
     d7e:	2a e0       	ldi	r18, 0x0A	; 10
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	bc 01       	movw	r22, r24
     d88:	cd 01       	movw	r24, r26
     d8a:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <__udivmodsi4>
     d8e:	da 01       	movw	r26, r20
     d90:	c9 01       	movw	r24, r18
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	ab 83       	std	Y+3, r26	; 0x03
     d98:	bc 83       	std	Y+4, r27	; 0x04

}
while(Local_u32Reverse != 1);
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	9a 81       	ldd	r25, Y+2	; 0x02
     d9e:	ab 81       	ldd	r26, Y+3	; 0x03
     da0:	bc 81       	ldd	r27, Y+4	; 0x04
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	91 05       	cpc	r25, r1
     da6:	a1 05       	cpc	r26, r1
     da8:	b1 05       	cpc	r27, r1
     daa:	a1 f6       	brne	.-88     	; 0xd54 <UART_voidSendNumber+0xb2>
}
     dac:	28 96       	adiw	r28, 0x08	; 8
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	ff 90       	pop	r15
     dc2:	ef 90       	pop	r14
     dc4:	08 95       	ret

00000dc6 <UART_voidReceiveDataAsync>:



void UART_voidReceiveDataAsync(u8 *Copy_u8ReceiveData , void(*Copy_ptrFunction)(void))
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	00 d0       	rcall	.+0      	; 0xdcc <UART_voidReceiveDataAsync+0x6>
     dcc:	00 d0       	rcall	.+0      	; 0xdce <UART_voidReceiveDataAsync+0x8>
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	9a 83       	std	Y+2, r25	; 0x02
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	7c 83       	std	Y+4, r23	; 0x04
     dd8:	6b 83       	std	Y+3, r22	; 0x03

	  //1.Enable TX intr
		SET_BIT(UCSRB,UCSRB_RXCIE);
     dda:	aa e2       	ldi	r26, 0x2A	; 42
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	ea e2       	ldi	r30, 0x2A	; 42
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	80 68       	ori	r24, 0x80	; 128
     de6:	8c 93       	st	X, r24

		Global_ptrFunctionRXcomplete =Copy_ptrFunction ;
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	9c 81       	ldd	r25, Y+4	; 0x04
     dec:	90 93 45 01 	sts	0x0145, r25
     df0:	80 93 44 01 	sts	0x0144, r24
        Global_u8ReceiveData = Copy_u8ReceiveData ;
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	9a 81       	ldd	r25, Y+2	; 0x02
     df8:	90 93 43 01 	sts	0x0143, r25
     dfc:	80 93 42 01 	sts	0x0142, r24


}
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <__vector_13>:
// }
//
 //RX Complete
 void __vector_13(void)  __attribute__((signal));
 void __vector_13(void)
 {
     e0e:	1f 92       	push	r1
     e10:	0f 92       	push	r0
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	0f 92       	push	r0
     e16:	11 24       	eor	r1, r1
     e18:	2f 93       	push	r18
     e1a:	3f 93       	push	r19
     e1c:	4f 93       	push	r20
     e1e:	5f 93       	push	r21
     e20:	6f 93       	push	r22
     e22:	7f 93       	push	r23
     e24:	8f 93       	push	r24
     e26:	9f 93       	push	r25
     e28:	af 93       	push	r26
     e2a:	bf 93       	push	r27
     e2c:	ef 93       	push	r30
     e2e:	ff 93       	push	r31
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62

	 		 *Global_u8ReceiveData =UDR ;
     e38:	a0 91 42 01 	lds	r26, 0x0142
     e3c:	b0 91 43 01 	lds	r27, 0x0143
     e40:	ec e2       	ldi	r30, 0x2C	; 44
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8c 93       	st	X, r24
	 		Global_ptrFunctionRXcomplete();
     e48:	e0 91 44 01 	lds	r30, 0x0144
     e4c:	f0 91 45 01 	lds	r31, 0x0145
     e50:	09 95       	icall


 }
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	ff 91       	pop	r31
     e58:	ef 91       	pop	r30
     e5a:	bf 91       	pop	r27
     e5c:	af 91       	pop	r26
     e5e:	9f 91       	pop	r25
     e60:	8f 91       	pop	r24
     e62:	7f 91       	pop	r23
     e64:	6f 91       	pop	r22
     e66:	5f 91       	pop	r21
     e68:	4f 91       	pop	r20
     e6a:	3f 91       	pop	r19
     e6c:	2f 91       	pop	r18
     e6e:	0f 90       	pop	r0
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	0f 90       	pop	r0
     e74:	1f 90       	pop	r1
     e76:	18 95       	reti

00000e78 <__vector_15>:
// }
//
// //TX Complete
 void __vector_15(void)  __attribute__((signal));
 void __vector_15(void)
 {
     e78:	1f 92       	push	r1
     e7a:	0f 92       	push	r0
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	0f 92       	push	r0
     e80:	11 24       	eor	r1, r1
     e82:	2f 93       	push	r18
     e84:	3f 93       	push	r19
     e86:	4f 93       	push	r20
     e88:	5f 93       	push	r21
     e8a:	6f 93       	push	r22
     e8c:	7f 93       	push	r23
     e8e:	8f 93       	push	r24
     e90:	9f 93       	push	r25
     e92:	af 93       	push	r26
     e94:	bf 93       	push	r27
     e96:	ef 93       	push	r30
     e98:	ff 93       	push	r31
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
 	 if (Global_ptrFunctionTXcomplete != NULL)
     ea2:	80 91 46 01 	lds	r24, 0x0146
     ea6:	90 91 47 01 	lds	r25, 0x0147
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	29 f0       	breq	.+10     	; 0xeb8 <__vector_15+0x40>
 	 {
 		 Global_ptrFunctionTXcomplete();
     eae:	e0 91 46 01 	lds	r30, 0x0146
     eb2:	f0 91 47 01 	lds	r31, 0x0147
     eb6:	09 95       	icall
 	 }
 }
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	ff 91       	pop	r31
     ebe:	ef 91       	pop	r30
     ec0:	bf 91       	pop	r27
     ec2:	af 91       	pop	r26
     ec4:	9f 91       	pop	r25
     ec6:	8f 91       	pop	r24
     ec8:	7f 91       	pop	r23
     eca:	6f 91       	pop	r22
     ecc:	5f 91       	pop	r21
     ece:	4f 91       	pop	r20
     ed0:	3f 91       	pop	r19
     ed2:	2f 91       	pop	r18
     ed4:	0f 90       	pop	r0
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	0f 90       	pop	r0
     eda:	1f 90       	pop	r1
     edc:	18 95       	reti

00000ede <UART_u8IsDataAvailable>:

 u8 UART_u8IsDataAvailable(void) {
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	0f 92       	push	r0
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     return (UCSRA & (1 << UCSRA_RXC)) ? 1 : 0; // Return 1 if RXC bit is set, 0 otherwise
     ee8:	eb e2       	ldi	r30, 0x2B	; 43
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	19 82       	std	Y+1, r1	; 0x01
     ef0:	88 23       	and	r24, r24
     ef2:	14 f4       	brge	.+4      	; 0xef8 <UART_u8IsDataAvailable+0x1a>
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	89 83       	std	Y+1, r24	; 0x01
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
 }
     efa:	0f 90       	pop	r0
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <TIMER1_voidInit>:


void (*Ptrf)(void); 

void TIMER1_voidInit(void)
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
//	CLR_BIT(TCCR1A,WGM10);
//	CLR_BIT(TCCR1B,WGM12);
//	CLR_BIT(TCCR1B,WGM13);

	 // MODE 14
	 SET_BIT(TCCR1A,WGM11);
     f0a:	af e4       	ldi	r26, 0x4F	; 79
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	ef e4       	ldi	r30, 0x4F	; 79
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	82 60       	ori	r24, 0x02	; 2
     f16:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1A,WGM10);
     f18:	af e4       	ldi	r26, 0x4F	; 79
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	ef e4       	ldi	r30, 0x4F	; 79
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	8e 7f       	andi	r24, 0xFE	; 254
     f24:	8c 93       	st	X, r24
	 SET_BIT(TCCR1B,WGM12);
     f26:	ae e4       	ldi	r26, 0x4E	; 78
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	ee e4       	ldi	r30, 0x4E	; 78
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	88 60       	ori	r24, 0x08	; 8
     f32:	8c 93       	st	X, r24
	 SET_BIT(TCCR1B,WGM13);
     f34:	ae e4       	ldi	r26, 0x4E	; 78
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	ee e4       	ldi	r30, 0x4E	; 78
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	80 61       	ori	r24, 0x10	; 16
     f40:	8c 93       	st	X, r24

}
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <TIMER1_voidFastPWMNonIntvered>:


void TIMER1_voidFastPWMNonIntvered(u8 Copy_u8Channel , u8 Copy_u8Prescaler)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <TIMER1_voidFastPWMNonIntvered+0x6>
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <TIMER1_voidFastPWMNonIntvered+0x8>
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	6a 83       	std	Y+2, r22	; 0x02
				switch(Copy_u8Channel)
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	3c 83       	std	Y+4, r19	; 0x04
     f60:	2b 83       	std	Y+3, r18	; 0x03
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	9c 81       	ldd	r25, Y+4	; 0x04
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	31 f0       	breq	.+12     	; 0xf76 <TIMER1_voidFastPWMNonIntvered+0x2e>
     f6a:	2b 81       	ldd	r18, Y+3	; 0x03
     f6c:	3c 81       	ldd	r19, Y+4	; 0x04
     f6e:	21 30       	cpi	r18, 0x01	; 1
     f70:	31 05       	cpc	r19, r1
     f72:	81 f0       	breq	.+32     	; 0xf94 <TIMER1_voidFastPWMNonIntvered+0x4c>
     f74:	1d c0       	rjmp	.+58     	; 0xfb0 <TIMER1_voidFastPWMNonIntvered+0x68>
				{
				case CHANNELA :
					SET_BIT(TCCR1A ,COM1A1);
     f76:	af e4       	ldi	r26, 0x4F	; 79
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	ef e4       	ldi	r30, 0x4F	; 79
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	80 68       	ori	r24, 0x80	; 128
     f82:	8c 93       	st	X, r24
					CLR_BIT(TCCR1A ,COM1A0);
     f84:	af e4       	ldi	r26, 0x4F	; 79
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	ef e4       	ldi	r30, 0x4F	; 79
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	8f 7b       	andi	r24, 0xBF	; 191
     f90:	8c 93       	st	X, r24
     f92:	0e c0       	rjmp	.+28     	; 0xfb0 <TIMER1_voidFastPWMNonIntvered+0x68>
					break;

				case CHANNELB:
					SET_BIT(TCCR1A ,COM1B1);
     f94:	af e4       	ldi	r26, 0x4F	; 79
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	ef e4       	ldi	r30, 0x4F	; 79
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 62       	ori	r24, 0x20	; 32
     fa0:	8c 93       	st	X, r24
					CLR_BIT(TCCR1A ,COM1B0);
     fa2:	af e4       	ldi	r26, 0x4F	; 79
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	ef e4       	ldi	r30, 0x4F	; 79
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	8f 7e       	andi	r24, 0xEF	; 239
     fae:	8c 93       	st	X, r24
				}


				//Run timer with target prescaler

				TCCR1B &= CLK_MASK ;
     fb0:	ae e4       	ldi	r26, 0x4E	; 78
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	ee e4       	ldi	r30, 0x4E	; 78
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	88 7f       	andi	r24, 0xF8	; 248
     fbc:	8c 93       	st	X, r24
				TCCR1B |=Copy_u8Prescaler ;
     fbe:	ae e4       	ldi	r26, 0x4E	; 78
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	ee e4       	ldi	r30, 0x4E	; 78
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	90 81       	ld	r25, Z
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	89 2b       	or	r24, r25
     fcc:	8c 93       	st	X, r24
}
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	cf 91       	pop	r28
     fd8:	df 91       	pop	r29
     fda:	08 95       	ret

00000fdc <TIMER1_voidSetDutyCycle>:


void TIMER1_voidSetDutyCycle(u8 Copy_u8Channel ,u16 Copy_u16DutyCycle)
{
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <TIMER1_voidSetDutyCycle+0x6>
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <TIMER1_voidSetDutyCycle+0x8>
     fe4:	0f 92       	push	r0
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	7b 83       	std	Y+3, r23	; 0x03
     fee:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8Channel)
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	3d 83       	std	Y+5, r19	; 0x05
     ff8:	2c 83       	std	Y+4, r18	; 0x04
     ffa:	8c 81       	ldd	r24, Y+4	; 0x04
     ffc:	9d 81       	ldd	r25, Y+5	; 0x05
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	31 f0       	breq	.+12     	; 0x100e <TIMER1_voidSetDutyCycle+0x32>
    1002:	2c 81       	ldd	r18, Y+4	; 0x04
    1004:	3d 81       	ldd	r19, Y+5	; 0x05
    1006:	21 30       	cpi	r18, 0x01	; 1
    1008:	31 05       	cpc	r19, r1
    100a:	41 f0       	breq	.+16     	; 0x101c <TIMER1_voidSetDutyCycle+0x40>
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <TIMER1_voidSetDutyCycle+0x4c>
			{
			case CHANNELA : OCR1A = Copy_u16DutyCycle ;	break;
    100e:	ea e4       	ldi	r30, 0x4A	; 74
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	9b 81       	ldd	r25, Y+3	; 0x03
    1016:	91 83       	std	Z+1, r25	; 0x01
    1018:	80 83       	st	Z, r24
    101a:	06 c0       	rjmp	.+12     	; 0x1028 <TIMER1_voidSetDutyCycle+0x4c>

			case CHANNELB:  OCR1B = Copy_u16DutyCycle ;	break;
    101c:	e8 e4       	ldi	r30, 0x48	; 72
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	9b 81       	ldd	r25, Y+3	; 0x03
    1024:	91 83       	std	Z+1, r25	; 0x01
    1026:	80 83       	st	Z, r24

			}

}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <TIMER1_voidSetTopValue>:

void TIMER1_voidSetTopValue(u16 Copy_u16TopValue)
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	00 d0       	rcall	.+0      	; 0x103e <TIMER1_voidSetTopValue+0x6>
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	9a 83       	std	Y+2, r25	; 0x02
    1044:	89 83       	std	Y+1, r24	; 0x01

			ICR1 = Copy_u16TopValue ;
    1046:	e6 e4       	ldi	r30, 0x46	; 70
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	9a 81       	ldd	r25, Y+2	; 0x02
    104e:	91 83       	std	Z+1, r25	; 0x01
    1050:	80 83       	st	Z, r24
}
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <TIMER1_voidServoRotate>:


void TIMER1_voidServoRotate(u8 Copy_u8Channel ,u8 Copy_u8Angle)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	00 d0       	rcall	.+0      	; 0x1062 <TIMER1_voidServoRotate+0x6>
    1062:	00 d0       	rcall	.+0      	; 0x1064 <TIMER1_voidServoRotate+0x8>
    1064:	00 d0       	rcall	.+0      	; 0x1066 <TIMER1_voidServoRotate+0xa>
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	8b 83       	std	Y+3, r24	; 0x03
    106c:	6c 83       	std	Y+4, r22	; 0x04
	u16 Local_u8Angle =((u16)(Copy_u8Angle*10))+750 ;
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	88 2f       	mov	r24, r24
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	9c 01       	movw	r18, r24
    1076:	22 0f       	add	r18, r18
    1078:	33 1f       	adc	r19, r19
    107a:	c9 01       	movw	r24, r18
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	82 0f       	add	r24, r18
    1086:	93 1f       	adc	r25, r19
    1088:	82 51       	subi	r24, 0x12	; 18
    108a:	9d 4f       	sbci	r25, 0xFD	; 253
    108c:	9a 83       	std	Y+2, r25	; 0x02
    108e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Channel)
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	3e 83       	std	Y+6, r19	; 0x06
    1098:	2d 83       	std	Y+5, r18	; 0x05
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	9e 81       	ldd	r25, Y+6	; 0x06
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	31 f0       	breq	.+12     	; 0x10ae <TIMER1_voidServoRotate+0x52>
    10a2:	2d 81       	ldd	r18, Y+5	; 0x05
    10a4:	3e 81       	ldd	r19, Y+6	; 0x06
    10a6:	21 30       	cpi	r18, 0x01	; 1
    10a8:	31 05       	cpc	r19, r1
    10aa:	41 f0       	breq	.+16     	; 0x10bc <TIMER1_voidServoRotate+0x60>
    10ac:	0d c0       	rjmp	.+26     	; 0x10c8 <TIMER1_voidServoRotate+0x6c>
				{
				case CHANNELA : OCR1A = Local_u8Angle ;	break;
    10ae:	ea e4       	ldi	r30, 0x4A	; 74
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	91 83       	std	Z+1, r25	; 0x01
    10b8:	80 83       	st	Z, r24
    10ba:	06 c0       	rjmp	.+12     	; 0x10c8 <TIMER1_voidServoRotate+0x6c>

				case CHANNELB:  OCR1B = Local_u8Angle ;	break;
    10bc:	e8 e4       	ldi	r30, 0x48	; 72
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	9a 81       	ldd	r25, Y+2	; 0x02
    10c4:	91 83       	std	Z+1, r25	; 0x01
    10c6:	80 83       	st	Z, r24

				}
}
    10c8:	26 96       	adiw	r28, 0x06	; 6
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <TIMER1_voidNormalMode>:




void TIMER1_voidNormalMode(u8 Copy_u8Prescaler)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	0f 92       	push	r0
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	89 83       	std	Y+1, r24	; 0x01
	//Run timer with target prescaler

	TCCR1B &= CLK_MASK ;
    10e6:	ae e4       	ldi	r26, 0x4E	; 78
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	ee e4       	ldi	r30, 0x4E	; 78
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	88 7f       	andi	r24, 0xF8	; 248
    10f2:	8c 93       	st	X, r24
	TCCR1B |=Copy_u8Prescaler ;
    10f4:	ae e4       	ldi	r26, 0x4E	; 78
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	ee e4       	ldi	r30, 0x4E	; 78
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	90 81       	ld	r25, Z
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	89 2b       	or	r24, r25
    1102:	8c 93       	st	X, r24
}
    1104:	0f 90       	pop	r0
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <TIMER1_voidResetTimer>:

void TIMER1_voidResetTimer(void)
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
 TCNT1 = 0 ;
    1114:	ec e4       	ldi	r30, 0x4C	; 76
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	11 82       	std	Z+1, r1	; 0x01
    111a:	10 82       	st	Z, r1
}
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <TIMER1_u16GetElapsedTimer>:

u16  TIMER1_u16GetElapsedTimer(void)
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62

	return TCNT1 ;
    112a:	ec e4       	ldi	r30, 0x4C	; 76
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	91 81       	ldd	r25, Z+1	; 0x01
}
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <TIMER1_voidStopTimer1>:
void TIMER1_voidStopTimer1(void)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
	//Run timer with target prescaler

	TCCR1B &= CLK_MASK ;
    1140:	ae e4       	ldi	r26, 0x4E	; 78
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	ee e4       	ldi	r30, 0x4E	; 78
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	88 7f       	andi	r24, 0xF8	; 248
    114c:	8c 93       	st	X, r24
	TCCR1B |=PRESCALAR_NO_CLOCK ;
    114e:	ae e4       	ldi	r26, 0x4E	; 78
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	ee e4       	ldi	r30, 0x4E	; 78
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	8c 93       	st	X, r24
}
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <ICU_CallBackFun>:




void ICU_CallBackFun(void (*ptr)(void))
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	00 d0       	rcall	.+0      	; 0x1166 <ICU_CallBackFun+0x6>
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	9a 83       	std	Y+2, r25	; 0x02
    116c:	89 83       	std	Y+1, r24	; 0x01
	Ptrf=ptr;
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	9a 81       	ldd	r25, Y+2	; 0x02
    1172:	90 93 53 01 	sts	0x0153, r25
    1176:	80 93 52 01 	sts	0x0152, r24
	
}
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <ICU_u16ReadInputCapture>:

u16 ICU_u16ReadInputCapture (void)
{
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    118c:	e6 e4       	ldi	r30, 0x46	; 70
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	91 81       	ldd	r25, Z+1	; 0x01
}
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <__vector_6>:

void __vector_6(void) __attribute__((signal)); 
void __vector_6(void)
{
    119a:	1f 92       	push	r1
    119c:	0f 92       	push	r0
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	0f 92       	push	r0
    11a2:	11 24       	eor	r1, r1
    11a4:	2f 93       	push	r18
    11a6:	3f 93       	push	r19
    11a8:	4f 93       	push	r20
    11aa:	5f 93       	push	r21
    11ac:	6f 93       	push	r22
    11ae:	7f 93       	push	r23
    11b0:	8f 93       	push	r24
    11b2:	9f 93       	push	r25
    11b4:	af 93       	push	r26
    11b6:	bf 93       	push	r27
    11b8:	ef 93       	push	r30
    11ba:	ff 93       	push	r31
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
	
	Ptrf();
    11c4:	e0 91 52 01 	lds	r30, 0x0152
    11c8:	f0 91 53 01 	lds	r31, 0x0153
    11cc:	09 95       	icall
	
} 
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	ff 91       	pop	r31
    11d4:	ef 91       	pop	r30
    11d6:	bf 91       	pop	r27
    11d8:	af 91       	pop	r26
    11da:	9f 91       	pop	r25
    11dc:	8f 91       	pop	r24
    11de:	7f 91       	pop	r23
    11e0:	6f 91       	pop	r22
    11e2:	5f 91       	pop	r21
    11e4:	4f 91       	pop	r20
    11e6:	3f 91       	pop	r19
    11e8:	2f 91       	pop	r18
    11ea:	0f 90       	pop	r0
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	0f 90       	pop	r0
    11f0:	1f 90       	pop	r1
    11f2:	18 95       	reti

000011f4 <EXTI_voidEnableInterrupt>:
void (*CallbackFuncINT0) (void) = NULL ;
void (*CallbackFuncINT1) (void) = NULL ;
void (*CallbackFuncINT2) (void) = NULL ;

void EXTI_voidEnableInterrupt(u8 Copy_u8InterruptId)
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <EXTI_voidEnableInterrupt+0x6>
    11fa:	0f 92       	push	r0
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	89 83       	std	Y+1, r24	; 0x01
	//switching over interrupt sources
	switch(Copy_u8InterruptId)
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	3b 83       	std	Y+3, r19	; 0x03
    120a:	2a 83       	std	Y+2, r18	; 0x02
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	9b 81       	ldd	r25, Y+3	; 0x03
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	91 05       	cpc	r25, r1
    1214:	89 f0       	breq	.+34     	; 0x1238 <EXTI_voidEnableInterrupt+0x44>
    1216:	2a 81       	ldd	r18, Y+2	; 0x02
    1218:	3b 81       	ldd	r19, Y+3	; 0x03
    121a:	22 30       	cpi	r18, 0x02	; 2
    121c:	31 05       	cpc	r19, r1
    121e:	a1 f0       	breq	.+40     	; 0x1248 <EXTI_voidEnableInterrupt+0x54>
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	9b 81       	ldd	r25, Y+3	; 0x03
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	b9 f4       	brne	.+46     	; 0x1256 <EXTI_voidEnableInterrupt+0x62>
	{
		case EXTI_INT0 :
				SET_BIT(EXTI_GICR , GICR_INT0) ; break ;
    1228:	ab e5       	ldi	r26, 0x5B	; 91
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	eb e5       	ldi	r30, 0x5B	; 91
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	80 64       	ori	r24, 0x40	; 64
    1234:	8c 93       	st	X, r24
    1236:	0f c0       	rjmp	.+30     	; 0x1256 <EXTI_voidEnableInterrupt+0x62>

		case EXTI_INT1 :
				SET_BIT(EXTI_GICR , GICR_INT1) ; break ;
    1238:	ab e5       	ldi	r26, 0x5B	; 91
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	eb e5       	ldi	r30, 0x5B	; 91
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	80 68       	ori	r24, 0x80	; 128
    1244:	8c 93       	st	X, r24
    1246:	07 c0       	rjmp	.+14     	; 0x1256 <EXTI_voidEnableInterrupt+0x62>

		case EXTI_INT2 :
				SET_BIT(EXTI_GICR , GICR_INT2) ; break ;
    1248:	ab e5       	ldi	r26, 0x5B	; 91
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	eb e5       	ldi	r30, 0x5B	; 91
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	80 62       	ori	r24, 0x20	; 32
    1254:	8c 93       	st	X, r24
	}
}
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <EXTI_voidDisableInterrupt>:

void EXTI_voidDisableInterrupt(u8 Copy_u8InterruptId)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <EXTI_voidDisableInterrupt+0x6>
    1268:	0f 92       	push	r0
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	89 83       	std	Y+1, r24	; 0x01
	//switching over interrupt sources
	switch(Copy_u8InterruptId)
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	3b 83       	std	Y+3, r19	; 0x03
    1278:	2a 83       	std	Y+2, r18	; 0x02
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	9b 81       	ldd	r25, Y+3	; 0x03
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	91 05       	cpc	r25, r1
    1282:	89 f0       	breq	.+34     	; 0x12a6 <EXTI_voidDisableInterrupt+0x44>
    1284:	2a 81       	ldd	r18, Y+2	; 0x02
    1286:	3b 81       	ldd	r19, Y+3	; 0x03
    1288:	22 30       	cpi	r18, 0x02	; 2
    128a:	31 05       	cpc	r19, r1
    128c:	a1 f0       	breq	.+40     	; 0x12b6 <EXTI_voidDisableInterrupt+0x54>
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	9b 81       	ldd	r25, Y+3	; 0x03
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	b9 f4       	brne	.+46     	; 0x12c4 <EXTI_voidDisableInterrupt+0x62>
	{
		case EXTI_INT0 :
				CLR_BIT(EXTI_GICR , GICR_INT0) ; break ;
    1296:	ab e5       	ldi	r26, 0x5B	; 91
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	eb e5       	ldi	r30, 0x5B	; 91
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	8f 7b       	andi	r24, 0xBF	; 191
    12a2:	8c 93       	st	X, r24
    12a4:	0f c0       	rjmp	.+30     	; 0x12c4 <EXTI_voidDisableInterrupt+0x62>

		case EXTI_INT1 :
				CLR_BIT(EXTI_GICR , GICR_INT1) ; break ;
    12a6:	ab e5       	ldi	r26, 0x5B	; 91
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	eb e5       	ldi	r30, 0x5B	; 91
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	8f 77       	andi	r24, 0x7F	; 127
    12b2:	8c 93       	st	X, r24
    12b4:	07 c0       	rjmp	.+14     	; 0x12c4 <EXTI_voidDisableInterrupt+0x62>

		case EXTI_INT2 :
				CLR_BIT(EXTI_GICR , GICR_INT2) ; break ;
    12b6:	ab e5       	ldi	r26, 0x5B	; 91
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	eb e5       	ldi	r30, 0x5B	; 91
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	8f 7d       	andi	r24, 0xDF	; 223
    12c2:	8c 93       	st	X, r24
	}
}
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <EXTI_voidSetSenseSignalINT0>:

void EXTI_voidSetSenseSignalINT0(u8 Copy_u8INT0SenseSignal)
{
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	00 d0       	rcall	.+0      	; 0x12d6 <EXTI_voidSetSenseSignalINT0+0x6>
    12d6:	0f 92       	push	r0
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	89 83       	std	Y+1, r24	; 0x01
	//switch over available sense signals for interrupt 0
	switch(Copy_u8INT0SenseSignal)
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	3b 83       	std	Y+3, r19	; 0x03
    12e6:	2a 83       	std	Y+2, r18	; 0x02
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	9b 81       	ldd	r25, Y+3	; 0x03
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	91 05       	cpc	r25, r1
    12f0:	21 f1       	breq	.+72     	; 0x133a <EXTI_voidSetSenseSignalINT0+0x6a>
    12f2:	2a 81       	ldd	r18, Y+2	; 0x02
    12f4:	3b 81       	ldd	r19, Y+3	; 0x03
    12f6:	22 30       	cpi	r18, 0x02	; 2
    12f8:	31 05       	cpc	r19, r1
    12fa:	2c f4       	brge	.+10     	; 0x1306 <EXTI_voidSetSenseSignalINT0+0x36>
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	61 f0       	breq	.+24     	; 0x131c <EXTI_voidSetSenseSignalINT0+0x4c>
    1304:	46 c0       	rjmp	.+140    	; 0x1392 <EXTI_voidSetSenseSignalINT0+0xc2>
    1306:	2a 81       	ldd	r18, Y+2	; 0x02
    1308:	3b 81       	ldd	r19, Y+3	; 0x03
    130a:	22 30       	cpi	r18, 0x02	; 2
    130c:	31 05       	cpc	r19, r1
    130e:	99 f1       	breq	.+102    	; 0x1376 <EXTI_voidSetSenseSignalINT0+0xa6>
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	9b 81       	ldd	r25, Y+3	; 0x03
    1314:	83 30       	cpi	r24, 0x03	; 3
    1316:	91 05       	cpc	r25, r1
    1318:	f9 f0       	breq	.+62     	; 0x1358 <EXTI_voidSetSenseSignalINT0+0x88>
    131a:	3b c0       	rjmp	.+118    	; 0x1392 <EXTI_voidSetSenseSignalINT0+0xc2>
	{
		case EXTI_INT0_FALLING_EDGE :
			SET_BIT(EXTI_MCUCR , MCUCR_ISC01) ;
    131c:	a5 e5       	ldi	r26, 0x55	; 85
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e5 e5       	ldi	r30, 0x55	; 85
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	82 60       	ori	r24, 0x02	; 2
    1328:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR , MCUCR_ISC00) ;
    132a:	a5 e5       	ldi	r26, 0x55	; 85
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e5 e5       	ldi	r30, 0x55	; 85
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	8e 7f       	andi	r24, 0xFE	; 254
    1336:	8c 93       	st	X, r24
    1338:	2c c0       	rjmp	.+88     	; 0x1392 <EXTI_voidSetSenseSignalINT0+0xc2>
			 break ;

		case EXTI_INT0_RISING_EDGE :
			SET_BIT(EXTI_MCUCR , MCUCR_ISC01) ;
    133a:	a5 e5       	ldi	r26, 0x55	; 85
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e5 e5       	ldi	r30, 0x55	; 85
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	82 60       	ori	r24, 0x02	; 2
    1346:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR , MCUCR_ISC00) ;
    1348:	a5 e5       	ldi	r26, 0x55	; 85
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e5 e5       	ldi	r30, 0x55	; 85
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	81 60       	ori	r24, 0x01	; 1
    1354:	8c 93       	st	X, r24
    1356:	1d c0       	rjmp	.+58     	; 0x1392 <EXTI_voidSetSenseSignalINT0+0xc2>
			break ;

		case EXTI_INT0_LOW_LEVEL :
			CLR_BIT(EXTI_MCUCR , MCUCR_ISC01) ;
    1358:	a5 e5       	ldi	r26, 0x55	; 85
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e5 e5       	ldi	r30, 0x55	; 85
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	8d 7f       	andi	r24, 0xFD	; 253
    1364:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR , MCUCR_ISC00) ;
    1366:	a5 e5       	ldi	r26, 0x55	; 85
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e5 e5       	ldi	r30, 0x55	; 85
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	8e 7f       	andi	r24, 0xFE	; 254
    1372:	8c 93       	st	X, r24
    1374:	0e c0       	rjmp	.+28     	; 0x1392 <EXTI_voidSetSenseSignalINT0+0xc2>
			break ;

		case EXTI_INT0_ON_CHANGE :
			CLR_BIT(EXTI_MCUCR , MCUCR_ISC01) ;
    1376:	a5 e5       	ldi	r26, 0x55	; 85
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e5 e5       	ldi	r30, 0x55	; 85
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	8d 7f       	andi	r24, 0xFD	; 253
    1382:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR , MCUCR_ISC00) ;
    1384:	a5 e5       	ldi	r26, 0x55	; 85
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e5 e5       	ldi	r30, 0x55	; 85
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	81 60       	ori	r24, 0x01	; 1
    1390:	8c 93       	st	X, r24
			break ;
	}
}
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <EXTI_voidSetSenseSignalINT1>:

void EXTI_voidSetSenseSignalINT1(u8 Copy_u8INT1SenseSignal)
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <EXTI_voidSetSenseSignalINT1+0x6>
    13a4:	0f 92       	push	r0
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	89 83       	std	Y+1, r24	; 0x01
	//switch over available sense signals for interrupt 0
	switch(Copy_u8INT1SenseSignal)
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	3b 83       	std	Y+3, r19	; 0x03
    13b4:	2a 83       	std	Y+2, r18	; 0x02
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	91 05       	cpc	r25, r1
    13be:	21 f1       	breq	.+72     	; 0x1408 <EXTI_voidSetSenseSignalINT1+0x6a>
    13c0:	2a 81       	ldd	r18, Y+2	; 0x02
    13c2:	3b 81       	ldd	r19, Y+3	; 0x03
    13c4:	22 30       	cpi	r18, 0x02	; 2
    13c6:	31 05       	cpc	r19, r1
    13c8:	2c f4       	brge	.+10     	; 0x13d4 <EXTI_voidSetSenseSignalINT1+0x36>
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	9b 81       	ldd	r25, Y+3	; 0x03
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	61 f0       	breq	.+24     	; 0x13ea <EXTI_voidSetSenseSignalINT1+0x4c>
    13d2:	46 c0       	rjmp	.+140    	; 0x1460 <EXTI_voidSetSenseSignalINT1+0xc2>
    13d4:	2a 81       	ldd	r18, Y+2	; 0x02
    13d6:	3b 81       	ldd	r19, Y+3	; 0x03
    13d8:	22 30       	cpi	r18, 0x02	; 2
    13da:	31 05       	cpc	r19, r1
    13dc:	99 f1       	breq	.+102    	; 0x1444 <EXTI_voidSetSenseSignalINT1+0xa6>
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	9b 81       	ldd	r25, Y+3	; 0x03
    13e2:	83 30       	cpi	r24, 0x03	; 3
    13e4:	91 05       	cpc	r25, r1
    13e6:	f9 f0       	breq	.+62     	; 0x1426 <EXTI_voidSetSenseSignalINT1+0x88>
    13e8:	3b c0       	rjmp	.+118    	; 0x1460 <EXTI_voidSetSenseSignalINT1+0xc2>
	{
		case EXTI_INT1_FALLING_EDGE :
			SET_BIT(EXTI_MCUCR , MCUCR_ISC11) ;
    13ea:	a5 e5       	ldi	r26, 0x55	; 85
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e5 e5       	ldi	r30, 0x55	; 85
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	88 60       	ori	r24, 0x08	; 8
    13f6:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR , MCUCR_ISC10) ;
    13f8:	a5 e5       	ldi	r26, 0x55	; 85
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e5 e5       	ldi	r30, 0x55	; 85
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	8b 7f       	andi	r24, 0xFB	; 251
    1404:	8c 93       	st	X, r24
    1406:	2c c0       	rjmp	.+88     	; 0x1460 <EXTI_voidSetSenseSignalINT1+0xc2>
			 break ;

		case EXTI_INT1_RISING_EDGE :
			SET_BIT(EXTI_MCUCR , MCUCR_ISC11) ;
    1408:	a5 e5       	ldi	r26, 0x55	; 85
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e5 e5       	ldi	r30, 0x55	; 85
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	88 60       	ori	r24, 0x08	; 8
    1414:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR , MCUCR_ISC10) ;
    1416:	a5 e5       	ldi	r26, 0x55	; 85
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e5 e5       	ldi	r30, 0x55	; 85
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	84 60       	ori	r24, 0x04	; 4
    1422:	8c 93       	st	X, r24
    1424:	1d c0       	rjmp	.+58     	; 0x1460 <EXTI_voidSetSenseSignalINT1+0xc2>
			break ;

		case EXTI_INT1_LOW_LEVEL :
			CLR_BIT(EXTI_MCUCR , MCUCR_ISC11) ;
    1426:	a5 e5       	ldi	r26, 0x55	; 85
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e5 e5       	ldi	r30, 0x55	; 85
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	87 7f       	andi	r24, 0xF7	; 247
    1432:	8c 93       	st	X, r24
			CLR_BIT(EXTI_MCUCR , MCUCR_ISC10) ;
    1434:	a5 e5       	ldi	r26, 0x55	; 85
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e5 e5       	ldi	r30, 0x55	; 85
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	8b 7f       	andi	r24, 0xFB	; 251
    1440:	8c 93       	st	X, r24
    1442:	0e c0       	rjmp	.+28     	; 0x1460 <EXTI_voidSetSenseSignalINT1+0xc2>
			break ;

		case EXTI_INT1_ON_CHANGE :
			CLR_BIT(EXTI_MCUCR , MCUCR_ISC11) ;
    1444:	a5 e5       	ldi	r26, 0x55	; 85
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e5 e5       	ldi	r30, 0x55	; 85
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	87 7f       	andi	r24, 0xF7	; 247
    1450:	8c 93       	st	X, r24
			SET_BIT(EXTI_MCUCR , MCUCR_ISC10) ;
    1452:	a5 e5       	ldi	r26, 0x55	; 85
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e5 e5       	ldi	r30, 0x55	; 85
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	84 60       	ori	r24, 0x04	; 4
    145e:	8c 93       	st	X, r24
			break ;
	}
}
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <EXTI_voidSetSenseSignalINT2>:

void EXTI_voidSetSenseSignalINT2(u8 Copy_u8INT2SenseSignal)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <EXTI_voidSetSenseSignalINT2+0x6>
    1472:	0f 92       	push	r0
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	89 83       	std	Y+1, r24	; 0x01
	//switch over available sense signals for interrupt 0
	switch(Copy_u8INT2SenseSignal)
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	3b 83       	std	Y+3, r19	; 0x03
    1482:	2a 83       	std	Y+2, r18	; 0x02
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	9b 81       	ldd	r25, Y+3	; 0x03
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	31 f0       	breq	.+12     	; 0x1498 <EXTI_voidSetSenseSignalINT2+0x2c>
    148c:	2a 81       	ldd	r18, Y+2	; 0x02
    148e:	3b 81       	ldd	r19, Y+3	; 0x03
    1490:	21 30       	cpi	r18, 0x01	; 1
    1492:	31 05       	cpc	r19, r1
    1494:	49 f0       	breq	.+18     	; 0x14a8 <EXTI_voidSetSenseSignalINT2+0x3c>
    1496:	0f c0       	rjmp	.+30     	; 0x14b6 <EXTI_voidSetSenseSignalINT2+0x4a>
	{
		case EXTI_INT2_FALLING_EDGE :
			CLR_BIT(EXTI_MCUCSR , MCUCSR_ISC2) ;
    1498:	a4 e5       	ldi	r26, 0x54	; 84
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e4 e5       	ldi	r30, 0x54	; 84
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	8f 7b       	andi	r24, 0xBF	; 191
    14a4:	8c 93       	st	X, r24
    14a6:	07 c0       	rjmp	.+14     	; 0x14b6 <EXTI_voidSetSenseSignalINT2+0x4a>
			 break ;

		case EXTI_INT2_RISING_EDGE :
			SET_BIT(EXTI_MCUCSR , MCUCSR_ISC2) ;
    14a8:	a4 e5       	ldi	r26, 0x54	; 84
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e4 e5       	ldi	r30, 0x54	; 84
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	80 64       	ori	r24, 0x40	; 64
    14b4:	8c 93       	st	X, r24
			break ;
	}


}
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <EXTI_voidControlGlobalInterrupt>:

void EXTI_voidControlGlobalInterrupt(u8 Copy_u8State)
{
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <EXTI_voidControlGlobalInterrupt+0x6>
    14c8:	0f 92       	push	r0
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	89 83       	std	Y+1, r24	; 0x01
	//Write 0 or 1 to the bit depending on input state
	switch(Copy_u8State)
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	3b 83       	std	Y+3, r19	; 0x03
    14d8:	2a 83       	std	Y+2, r18	; 0x02
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	9b 81       	ldd	r25, Y+3	; 0x03
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	31 f0       	breq	.+12     	; 0x14ee <EXTI_voidControlGlobalInterrupt+0x2c>
    14e2:	2a 81       	ldd	r18, Y+2	; 0x02
    14e4:	3b 81       	ldd	r19, Y+3	; 0x03
    14e6:	21 30       	cpi	r18, 0x01	; 1
    14e8:	31 05       	cpc	r19, r1
    14ea:	49 f0       	breq	.+18     	; 0x14fe <EXTI_voidControlGlobalInterrupt+0x3c>
    14ec:	0f c0       	rjmp	.+30     	; 0x150c <EXTI_voidControlGlobalInterrupt+0x4a>
		{
			case GIE_DISABLED :
				CLR_BIT(GIE_SREG , SREG_I) ;
    14ee:	af e5       	ldi	r26, 0x5F	; 95
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ef e5       	ldi	r30, 0x5F	; 95
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	8f 77       	andi	r24, 0x7F	; 127
    14fa:	8c 93       	st	X, r24
    14fc:	07 c0       	rjmp	.+14     	; 0x150c <EXTI_voidControlGlobalInterrupt+0x4a>
				 break ;

			case GIE_ENABLED :
				SET_BIT(GIE_SREG , SREG_I) ;
    14fe:	af e5       	ldi	r26, 0x5F	; 95
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	ef e5       	ldi	r30, 0x5F	; 95
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	80 68       	ori	r24, 0x80	; 128
    150a:	8c 93       	st	X, r24
				break ;
		}


}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <EXTI_voidSetCallbackINT0>:

void EXTI_voidSetCallbackINT0(void (*Copy_voidFuncptr) (void))
{
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	00 d0       	rcall	.+0      	; 0x151e <EXTI_voidSetCallbackINT0+0x6>
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    1522:	9a 83       	std	Y+2, r25	; 0x02
    1524:	89 83       	std	Y+1, r24	; 0x01
	CallbackFuncINT0 = Copy_voidFuncptr ;
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	9a 81       	ldd	r25, Y+2	; 0x02
    152a:	90 93 4b 01 	sts	0x014B, r25
    152e:	80 93 4a 01 	sts	0x014A, r24
}
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <__vector_1>:

void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    153c:	1f 92       	push	r1
    153e:	0f 92       	push	r0
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	0f 92       	push	r0
    1544:	11 24       	eor	r1, r1
    1546:	2f 93       	push	r18
    1548:	3f 93       	push	r19
    154a:	4f 93       	push	r20
    154c:	5f 93       	push	r21
    154e:	6f 93       	push	r22
    1550:	7f 93       	push	r23
    1552:	8f 93       	push	r24
    1554:	9f 93       	push	r25
    1556:	af 93       	push	r26
    1558:	bf 93       	push	r27
    155a:	ef 93       	push	r30
    155c:	ff 93       	push	r31
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
  if (CallbackFuncINT0 != NULL)
    1566:	80 91 4a 01 	lds	r24, 0x014A
    156a:	90 91 4b 01 	lds	r25, 0x014B
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	29 f0       	breq	.+10     	; 0x157c <__vector_1+0x40>
  {
	  CallbackFuncINT0();
    1572:	e0 91 4a 01 	lds	r30, 0x014A
    1576:	f0 91 4b 01 	lds	r31, 0x014B
    157a:	09 95       	icall
  }
}
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	ff 91       	pop	r31
    1582:	ef 91       	pop	r30
    1584:	bf 91       	pop	r27
    1586:	af 91       	pop	r26
    1588:	9f 91       	pop	r25
    158a:	8f 91       	pop	r24
    158c:	7f 91       	pop	r23
    158e:	6f 91       	pop	r22
    1590:	5f 91       	pop	r21
    1592:	4f 91       	pop	r20
    1594:	3f 91       	pop	r19
    1596:	2f 91       	pop	r18
    1598:	0f 90       	pop	r0
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	0f 90       	pop	r0
    159e:	1f 90       	pop	r1
    15a0:	18 95       	reti

000015a2 <EXTI_voidSetCallbackINT1>:

void EXTI_voidSetCallbackINT1(void (*Copy_voidFuncptr) (void))
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <EXTI_voidSetCallbackINT1+0x6>
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	9a 83       	std	Y+2, r25	; 0x02
    15ae:	89 83       	std	Y+1, r24	; 0x01
	CallbackFuncINT1 = Copy_voidFuncptr ;
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	9a 81       	ldd	r25, Y+2	; 0x02
    15b4:	90 93 4d 01 	sts	0x014D, r25
    15b8:	80 93 4c 01 	sts	0x014C, r24
}
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    15c6:	1f 92       	push	r1
    15c8:	0f 92       	push	r0
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	0f 92       	push	r0
    15ce:	11 24       	eor	r1, r1
    15d0:	2f 93       	push	r18
    15d2:	3f 93       	push	r19
    15d4:	4f 93       	push	r20
    15d6:	5f 93       	push	r21
    15d8:	6f 93       	push	r22
    15da:	7f 93       	push	r23
    15dc:	8f 93       	push	r24
    15de:	9f 93       	push	r25
    15e0:	af 93       	push	r26
    15e2:	bf 93       	push	r27
    15e4:	ef 93       	push	r30
    15e6:	ff 93       	push	r31
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
  if (CallbackFuncINT1 != NULL)
    15f0:	80 91 4c 01 	lds	r24, 0x014C
    15f4:	90 91 4d 01 	lds	r25, 0x014D
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	29 f0       	breq	.+10     	; 0x1606 <__vector_2+0x40>
  {
	  CallbackFuncINT1();
    15fc:	e0 91 4c 01 	lds	r30, 0x014C
    1600:	f0 91 4d 01 	lds	r31, 0x014D
    1604:	09 95       	icall
  }
}
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	ff 91       	pop	r31
    160c:	ef 91       	pop	r30
    160e:	bf 91       	pop	r27
    1610:	af 91       	pop	r26
    1612:	9f 91       	pop	r25
    1614:	8f 91       	pop	r24
    1616:	7f 91       	pop	r23
    1618:	6f 91       	pop	r22
    161a:	5f 91       	pop	r21
    161c:	4f 91       	pop	r20
    161e:	3f 91       	pop	r19
    1620:	2f 91       	pop	r18
    1622:	0f 90       	pop	r0
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	0f 90       	pop	r0
    1628:	1f 90       	pop	r1
    162a:	18 95       	reti

0000162c <EXTI_voidSetCallbackINT2>:
void EXTI_voidSetCallbackINT2(void (*Copy_voidFuncptr) (void))
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	00 d0       	rcall	.+0      	; 0x1632 <EXTI_voidSetCallbackINT2+0x6>
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	9a 83       	std	Y+2, r25	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01
	CallbackFuncINT2 = Copy_voidFuncptr ;
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	9a 81       	ldd	r25, Y+2	; 0x02
    163e:	90 93 4f 01 	sts	0x014F, r25
    1642:	80 93 4e 01 	sts	0x014E, r24
}
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    1650:	1f 92       	push	r1
    1652:	0f 92       	push	r0
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	0f 92       	push	r0
    1658:	11 24       	eor	r1, r1
    165a:	2f 93       	push	r18
    165c:	3f 93       	push	r19
    165e:	4f 93       	push	r20
    1660:	5f 93       	push	r21
    1662:	6f 93       	push	r22
    1664:	7f 93       	push	r23
    1666:	8f 93       	push	r24
    1668:	9f 93       	push	r25
    166a:	af 93       	push	r26
    166c:	bf 93       	push	r27
    166e:	ef 93       	push	r30
    1670:	ff 93       	push	r31
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
  if (CallbackFuncINT2 != NULL)
    167a:	80 91 4e 01 	lds	r24, 0x014E
    167e:	90 91 4f 01 	lds	r25, 0x014F
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	29 f0       	breq	.+10     	; 0x1690 <__vector_3+0x40>
  {
	  CallbackFuncINT2();
    1686:	e0 91 4e 01 	lds	r30, 0x014E
    168a:	f0 91 4f 01 	lds	r31, 0x014F
    168e:	09 95       	icall
  }
}
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	ff 91       	pop	r31
    1696:	ef 91       	pop	r30
    1698:	bf 91       	pop	r27
    169a:	af 91       	pop	r26
    169c:	9f 91       	pop	r25
    169e:	8f 91       	pop	r24
    16a0:	7f 91       	pop	r23
    16a2:	6f 91       	pop	r22
    16a4:	5f 91       	pop	r21
    16a6:	4f 91       	pop	r20
    16a8:	3f 91       	pop	r19
    16aa:	2f 91       	pop	r18
    16ac:	0f 90       	pop	r0
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	0f 90       	pop	r0
    16b2:	1f 90       	pop	r1
    16b4:	18 95       	reti

000016b6 <DIO_voidSetPinDirection>:




void DIO_voidSetPinDirection   (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8DIRECTION)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	29 97       	sbiw	r28, 0x09	; 9
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	89 83       	std	Y+1, r24	; 0x01
    16cc:	6a 83       	std	Y+2, r22	; 0x02
    16ce:	4b 83       	std	Y+3, r20	; 0x03
	if ((Copy_u8PORT <= PORTD )&&(Copy_u8PIN <= PIN7))
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	84 30       	cpi	r24, 0x04	; 4
    16d4:	08 f0       	brcs	.+2      	; 0x16d8 <DIO_voidSetPinDirection+0x22>
    16d6:	b0 c1       	rjmp	.+864    	; 0x1a38 <DIO_voidSetPinDirection+0x382>
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	88 30       	cpi	r24, 0x08	; 8
    16dc:	08 f0       	brcs	.+2      	; 0x16e0 <DIO_voidSetPinDirection+0x2a>
    16de:	ac c1       	rjmp	.+856    	; 0x1a38 <DIO_voidSetPinDirection+0x382>
	{
	if (Copy_u8DIRECTION==OUTPUT)
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	81 30       	cpi	r24, 0x01	; 1
    16e4:	09 f0       	breq	.+2      	; 0x16e8 <DIO_voidSetPinDirection+0x32>
    16e6:	6f c0       	rjmp	.+222    	; 0x17c6 <DIO_voidSetPinDirection+0x110>
	{
		switch(Copy_u8PORT)
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	39 87       	std	Y+9, r19	; 0x09
    16f0:	28 87       	std	Y+8, r18	; 0x08
    16f2:	88 85       	ldd	r24, Y+8	; 0x08
    16f4:	99 85       	ldd	r25, Y+9	; 0x09
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	91 05       	cpc	r25, r1
    16fa:	49 f1       	breq	.+82     	; 0x174e <DIO_voidSetPinDirection+0x98>
    16fc:	28 85       	ldd	r18, Y+8	; 0x08
    16fe:	39 85       	ldd	r19, Y+9	; 0x09
    1700:	22 30       	cpi	r18, 0x02	; 2
    1702:	31 05       	cpc	r19, r1
    1704:	2c f4       	brge	.+10     	; 0x1710 <DIO_voidSetPinDirection+0x5a>
    1706:	88 85       	ldd	r24, Y+8	; 0x08
    1708:	99 85       	ldd	r25, Y+9	; 0x09
    170a:	00 97       	sbiw	r24, 0x00	; 0
    170c:	61 f0       	breq	.+24     	; 0x1726 <DIO_voidSetPinDirection+0x70>
    170e:	94 c1       	rjmp	.+808    	; 0x1a38 <DIO_voidSetPinDirection+0x382>
    1710:	28 85       	ldd	r18, Y+8	; 0x08
    1712:	39 85       	ldd	r19, Y+9	; 0x09
    1714:	22 30       	cpi	r18, 0x02	; 2
    1716:	31 05       	cpc	r19, r1
    1718:	71 f1       	breq	.+92     	; 0x1776 <DIO_voidSetPinDirection+0xc0>
    171a:	88 85       	ldd	r24, Y+8	; 0x08
    171c:	99 85       	ldd	r25, Y+9	; 0x09
    171e:	83 30       	cpi	r24, 0x03	; 3
    1720:	91 05       	cpc	r25, r1
    1722:	e9 f1       	breq	.+122    	; 0x179e <DIO_voidSetPinDirection+0xe8>
    1724:	89 c1       	rjmp	.+786    	; 0x1a38 <DIO_voidSetPinDirection+0x382>
		{
			case PORTA: SET_BIT(DDRA_REGISTER,Copy_u8PIN); break;
    1726:	aa e3       	ldi	r26, 0x3A	; 58
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	ea e3       	ldi	r30, 0x3A	; 58
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <DIO_voidSetPinDirection+0x8e>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <DIO_voidSetPinDirection+0x8a>
    1748:	84 2b       	or	r24, r20
    174a:	8c 93       	st	X, r24
    174c:	75 c1       	rjmp	.+746    	; 0x1a38 <DIO_voidSetPinDirection+0x382>
			case PORTB: SET_BIT(DDRB_REGISTER,Copy_u8PIN); break;
    174e:	a7 e3       	ldi	r26, 0x37	; 55
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e7 e3       	ldi	r30, 0x37	; 55
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	48 2f       	mov	r20, r24
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 2e       	mov	r0, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <DIO_voidSetPinDirection+0xb6>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	0a 94       	dec	r0
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <DIO_voidSetPinDirection+0xb2>
    1770:	84 2b       	or	r24, r20
    1772:	8c 93       	st	X, r24
    1774:	61 c1       	rjmp	.+706    	; 0x1a38 <DIO_voidSetPinDirection+0x382>
			case PORTC: SET_BIT(DDRC_REGISTER,Copy_u8PIN); break;
    1776:	a4 e3       	ldi	r26, 0x34	; 52
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e4 e3       	ldi	r30, 0x34	; 52
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	48 2f       	mov	r20, r24
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	02 2e       	mov	r0, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <DIO_voidSetPinDirection+0xde>
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	0a 94       	dec	r0
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <DIO_voidSetPinDirection+0xda>
    1798:	84 2b       	or	r24, r20
    179a:	8c 93       	st	X, r24
    179c:	4d c1       	rjmp	.+666    	; 0x1a38 <DIO_voidSetPinDirection+0x382>
			case PORTD: SET_BIT(DDRD_REGISTER,Copy_u8PIN); break;
    179e:	a1 e3       	ldi	r26, 0x31	; 49
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e1 e3       	ldi	r30, 0x31	; 49
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	48 2f       	mov	r20, r24
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	02 2e       	mov	r0, r18
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <DIO_voidSetPinDirection+0x106>
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	0a 94       	dec	r0
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <DIO_voidSetPinDirection+0x102>
    17c0:	84 2b       	or	r24, r20
    17c2:	8c 93       	st	X, r24
    17c4:	39 c1       	rjmp	.+626    	; 0x1a38 <DIO_voidSetPinDirection+0x382>

		}

	}
	else if (Copy_u8DIRECTION==INPUT)
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	88 23       	and	r24, r24
    17ca:	09 f0       	breq	.+2      	; 0x17ce <DIO_voidSetPinDirection+0x118>
    17cc:	74 c0       	rjmp	.+232    	; 0x18b6 <DIO_voidSetPinDirection+0x200>
	{
		switch(Copy_u8PORT)
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	3f 83       	std	Y+7, r19	; 0x07
    17d6:	2e 83       	std	Y+6, r18	; 0x06
    17d8:	8e 81       	ldd	r24, Y+6	; 0x06
    17da:	9f 81       	ldd	r25, Y+7	; 0x07
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	91 05       	cpc	r25, r1
    17e0:	59 f1       	breq	.+86     	; 0x1838 <DIO_voidSetPinDirection+0x182>
    17e2:	2e 81       	ldd	r18, Y+6	; 0x06
    17e4:	3f 81       	ldd	r19, Y+7	; 0x07
    17e6:	22 30       	cpi	r18, 0x02	; 2
    17e8:	31 05       	cpc	r19, r1
    17ea:	2c f4       	brge	.+10     	; 0x17f6 <DIO_voidSetPinDirection+0x140>
    17ec:	8e 81       	ldd	r24, Y+6	; 0x06
    17ee:	9f 81       	ldd	r25, Y+7	; 0x07
    17f0:	00 97       	sbiw	r24, 0x00	; 0
    17f2:	69 f0       	breq	.+26     	; 0x180e <DIO_voidSetPinDirection+0x158>
    17f4:	21 c1       	rjmp	.+578    	; 0x1a38 <DIO_voidSetPinDirection+0x382>
    17f6:	2e 81       	ldd	r18, Y+6	; 0x06
    17f8:	3f 81       	ldd	r19, Y+7	; 0x07
    17fa:	22 30       	cpi	r18, 0x02	; 2
    17fc:	31 05       	cpc	r19, r1
    17fe:	89 f1       	breq	.+98     	; 0x1862 <DIO_voidSetPinDirection+0x1ac>
    1800:	8e 81       	ldd	r24, Y+6	; 0x06
    1802:	9f 81       	ldd	r25, Y+7	; 0x07
    1804:	83 30       	cpi	r24, 0x03	; 3
    1806:	91 05       	cpc	r25, r1
    1808:	09 f4       	brne	.+2      	; 0x180c <DIO_voidSetPinDirection+0x156>
    180a:	40 c0       	rjmp	.+128    	; 0x188c <DIO_voidSetPinDirection+0x1d6>
    180c:	15 c1       	rjmp	.+554    	; 0x1a38 <DIO_voidSetPinDirection+0x382>
		{
			case PORTA: CLR_BIT(DDRA_REGISTER,Copy_u8PIN); break;
    180e:	aa e3       	ldi	r26, 0x3A	; 58
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	ea e3       	ldi	r30, 0x3A	; 58
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 2e       	mov	r0, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <DIO_voidSetPinDirection+0x176>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <DIO_voidSetPinDirection+0x172>
    1830:	80 95       	com	r24
    1832:	84 23       	and	r24, r20
    1834:	8c 93       	st	X, r24
    1836:	00 c1       	rjmp	.+512    	; 0x1a38 <DIO_voidSetPinDirection+0x382>
			case PORTB: CLR_BIT(DDRB_REGISTER,Copy_u8PIN); break;
    1838:	a7 e3       	ldi	r26, 0x37	; 55
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e7 e3       	ldi	r30, 0x37	; 55
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	48 2f       	mov	r20, r24
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 2e       	mov	r0, r18
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <DIO_voidSetPinDirection+0x1a0>
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	0a 94       	dec	r0
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <DIO_voidSetPinDirection+0x19c>
    185a:	80 95       	com	r24
    185c:	84 23       	and	r24, r20
    185e:	8c 93       	st	X, r24
    1860:	eb c0       	rjmp	.+470    	; 0x1a38 <DIO_voidSetPinDirection+0x382>
			case PORTC: CLR_BIT(DDRC_REGISTER,Copy_u8PIN); break;
    1862:	a4 e3       	ldi	r26, 0x34	; 52
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e4 e3       	ldi	r30, 0x34	; 52
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	48 2f       	mov	r20, r24
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	02 2e       	mov	r0, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <DIO_voidSetPinDirection+0x1ca>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	0a 94       	dec	r0
    1882:	e2 f7       	brpl	.-8      	; 0x187c <DIO_voidSetPinDirection+0x1c6>
    1884:	80 95       	com	r24
    1886:	84 23       	and	r24, r20
    1888:	8c 93       	st	X, r24
    188a:	d6 c0       	rjmp	.+428    	; 0x1a38 <DIO_voidSetPinDirection+0x382>
			case PORTD: CLR_BIT(DDRD_REGISTER,Copy_u8PIN); break;
    188c:	a1 e3       	ldi	r26, 0x31	; 49
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e1 e3       	ldi	r30, 0x31	; 49
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	48 2f       	mov	r20, r24
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	02 2e       	mov	r0, r18
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <DIO_voidSetPinDirection+0x1f4>
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	0a 94       	dec	r0
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <DIO_voidSetPinDirection+0x1f0>
    18ae:	80 95       	com	r24
    18b0:	84 23       	and	r24, r20
    18b2:	8c 93       	st	X, r24
    18b4:	c1 c0       	rjmp	.+386    	; 0x1a38 <DIO_voidSetPinDirection+0x382>

		}
	}
	else if (Copy_u8DIRECTION==INPUT_PULL_UP)
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	82 30       	cpi	r24, 0x02	; 2
    18ba:	09 f0       	breq	.+2      	; 0x18be <DIO_voidSetPinDirection+0x208>
    18bc:	bd c0       	rjmp	.+378    	; 0x1a38 <DIO_voidSetPinDirection+0x382>
	{
		switch(Copy_u8PORT)
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	3d 83       	std	Y+5, r19	; 0x05
    18c6:	2c 83       	std	Y+4, r18	; 0x04
    18c8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ca:	9d 81       	ldd	r25, Y+5	; 0x05
    18cc:	81 30       	cpi	r24, 0x01	; 1
    18ce:	91 05       	cpc	r25, r1
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <DIO_voidSetPinDirection+0x21e>
    18d2:	3e c0       	rjmp	.+124    	; 0x1950 <DIO_voidSetPinDirection+0x29a>
    18d4:	2c 81       	ldd	r18, Y+4	; 0x04
    18d6:	3d 81       	ldd	r19, Y+5	; 0x05
    18d8:	22 30       	cpi	r18, 0x02	; 2
    18da:	31 05       	cpc	r19, r1
    18dc:	2c f4       	brge	.+10     	; 0x18e8 <DIO_voidSetPinDirection+0x232>
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	9d 81       	ldd	r25, Y+5	; 0x05
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	71 f0       	breq	.+28     	; 0x1902 <DIO_voidSetPinDirection+0x24c>
    18e6:	a8 c0       	rjmp	.+336    	; 0x1a38 <DIO_voidSetPinDirection+0x382>
    18e8:	2c 81       	ldd	r18, Y+4	; 0x04
    18ea:	3d 81       	ldd	r19, Y+5	; 0x05
    18ec:	22 30       	cpi	r18, 0x02	; 2
    18ee:	31 05       	cpc	r19, r1
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <DIO_voidSetPinDirection+0x23e>
    18f2:	55 c0       	rjmp	.+170    	; 0x199e <DIO_voidSetPinDirection+0x2e8>
    18f4:	8c 81       	ldd	r24, Y+4	; 0x04
    18f6:	9d 81       	ldd	r25, Y+5	; 0x05
    18f8:	83 30       	cpi	r24, 0x03	; 3
    18fa:	91 05       	cpc	r25, r1
    18fc:	09 f4       	brne	.+2      	; 0x1900 <DIO_voidSetPinDirection+0x24a>
    18fe:	76 c0       	rjmp	.+236    	; 0x19ec <DIO_voidSetPinDirection+0x336>
    1900:	9b c0       	rjmp	.+310    	; 0x1a38 <DIO_voidSetPinDirection+0x382>
		{
			case PORTA : CLR_BIT(DDRA_REGISTER , Copy_u8PIN);
    1902:	aa e3       	ldi	r26, 0x3A	; 58
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	ea e3       	ldi	r30, 0x3A	; 58
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 c0       	rjmp	.+4      	; 0x191e <DIO_voidSetPinDirection+0x268>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	2a 95       	dec	r18
    1920:	e2 f7       	brpl	.-8      	; 0x191a <DIO_voidSetPinDirection+0x264>
    1922:	80 95       	com	r24
    1924:	84 23       	and	r24, r20
    1926:	8c 93       	st	X, r24
			  	  	  	 SET_BIT(PORTA_REGISTER , Copy_u8PIN);
    1928:	ab e3       	ldi	r26, 0x3B	; 59
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	eb e3       	ldi	r30, 0x3B	; 59
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_voidSetPinDirection+0x290>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <DIO_voidSetPinDirection+0x28c>
    194a:	84 2b       	or	r24, r20
    194c:	8c 93       	st	X, r24
    194e:	74 c0       	rjmp	.+232    	; 0x1a38 <DIO_voidSetPinDirection+0x382>
			  	  	  	 break ;

			case PORTB : CLR_BIT(DDRB_REGISTER  , Copy_u8PIN);
    1950:	a7 e3       	ldi	r26, 0x37	; 55
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e7 e3       	ldi	r30, 0x37	; 55
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	48 2f       	mov	r20, r24
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	02 c0       	rjmp	.+4      	; 0x196c <DIO_voidSetPinDirection+0x2b6>
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	2a 95       	dec	r18
    196e:	e2 f7       	brpl	.-8      	; 0x1968 <DIO_voidSetPinDirection+0x2b2>
    1970:	80 95       	com	r24
    1972:	84 23       	and	r24, r20
    1974:	8c 93       	st	X, r24
				      	 SET_BIT(PORTB_REGISTER , Copy_u8PIN);
    1976:	a8 e3       	ldi	r26, 0x38	; 56
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e8 e3       	ldi	r30, 0x38	; 56
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	48 2f       	mov	r20, r24
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	02 2e       	mov	r0, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <DIO_voidSetPinDirection+0x2de>
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	0a 94       	dec	r0
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <DIO_voidSetPinDirection+0x2da>
    1998:	84 2b       	or	r24, r20
    199a:	8c 93       	st	X, r24
    199c:	4d c0       	rjmp	.+154    	; 0x1a38 <DIO_voidSetPinDirection+0x382>
				      	 break ;

			case PORTC : CLR_BIT(DDRC_REGISTER  , Copy_u8PIN);
    199e:	a4 e3       	ldi	r26, 0x34	; 52
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e4 e3       	ldi	r30, 0x34	; 52
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	48 2f       	mov	r20, r24
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <DIO_voidSetPinDirection+0x304>
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	2a 95       	dec	r18
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <DIO_voidSetPinDirection+0x300>
    19be:	80 95       	com	r24
    19c0:	84 23       	and	r24, r20
    19c2:	8c 93       	st	X, r24
						 SET_BIT(PORTC_REGISTER , Copy_u8PIN);
    19c4:	a5 e3       	ldi	r26, 0x35	; 53
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e5 e3       	ldi	r30, 0x35	; 53
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	48 2f       	mov	r20, r24
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	28 2f       	mov	r18, r24
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	02 2e       	mov	r0, r18
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <DIO_voidSetPinDirection+0x32c>
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	0a 94       	dec	r0
    19e4:	e2 f7       	brpl	.-8      	; 0x19de <DIO_voidSetPinDirection+0x328>
    19e6:	84 2b       	or	r24, r20
    19e8:	8c 93       	st	X, r24
    19ea:	26 c0       	rjmp	.+76     	; 0x1a38 <DIO_voidSetPinDirection+0x382>
						 break ;

			case PORTD : CLR_BIT(DDRD_REGISTER  , Copy_u8PIN);
    19ec:	a1 e3       	ldi	r26, 0x31	; 49
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	e1 e3       	ldi	r30, 0x31	; 49
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	48 2f       	mov	r20, r24
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <DIO_voidSetPinDirection+0x352>
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	2a 95       	dec	r18
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <DIO_voidSetPinDirection+0x34e>
    1a0c:	80 95       	com	r24
    1a0e:	84 23       	and	r24, r20
    1a10:	8c 93       	st	X, r24
						 SET_BIT(PORTD_REGISTER , Copy_u8PIN);
    1a12:	a2 e3       	ldi	r26, 0x32	; 50
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e2 e3       	ldi	r30, 0x32	; 50
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	48 2f       	mov	r20, r24
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	02 2e       	mov	r0, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <DIO_voidSetPinDirection+0x37a>
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	0a 94       	dec	r0
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <DIO_voidSetPinDirection+0x376>
    1a34:	84 2b       	or	r24, r20
    1a36:	8c 93       	st	X, r24
						 break ;
		}
	}
	}
}
    1a38:	29 96       	adiw	r28, 0x09	; 9
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection  (u8 Copy_u8PORT , u8 Copy_u8DIRECTION)
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	28 97       	sbiw	r28, 0x08	; 8
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	de bf       	out	0x3e, r29	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    1a60:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8PORT <= PORTD&&Copy_u8PORT >= PORTA )
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	84 30       	cpi	r24, 0x04	; 4
    1a66:	08 f0       	brcs	.+2      	; 0x1a6a <DIO_voidSetPortDirection+0x20>
    1a68:	9a c0       	rjmp	.+308    	; 0x1b9e <DIO_voidSetPortDirection+0x154>
	{
		if (Copy_u8DIRECTION==PORT_OUTPUT)
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a6e:	99 f5       	brne	.+102    	; 0x1ad6 <DIO_voidSetPortDirection+0x8c>
		{
			switch(Copy_u8PORT)
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	38 87       	std	Y+8, r19	; 0x08
    1a78:	2f 83       	std	Y+7, r18	; 0x07
    1a7a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a7c:	98 85       	ldd	r25, Y+8	; 0x08
    1a7e:	81 30       	cpi	r24, 0x01	; 1
    1a80:	91 05       	cpc	r25, r1
    1a82:	d1 f0       	breq	.+52     	; 0x1ab8 <DIO_voidSetPortDirection+0x6e>
    1a84:	2f 81       	ldd	r18, Y+7	; 0x07
    1a86:	38 85       	ldd	r19, Y+8	; 0x08
    1a88:	22 30       	cpi	r18, 0x02	; 2
    1a8a:	31 05       	cpc	r19, r1
    1a8c:	2c f4       	brge	.+10     	; 0x1a98 <DIO_voidSetPortDirection+0x4e>
    1a8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a90:	98 85       	ldd	r25, Y+8	; 0x08
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	61 f0       	breq	.+24     	; 0x1aae <DIO_voidSetPortDirection+0x64>
    1a96:	83 c0       	rjmp	.+262    	; 0x1b9e <DIO_voidSetPortDirection+0x154>
    1a98:	2f 81       	ldd	r18, Y+7	; 0x07
    1a9a:	38 85       	ldd	r19, Y+8	; 0x08
    1a9c:	22 30       	cpi	r18, 0x02	; 2
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	81 f0       	breq	.+32     	; 0x1ac2 <DIO_voidSetPortDirection+0x78>
    1aa2:	8f 81       	ldd	r24, Y+7	; 0x07
    1aa4:	98 85       	ldd	r25, Y+8	; 0x08
    1aa6:	83 30       	cpi	r24, 0x03	; 3
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	81 f0       	breq	.+32     	; 0x1acc <DIO_voidSetPortDirection+0x82>
    1aac:	78 c0       	rjmp	.+240    	; 0x1b9e <DIO_voidSetPortDirection+0x154>
			{
				case PORTA: DDRA_REGISTER = PORT_OUTPUT; break;
    1aae:	ea e3       	ldi	r30, 0x3A	; 58
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	8f ef       	ldi	r24, 0xFF	; 255
    1ab4:	80 83       	st	Z, r24
    1ab6:	73 c0       	rjmp	.+230    	; 0x1b9e <DIO_voidSetPortDirection+0x154>
				case PORTB: DDRB_REGISTER = PORT_OUTPUT; break;
    1ab8:	e7 e3       	ldi	r30, 0x37	; 55
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	8f ef       	ldi	r24, 0xFF	; 255
    1abe:	80 83       	st	Z, r24
    1ac0:	6e c0       	rjmp	.+220    	; 0x1b9e <DIO_voidSetPortDirection+0x154>
				case PORTC: DDRC_REGISTER = PORT_OUTPUT; break;
    1ac2:	e4 e3       	ldi	r30, 0x34	; 52
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	8f ef       	ldi	r24, 0xFF	; 255
    1ac8:	80 83       	st	Z, r24
    1aca:	69 c0       	rjmp	.+210    	; 0x1b9e <DIO_voidSetPortDirection+0x154>
				case PORTD: DDRD_REGISTER = PORT_OUTPUT; break;
    1acc:	e1 e3       	ldi	r30, 0x31	; 49
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	8f ef       	ldi	r24, 0xFF	; 255
    1ad2:	80 83       	st	Z, r24
    1ad4:	64 c0       	rjmp	.+200    	; 0x1b9e <DIO_voidSetPortDirection+0x154>

			}

		}
		else if (Copy_u8DIRECTION==PORT_INPUT)
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	88 23       	and	r24, r24
    1ada:	79 f5       	brne	.+94     	; 0x1b3a <DIO_voidSetPortDirection+0xf0>
		{
			switch(Copy_u8PORT)
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	3e 83       	std	Y+6, r19	; 0x06
    1ae4:	2d 83       	std	Y+5, r18	; 0x05
    1ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aea:	81 30       	cpi	r24, 0x01	; 1
    1aec:	91 05       	cpc	r25, r1
    1aee:	c9 f0       	breq	.+50     	; 0x1b22 <DIO_voidSetPortDirection+0xd8>
    1af0:	2d 81       	ldd	r18, Y+5	; 0x05
    1af2:	3e 81       	ldd	r19, Y+6	; 0x06
    1af4:	22 30       	cpi	r18, 0x02	; 2
    1af6:	31 05       	cpc	r19, r1
    1af8:	2c f4       	brge	.+10     	; 0x1b04 <DIO_voidSetPortDirection+0xba>
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	61 f0       	breq	.+24     	; 0x1b1a <DIO_voidSetPortDirection+0xd0>
    1b02:	4d c0       	rjmp	.+154    	; 0x1b9e <DIO_voidSetPortDirection+0x154>
    1b04:	2d 81       	ldd	r18, Y+5	; 0x05
    1b06:	3e 81       	ldd	r19, Y+6	; 0x06
    1b08:	22 30       	cpi	r18, 0x02	; 2
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	71 f0       	breq	.+28     	; 0x1b2a <DIO_voidSetPortDirection+0xe0>
    1b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b10:	9e 81       	ldd	r25, Y+6	; 0x06
    1b12:	83 30       	cpi	r24, 0x03	; 3
    1b14:	91 05       	cpc	r25, r1
    1b16:	69 f0       	breq	.+26     	; 0x1b32 <DIO_voidSetPortDirection+0xe8>
    1b18:	42 c0       	rjmp	.+132    	; 0x1b9e <DIO_voidSetPortDirection+0x154>
			{
			case PORTA: DDRA_REGISTER = PORT_INPUT; break;
    1b1a:	ea e3       	ldi	r30, 0x3A	; 58
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	10 82       	st	Z, r1
    1b20:	3e c0       	rjmp	.+124    	; 0x1b9e <DIO_voidSetPortDirection+0x154>
			case PORTB: DDRB_REGISTER = PORT_INPUT; break;
    1b22:	e7 e3       	ldi	r30, 0x37	; 55
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	10 82       	st	Z, r1
    1b28:	3a c0       	rjmp	.+116    	; 0x1b9e <DIO_voidSetPortDirection+0x154>
			case PORTC: DDRC_REGISTER = PORT_INPUT; break;
    1b2a:	e4 e3       	ldi	r30, 0x34	; 52
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	10 82       	st	Z, r1
    1b30:	36 c0       	rjmp	.+108    	; 0x1b9e <DIO_voidSetPortDirection+0x154>
			case PORTD: DDRD_REGISTER = PORT_INPUT; break;
    1b32:	e1 e3       	ldi	r30, 0x31	; 49
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	10 82       	st	Z, r1
    1b38:	32 c0       	rjmp	.+100    	; 0x1b9e <DIO_voidSetPortDirection+0x154>

			}
		}
		else
		{
			switch(Copy_u8PORT)
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	3c 83       	std	Y+4, r19	; 0x04
    1b42:	2b 83       	std	Y+3, r18	; 0x03
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	81 30       	cpi	r24, 0x01	; 1
    1b4a:	91 05       	cpc	r25, r1
    1b4c:	d1 f0       	breq	.+52     	; 0x1b82 <DIO_voidSetPortDirection+0x138>
    1b4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b50:	3c 81       	ldd	r19, Y+4	; 0x04
    1b52:	22 30       	cpi	r18, 0x02	; 2
    1b54:	31 05       	cpc	r19, r1
    1b56:	2c f4       	brge	.+10     	; 0x1b62 <DIO_voidSetPortDirection+0x118>
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	61 f0       	breq	.+24     	; 0x1b78 <DIO_voidSetPortDirection+0x12e>
    1b60:	1e c0       	rjmp	.+60     	; 0x1b9e <DIO_voidSetPortDirection+0x154>
    1b62:	2b 81       	ldd	r18, Y+3	; 0x03
    1b64:	3c 81       	ldd	r19, Y+4	; 0x04
    1b66:	22 30       	cpi	r18, 0x02	; 2
    1b68:	31 05       	cpc	r19, r1
    1b6a:	81 f0       	breq	.+32     	; 0x1b8c <DIO_voidSetPortDirection+0x142>
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b70:	83 30       	cpi	r24, 0x03	; 3
    1b72:	91 05       	cpc	r25, r1
    1b74:	81 f0       	breq	.+32     	; 0x1b96 <DIO_voidSetPortDirection+0x14c>
    1b76:	13 c0       	rjmp	.+38     	; 0x1b9e <DIO_voidSetPortDirection+0x154>
			{
			case PORTA: DDRA_REGISTER = Copy_u8DIRECTION; break;
    1b78:	ea e3       	ldi	r30, 0x3A	; 58
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	80 83       	st	Z, r24
    1b80:	0e c0       	rjmp	.+28     	; 0x1b9e <DIO_voidSetPortDirection+0x154>
			case PORTB: DDRB_REGISTER = Copy_u8DIRECTION; break;
    1b82:	e7 e3       	ldi	r30, 0x37	; 55
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	80 83       	st	Z, r24
    1b8a:	09 c0       	rjmp	.+18     	; 0x1b9e <DIO_voidSetPortDirection+0x154>
			case PORTC: DDRC_REGISTER = Copy_u8DIRECTION; break;
    1b8c:	e4 e3       	ldi	r30, 0x34	; 52
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	80 83       	st	Z, r24
    1b94:	04 c0       	rjmp	.+8      	; 0x1b9e <DIO_voidSetPortDirection+0x154>
			case PORTD: DDRD_REGISTER = Copy_u8DIRECTION; break;
    1b96:	e1 e3       	ldi	r30, 0x31	; 49
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	80 83       	st	Z, r24

			}
		}

		}
	}
    1b9e:	28 96       	adiw	r28, 0x08	; 8
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	de bf       	out	0x3e, r29	; 62
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	cd bf       	out	0x3d, r28	; 61
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	08 95       	ret

00001bb0 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue       (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8VALUE)
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
    1bb8:	29 97       	sbiw	r28, 0x09	; 9
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	f8 94       	cli
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	0f be       	out	0x3f, r0	; 63
    1bc2:	cd bf       	out	0x3d, r28	; 61
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	6a 83       	std	Y+2, r22	; 0x02
    1bc8:	4b 83       	std	Y+3, r20	; 0x03
	if ((Copy_u8PORT <= PORTD )&&(Copy_u8PIN <= PIN7))
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	84 30       	cpi	r24, 0x04	; 4
    1bce:	08 f0       	brcs	.+2      	; 0x1bd2 <DIO_voidSetPinValue+0x22>
    1bd0:	21 c1       	rjmp	.+578    	; 0x1e14 <DIO_voidSetPinValue+0x264>
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	88 30       	cpi	r24, 0x08	; 8
    1bd6:	08 f0       	brcs	.+2      	; 0x1bda <DIO_voidSetPinValue+0x2a>
    1bd8:	1d c1       	rjmp	.+570    	; 0x1e14 <DIO_voidSetPinValue+0x264>
	{
		if(Copy_u8VALUE == HIGH)
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <DIO_voidSetPinValue+0x32>
    1be0:	6f c0       	rjmp	.+222    	; 0x1cc0 <DIO_voidSetPinValue+0x110>
		{
			switch(Copy_u8PORT)
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	39 87       	std	Y+9, r19	; 0x09
    1bea:	28 87       	std	Y+8, r18	; 0x08
    1bec:	88 85       	ldd	r24, Y+8	; 0x08
    1bee:	99 85       	ldd	r25, Y+9	; 0x09
    1bf0:	81 30       	cpi	r24, 0x01	; 1
    1bf2:	91 05       	cpc	r25, r1
    1bf4:	49 f1       	breq	.+82     	; 0x1c48 <DIO_voidSetPinValue+0x98>
    1bf6:	28 85       	ldd	r18, Y+8	; 0x08
    1bf8:	39 85       	ldd	r19, Y+9	; 0x09
    1bfa:	22 30       	cpi	r18, 0x02	; 2
    1bfc:	31 05       	cpc	r19, r1
    1bfe:	2c f4       	brge	.+10     	; 0x1c0a <DIO_voidSetPinValue+0x5a>
    1c00:	88 85       	ldd	r24, Y+8	; 0x08
    1c02:	99 85       	ldd	r25, Y+9	; 0x09
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	61 f0       	breq	.+24     	; 0x1c20 <DIO_voidSetPinValue+0x70>
    1c08:	05 c1       	rjmp	.+522    	; 0x1e14 <DIO_voidSetPinValue+0x264>
    1c0a:	28 85       	ldd	r18, Y+8	; 0x08
    1c0c:	39 85       	ldd	r19, Y+9	; 0x09
    1c0e:	22 30       	cpi	r18, 0x02	; 2
    1c10:	31 05       	cpc	r19, r1
    1c12:	71 f1       	breq	.+92     	; 0x1c70 <DIO_voidSetPinValue+0xc0>
    1c14:	88 85       	ldd	r24, Y+8	; 0x08
    1c16:	99 85       	ldd	r25, Y+9	; 0x09
    1c18:	83 30       	cpi	r24, 0x03	; 3
    1c1a:	91 05       	cpc	r25, r1
    1c1c:	e9 f1       	breq	.+122    	; 0x1c98 <DIO_voidSetPinValue+0xe8>
    1c1e:	fa c0       	rjmp	.+500    	; 0x1e14 <DIO_voidSetPinValue+0x264>
			{
			case PORTA: SET_BIT(PORTA_REGISTER,Copy_u8PIN); break;
    1c20:	ab e3       	ldi	r26, 0x3B	; 59
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	eb e3       	ldi	r30, 0x3B	; 59
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	48 2f       	mov	r20, r24
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	02 2e       	mov	r0, r18
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <DIO_voidSetPinValue+0x8e>
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	0a 94       	dec	r0
    1c40:	e2 f7       	brpl	.-8      	; 0x1c3a <DIO_voidSetPinValue+0x8a>
    1c42:	84 2b       	or	r24, r20
    1c44:	8c 93       	st	X, r24
    1c46:	e6 c0       	rjmp	.+460    	; 0x1e14 <DIO_voidSetPinValue+0x264>
			case PORTB: SET_BIT(PORTB_REGISTER,Copy_u8PIN); break;
    1c48:	a8 e3       	ldi	r26, 0x38	; 56
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e8 e3       	ldi	r30, 0x38	; 56
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	48 2f       	mov	r20, r24
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	02 2e       	mov	r0, r18
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <DIO_voidSetPinValue+0xb6>
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	0a 94       	dec	r0
    1c68:	e2 f7       	brpl	.-8      	; 0x1c62 <DIO_voidSetPinValue+0xb2>
    1c6a:	84 2b       	or	r24, r20
    1c6c:	8c 93       	st	X, r24
    1c6e:	d2 c0       	rjmp	.+420    	; 0x1e14 <DIO_voidSetPinValue+0x264>
			case PORTC: SET_BIT(PORTC_REGISTER,Copy_u8PIN); break;
    1c70:	a5 e3       	ldi	r26, 0x35	; 53
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e5 e3       	ldi	r30, 0x35	; 53
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	48 2f       	mov	r20, r24
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	02 2e       	mov	r0, r18
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <DIO_voidSetPinValue+0xde>
    1c8a:	88 0f       	add	r24, r24
    1c8c:	99 1f       	adc	r25, r25
    1c8e:	0a 94       	dec	r0
    1c90:	e2 f7       	brpl	.-8      	; 0x1c8a <DIO_voidSetPinValue+0xda>
    1c92:	84 2b       	or	r24, r20
    1c94:	8c 93       	st	X, r24
    1c96:	be c0       	rjmp	.+380    	; 0x1e14 <DIO_voidSetPinValue+0x264>
			case PORTD: SET_BIT(PORTD_REGISTER,Copy_u8PIN); break;
    1c98:	a2 e3       	ldi	r26, 0x32	; 50
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e2 e3       	ldi	r30, 0x32	; 50
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	48 2f       	mov	r20, r24
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	02 2e       	mov	r0, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <DIO_voidSetPinValue+0x106>
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	0a 94       	dec	r0
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <DIO_voidSetPinValue+0x102>
    1cba:	84 2b       	or	r24, r20
    1cbc:	8c 93       	st	X, r24
    1cbe:	aa c0       	rjmp	.+340    	; 0x1e14 <DIO_voidSetPinValue+0x264>

			}
		}
		else if (Copy_u8VALUE == LOW)
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	88 23       	and	r24, r24
    1cc4:	09 f0       	breq	.+2      	; 0x1cc8 <DIO_voidSetPinValue+0x118>
    1cc6:	74 c0       	rjmp	.+232    	; 0x1db0 <DIO_voidSetPinValue+0x200>
		{
			switch(Copy_u8PORT)
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	3f 83       	std	Y+7, r19	; 0x07
    1cd0:	2e 83       	std	Y+6, r18	; 0x06
    1cd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd4:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd6:	81 30       	cpi	r24, 0x01	; 1
    1cd8:	91 05       	cpc	r25, r1
    1cda:	59 f1       	breq	.+86     	; 0x1d32 <DIO_voidSetPinValue+0x182>
    1cdc:	2e 81       	ldd	r18, Y+6	; 0x06
    1cde:	3f 81       	ldd	r19, Y+7	; 0x07
    1ce0:	22 30       	cpi	r18, 0x02	; 2
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	2c f4       	brge	.+10     	; 0x1cf0 <DIO_voidSetPinValue+0x140>
    1ce6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	69 f0       	breq	.+26     	; 0x1d08 <DIO_voidSetPinValue+0x158>
    1cee:	92 c0       	rjmp	.+292    	; 0x1e14 <DIO_voidSetPinValue+0x264>
    1cf0:	2e 81       	ldd	r18, Y+6	; 0x06
    1cf2:	3f 81       	ldd	r19, Y+7	; 0x07
    1cf4:	22 30       	cpi	r18, 0x02	; 2
    1cf6:	31 05       	cpc	r19, r1
    1cf8:	89 f1       	breq	.+98     	; 0x1d5c <DIO_voidSetPinValue+0x1ac>
    1cfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cfe:	83 30       	cpi	r24, 0x03	; 3
    1d00:	91 05       	cpc	r25, r1
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <DIO_voidSetPinValue+0x156>
    1d04:	40 c0       	rjmp	.+128    	; 0x1d86 <DIO_voidSetPinValue+0x1d6>
    1d06:	86 c0       	rjmp	.+268    	; 0x1e14 <DIO_voidSetPinValue+0x264>
			{
			case PORTA: CLR_BIT(PORTA_REGISTER,Copy_u8PIN); break;
    1d08:	ab e3       	ldi	r26, 0x3B	; 59
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	eb e3       	ldi	r30, 0x3B	; 59
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	48 2f       	mov	r20, r24
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	02 2e       	mov	r0, r18
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <DIO_voidSetPinValue+0x176>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	0a 94       	dec	r0
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <DIO_voidSetPinValue+0x172>
    1d2a:	80 95       	com	r24
    1d2c:	84 23       	and	r24, r20
    1d2e:	8c 93       	st	X, r24
    1d30:	71 c0       	rjmp	.+226    	; 0x1e14 <DIO_voidSetPinValue+0x264>
			case PORTB: CLR_BIT(PORTB_REGISTER,Copy_u8PIN); break;
    1d32:	a8 e3       	ldi	r26, 0x38	; 56
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e8 e3       	ldi	r30, 0x38	; 56
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	48 2f       	mov	r20, r24
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	02 2e       	mov	r0, r18
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <DIO_voidSetPinValue+0x1a0>
    1d4c:	88 0f       	add	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	0a 94       	dec	r0
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <DIO_voidSetPinValue+0x19c>
    1d54:	80 95       	com	r24
    1d56:	84 23       	and	r24, r20
    1d58:	8c 93       	st	X, r24
    1d5a:	5c c0       	rjmp	.+184    	; 0x1e14 <DIO_voidSetPinValue+0x264>
			case PORTC: CLR_BIT(PORTC_REGISTER,Copy_u8PIN); break;
    1d5c:	a5 e3       	ldi	r26, 0x35	; 53
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e5 e3       	ldi	r30, 0x35	; 53
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	48 2f       	mov	r20, r24
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 2e       	mov	r0, r18
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <DIO_voidSetPinValue+0x1ca>
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	0a 94       	dec	r0
    1d7c:	e2 f7       	brpl	.-8      	; 0x1d76 <DIO_voidSetPinValue+0x1c6>
    1d7e:	80 95       	com	r24
    1d80:	84 23       	and	r24, r20
    1d82:	8c 93       	st	X, r24
    1d84:	47 c0       	rjmp	.+142    	; 0x1e14 <DIO_voidSetPinValue+0x264>
			case PORTD: CLR_BIT(PORTD_REGISTER,Copy_u8PIN); break;
    1d86:	a2 e3       	ldi	r26, 0x32	; 50
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	e2 e3       	ldi	r30, 0x32	; 50
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	48 2f       	mov	r20, r24
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	02 2e       	mov	r0, r18
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <DIO_voidSetPinValue+0x1f4>
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	0a 94       	dec	r0
    1da6:	e2 f7       	brpl	.-8      	; 0x1da0 <DIO_voidSetPinValue+0x1f0>
    1da8:	80 95       	com	r24
    1daa:	84 23       	and	r24, r20
    1dac:	8c 93       	st	X, r24
    1dae:	32 c0       	rjmp	.+100    	; 0x1e14 <DIO_voidSetPinValue+0x264>
			}
			}
		else
		{
			switch(Copy_u8PORT)
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	3d 83       	std	Y+5, r19	; 0x05
    1db8:	2c 83       	std	Y+4, r18	; 0x04
    1dba:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	d1 f0       	breq	.+52     	; 0x1df8 <DIO_voidSetPinValue+0x248>
    1dc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc8:	22 30       	cpi	r18, 0x02	; 2
    1dca:	31 05       	cpc	r19, r1
    1dcc:	2c f4       	brge	.+10     	; 0x1dd8 <DIO_voidSetPinValue+0x228>
    1dce:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	61 f0       	breq	.+24     	; 0x1dee <DIO_voidSetPinValue+0x23e>
    1dd6:	1e c0       	rjmp	.+60     	; 0x1e14 <DIO_voidSetPinValue+0x264>
    1dd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1dda:	3d 81       	ldd	r19, Y+5	; 0x05
    1ddc:	22 30       	cpi	r18, 0x02	; 2
    1dde:	31 05       	cpc	r19, r1
    1de0:	81 f0       	breq	.+32     	; 0x1e02 <DIO_voidSetPinValue+0x252>
    1de2:	8c 81       	ldd	r24, Y+4	; 0x04
    1de4:	9d 81       	ldd	r25, Y+5	; 0x05
    1de6:	83 30       	cpi	r24, 0x03	; 3
    1de8:	91 05       	cpc	r25, r1
    1dea:	81 f0       	breq	.+32     	; 0x1e0c <DIO_voidSetPinValue+0x25c>
    1dec:	13 c0       	rjmp	.+38     	; 0x1e14 <DIO_voidSetPinValue+0x264>
			{
			case PORTA: PORTA_REGISTER = Copy_u8VALUE; break;
    1dee:	eb e3       	ldi	r30, 0x3B	; 59
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	80 83       	st	Z, r24
    1df6:	0e c0       	rjmp	.+28     	; 0x1e14 <DIO_voidSetPinValue+0x264>
			case PORTB: PORTB_REGISTER = Copy_u8VALUE; break;
    1df8:	e8 e3       	ldi	r30, 0x38	; 56
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	80 83       	st	Z, r24
    1e00:	09 c0       	rjmp	.+18     	; 0x1e14 <DIO_voidSetPinValue+0x264>
			case PORTC: PORTC_REGISTER = Copy_u8VALUE; break;
    1e02:	e5 e3       	ldi	r30, 0x35	; 53
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	80 83       	st	Z, r24
    1e0a:	04 c0       	rjmp	.+8      	; 0x1e14 <DIO_voidSetPinValue+0x264>
			case PORTD: PORTD_REGISTER = Copy_u8VALUE; break;
    1e0c:	e2 e3       	ldi	r30, 0x32	; 50
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	80 83       	st	Z, r24

			}
		}
	}
}
    1e14:	29 96       	adiw	r28, 0x09	; 9
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue       (u8 Copy_u8PORT ,  u8 Copy_u8VALUE)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <DIO_voidSetPortValue+0x6>
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <DIO_voidSetPortValue+0x8>
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	89 83       	std	Y+1, r24	; 0x01
    1e34:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PORT)
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	3c 83       	std	Y+4, r19	; 0x04
    1e3e:	2b 83       	std	Y+3, r18	; 0x03
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	91 05       	cpc	r25, r1
    1e48:	d1 f0       	breq	.+52     	; 0x1e7e <DIO_voidSetPortValue+0x58>
    1e4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4e:	22 30       	cpi	r18, 0x02	; 2
    1e50:	31 05       	cpc	r19, r1
    1e52:	2c f4       	brge	.+10     	; 0x1e5e <DIO_voidSetPortValue+0x38>
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	9c 81       	ldd	r25, Y+4	; 0x04
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	61 f0       	breq	.+24     	; 0x1e74 <DIO_voidSetPortValue+0x4e>
    1e5c:	1e c0       	rjmp	.+60     	; 0x1e9a <DIO_voidSetPortValue+0x74>
    1e5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e60:	3c 81       	ldd	r19, Y+4	; 0x04
    1e62:	22 30       	cpi	r18, 0x02	; 2
    1e64:	31 05       	cpc	r19, r1
    1e66:	81 f0       	breq	.+32     	; 0x1e88 <DIO_voidSetPortValue+0x62>
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6c:	83 30       	cpi	r24, 0x03	; 3
    1e6e:	91 05       	cpc	r25, r1
    1e70:	81 f0       	breq	.+32     	; 0x1e92 <DIO_voidSetPortValue+0x6c>
    1e72:	13 c0       	rjmp	.+38     	; 0x1e9a <DIO_voidSetPortValue+0x74>
	{
	case PORTA: PORTA_REGISTER  = Copy_u8VALUE; break;
    1e74:	eb e3       	ldi	r30, 0x3B	; 59
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	80 83       	st	Z, r24
    1e7c:	0e c0       	rjmp	.+28     	; 0x1e9a <DIO_voidSetPortValue+0x74>
	case PORTB: PORTB_REGISTER  = Copy_u8VALUE; break;
    1e7e:	e8 e3       	ldi	r30, 0x38	; 56
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	80 83       	st	Z, r24
    1e86:	09 c0       	rjmp	.+18     	; 0x1e9a <DIO_voidSetPortValue+0x74>
	case PORTC: PORTC_REGISTER  = Copy_u8VALUE; break;
    1e88:	e5 e3       	ldi	r30, 0x35	; 53
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	80 83       	st	Z, r24
    1e90:	04 c0       	rjmp	.+8      	; 0x1e9a <DIO_voidSetPortValue+0x74>
	case PORTD: PORTD_REGISTER  = Copy_u8VALUE; break;
    1e92:	e2 e3       	ldi	r30, 0x32	; 50
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	80 83       	st	Z, r24
	}
}
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <DIO_voidClearPinValue>:

void DIO_voidClearPinValue     (u8 Copy_u8PORT , u8 Copy_u8PIN)
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <DIO_voidClearPinValue+0x6>
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <DIO_voidClearPinValue+0x8>
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	6a 83       	std	Y+2, r22	; 0x02
	if ((Copy_u8PORT <= PORTD )&&(Copy_u8PIN <= PIN7))
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	84 30       	cpi	r24, 0x04	; 4
    1ebc:	08 f0       	brcs	.+2      	; 0x1ec0 <DIO_voidClearPinValue+0x18>
    1ebe:	77 c0       	rjmp	.+238    	; 0x1fae <DIO_voidClearPinValue+0x106>
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	88 30       	cpi	r24, 0x08	; 8
    1ec4:	08 f0       	brcs	.+2      	; 0x1ec8 <DIO_voidClearPinValue+0x20>
    1ec6:	73 c0       	rjmp	.+230    	; 0x1fae <DIO_voidClearPinValue+0x106>
	{
		switch(Copy_u8PORT)
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	3c 83       	std	Y+4, r19	; 0x04
    1ed0:	2b 83       	std	Y+3, r18	; 0x03
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed6:	81 30       	cpi	r24, 0x01	; 1
    1ed8:	91 05       	cpc	r25, r1
    1eda:	59 f1       	breq	.+86     	; 0x1f32 <DIO_voidClearPinValue+0x8a>
    1edc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ede:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee0:	22 30       	cpi	r18, 0x02	; 2
    1ee2:	31 05       	cpc	r19, r1
    1ee4:	2c f4       	brge	.+10     	; 0x1ef0 <DIO_voidClearPinValue+0x48>
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	69 f0       	breq	.+26     	; 0x1f08 <DIO_voidClearPinValue+0x60>
    1eee:	5f c0       	rjmp	.+190    	; 0x1fae <DIO_voidClearPinValue+0x106>
    1ef0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef4:	22 30       	cpi	r18, 0x02	; 2
    1ef6:	31 05       	cpc	r19, r1
    1ef8:	89 f1       	breq	.+98     	; 0x1f5c <DIO_voidClearPinValue+0xb4>
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	83 30       	cpi	r24, 0x03	; 3
    1f00:	91 05       	cpc	r25, r1
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <DIO_voidClearPinValue+0x5e>
    1f04:	40 c0       	rjmp	.+128    	; 0x1f86 <DIO_voidClearPinValue+0xde>
    1f06:	53 c0       	rjmp	.+166    	; 0x1fae <DIO_voidClearPinValue+0x106>
		{
		case PORTA: CLR_BIT(PORTA_REGISTER,Copy_u8PIN); break;
    1f08:	ab e3       	ldi	r26, 0x3B	; 59
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	eb e3       	ldi	r30, 0x3B	; 59
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	48 2f       	mov	r20, r24
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	02 2e       	mov	r0, r18
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <DIO_voidClearPinValue+0x7e>
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	0a 94       	dec	r0
    1f28:	e2 f7       	brpl	.-8      	; 0x1f22 <DIO_voidClearPinValue+0x7a>
    1f2a:	80 95       	com	r24
    1f2c:	84 23       	and	r24, r20
    1f2e:	8c 93       	st	X, r24
    1f30:	3e c0       	rjmp	.+124    	; 0x1fae <DIO_voidClearPinValue+0x106>
		case PORTB: CLR_BIT(PORTB_REGISTER,Copy_u8PIN); break;
    1f32:	a8 e3       	ldi	r26, 0x38	; 56
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e8 e3       	ldi	r30, 0x38	; 56
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	48 2f       	mov	r20, r24
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	02 2e       	mov	r0, r18
    1f4a:	02 c0       	rjmp	.+4      	; 0x1f50 <DIO_voidClearPinValue+0xa8>
    1f4c:	88 0f       	add	r24, r24
    1f4e:	99 1f       	adc	r25, r25
    1f50:	0a 94       	dec	r0
    1f52:	e2 f7       	brpl	.-8      	; 0x1f4c <DIO_voidClearPinValue+0xa4>
    1f54:	80 95       	com	r24
    1f56:	84 23       	and	r24, r20
    1f58:	8c 93       	st	X, r24
    1f5a:	29 c0       	rjmp	.+82     	; 0x1fae <DIO_voidClearPinValue+0x106>
		case PORTC: CLR_BIT(PORTC_REGISTER,Copy_u8PIN); break;
    1f5c:	a5 e3       	ldi	r26, 0x35	; 53
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e5 e3       	ldi	r30, 0x35	; 53
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	48 2f       	mov	r20, r24
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	02 2e       	mov	r0, r18
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <DIO_voidClearPinValue+0xd2>
    1f76:	88 0f       	add	r24, r24
    1f78:	99 1f       	adc	r25, r25
    1f7a:	0a 94       	dec	r0
    1f7c:	e2 f7       	brpl	.-8      	; 0x1f76 <DIO_voidClearPinValue+0xce>
    1f7e:	80 95       	com	r24
    1f80:	84 23       	and	r24, r20
    1f82:	8c 93       	st	X, r24
    1f84:	14 c0       	rjmp	.+40     	; 0x1fae <DIO_voidClearPinValue+0x106>
		case PORTD: CLR_BIT(PORTD_REGISTER,Copy_u8PIN); break;
    1f86:	a2 e3       	ldi	r26, 0x32	; 50
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e2 e3       	ldi	r30, 0x32	; 50
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	48 2f       	mov	r20, r24
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	02 2e       	mov	r0, r18
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <DIO_voidClearPinValue+0xfc>
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	0a 94       	dec	r0
    1fa6:	e2 f7       	brpl	.-8      	; 0x1fa0 <DIO_voidClearPinValue+0xf8>
    1fa8:	80 95       	com	r24
    1faa:	84 23       	and	r24, r20
    1fac:	8c 93       	st	X, r24
		}
	}

}
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	08 95       	ret

00001fbc <DIO_voidClearPortValue>:

void DIO_voidClearPortValue    (u8 Copy_u8PORT )
{
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <DIO_voidClearPortValue+0x6>
    1fc2:	0f 92       	push	r0
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
    1fc8:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PORT <= PORTD&&Copy_u8PORT >= PORTA )
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	84 30       	cpi	r24, 0x04	; 4
    1fce:	70 f5       	brcc	.+92     	; 0x202c <DIO_voidClearPortValue+0x70>
	{
		switch(Copy_u8PORT)
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	3b 83       	std	Y+3, r19	; 0x03
    1fd8:	2a 83       	std	Y+2, r18	; 0x02
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fde:	81 30       	cpi	r24, 0x01	; 1
    1fe0:	91 05       	cpc	r25, r1
    1fe2:	c9 f0       	breq	.+50     	; 0x2016 <DIO_voidClearPortValue+0x5a>
    1fe4:	2a 81       	ldd	r18, Y+2	; 0x02
    1fe6:	3b 81       	ldd	r19, Y+3	; 0x03
    1fe8:	22 30       	cpi	r18, 0x02	; 2
    1fea:	31 05       	cpc	r19, r1
    1fec:	2c f4       	brge	.+10     	; 0x1ff8 <DIO_voidClearPortValue+0x3c>
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	61 f0       	breq	.+24     	; 0x200e <DIO_voidClearPortValue+0x52>
    1ff6:	1a c0       	rjmp	.+52     	; 0x202c <DIO_voidClearPortValue+0x70>
    1ff8:	2a 81       	ldd	r18, Y+2	; 0x02
    1ffa:	3b 81       	ldd	r19, Y+3	; 0x03
    1ffc:	22 30       	cpi	r18, 0x02	; 2
    1ffe:	31 05       	cpc	r19, r1
    2000:	71 f0       	breq	.+28     	; 0x201e <DIO_voidClearPortValue+0x62>
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	9b 81       	ldd	r25, Y+3	; 0x03
    2006:	83 30       	cpi	r24, 0x03	; 3
    2008:	91 05       	cpc	r25, r1
    200a:	69 f0       	breq	.+26     	; 0x2026 <DIO_voidClearPortValue+0x6a>
    200c:	0f c0       	rjmp	.+30     	; 0x202c <DIO_voidClearPortValue+0x70>
		{
		case PORTA: PORTA_REGISTER  = PORT_LOW; break;
    200e:	eb e3       	ldi	r30, 0x3B	; 59
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	10 82       	st	Z, r1
    2014:	0b c0       	rjmp	.+22     	; 0x202c <DIO_voidClearPortValue+0x70>
		case PORTB: PORTB_REGISTER  = PORT_LOW; break;
    2016:	e8 e3       	ldi	r30, 0x38	; 56
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	10 82       	st	Z, r1
    201c:	07 c0       	rjmp	.+14     	; 0x202c <DIO_voidClearPortValue+0x70>
		case PORTC: PORTC_REGISTER  = PORT_LOW; break;
    201e:	e5 e3       	ldi	r30, 0x35	; 53
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	10 82       	st	Z, r1
    2024:	03 c0       	rjmp	.+6      	; 0x202c <DIO_voidClearPortValue+0x70>
		case PORTD: PORTD_REGISTER  = PORT_LOW; break;
    2026:	e2 e3       	ldi	r30, 0x32	; 50
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	10 82       	st	Z, r1
		}
	}
}
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	08 95       	ret

00002038 <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue    (u8 Copy_u8PORT , u8 Copy_u8PIN)
{
    2038:	df 93       	push	r29
    203a:	cf 93       	push	r28
    203c:	00 d0       	rcall	.+0      	; 0x203e <DIO_voidTogglePinValue+0x6>
    203e:	00 d0       	rcall	.+0      	; 0x2040 <DIO_voidTogglePinValue+0x8>
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	89 83       	std	Y+1, r24	; 0x01
    2046:	6a 83       	std	Y+2, r22	; 0x02
	if ((Copy_u8PORT <= PORTD )&&(Copy_u8PIN <= PIN7))
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	84 30       	cpi	r24, 0x04	; 4
    204c:	08 f0       	brcs	.+2      	; 0x2050 <DIO_voidTogglePinValue+0x18>
    204e:	72 c0       	rjmp	.+228    	; 0x2134 <DIO_voidTogglePinValue+0xfc>
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	88 30       	cpi	r24, 0x08	; 8
    2054:	08 f0       	brcs	.+2      	; 0x2058 <DIO_voidTogglePinValue+0x20>
    2056:	6e c0       	rjmp	.+220    	; 0x2134 <DIO_voidTogglePinValue+0xfc>
	{

		switch(Copy_u8PORT)
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	3c 83       	std	Y+4, r19	; 0x04
    2060:	2b 83       	std	Y+3, r18	; 0x03
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	9c 81       	ldd	r25, Y+4	; 0x04
    2066:	81 30       	cpi	r24, 0x01	; 1
    2068:	91 05       	cpc	r25, r1
    206a:	49 f1       	breq	.+82     	; 0x20be <DIO_voidTogglePinValue+0x86>
    206c:	2b 81       	ldd	r18, Y+3	; 0x03
    206e:	3c 81       	ldd	r19, Y+4	; 0x04
    2070:	22 30       	cpi	r18, 0x02	; 2
    2072:	31 05       	cpc	r19, r1
    2074:	2c f4       	brge	.+10     	; 0x2080 <DIO_voidTogglePinValue+0x48>
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	61 f0       	breq	.+24     	; 0x2096 <DIO_voidTogglePinValue+0x5e>
    207e:	5a c0       	rjmp	.+180    	; 0x2134 <DIO_voidTogglePinValue+0xfc>
    2080:	2b 81       	ldd	r18, Y+3	; 0x03
    2082:	3c 81       	ldd	r19, Y+4	; 0x04
    2084:	22 30       	cpi	r18, 0x02	; 2
    2086:	31 05       	cpc	r19, r1
    2088:	71 f1       	breq	.+92     	; 0x20e6 <DIO_voidTogglePinValue+0xae>
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	83 30       	cpi	r24, 0x03	; 3
    2090:	91 05       	cpc	r25, r1
    2092:	e9 f1       	breq	.+122    	; 0x210e <DIO_voidTogglePinValue+0xd6>
    2094:	4f c0       	rjmp	.+158    	; 0x2134 <DIO_voidTogglePinValue+0xfc>
		{
		case PORTA: TOGGLE_Bit(PORTA_REGISTER,Copy_u8PIN); break;
    2096:	ab e3       	ldi	r26, 0x3B	; 59
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	eb e3       	ldi	r30, 0x3B	; 59
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	48 2f       	mov	r20, r24
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
    20a4:	28 2f       	mov	r18, r24
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	02 2e       	mov	r0, r18
    20ae:	02 c0       	rjmp	.+4      	; 0x20b4 <DIO_voidTogglePinValue+0x7c>
    20b0:	88 0f       	add	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	0a 94       	dec	r0
    20b6:	e2 f7       	brpl	.-8      	; 0x20b0 <DIO_voidTogglePinValue+0x78>
    20b8:	84 27       	eor	r24, r20
    20ba:	8c 93       	st	X, r24
    20bc:	3b c0       	rjmp	.+118    	; 0x2134 <DIO_voidTogglePinValue+0xfc>
		case PORTB: TOGGLE_Bit(PORTB_REGISTER,Copy_u8PIN); break;
    20be:	a8 e3       	ldi	r26, 0x38	; 56
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	e8 e3       	ldi	r30, 0x38	; 56
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	48 2f       	mov	r20, r24
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	28 2f       	mov	r18, r24
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	02 2e       	mov	r0, r18
    20d6:	02 c0       	rjmp	.+4      	; 0x20dc <DIO_voidTogglePinValue+0xa4>
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	0a 94       	dec	r0
    20de:	e2 f7       	brpl	.-8      	; 0x20d8 <DIO_voidTogglePinValue+0xa0>
    20e0:	84 27       	eor	r24, r20
    20e2:	8c 93       	st	X, r24
    20e4:	27 c0       	rjmp	.+78     	; 0x2134 <DIO_voidTogglePinValue+0xfc>
		case PORTC: TOGGLE_Bit(PORTC_REGISTER,Copy_u8PIN); break;
    20e6:	a5 e3       	ldi	r26, 0x35	; 53
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e5 e3       	ldi	r30, 0x35	; 53
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	48 2f       	mov	r20, r24
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	02 2e       	mov	r0, r18
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <DIO_voidTogglePinValue+0xcc>
    2100:	88 0f       	add	r24, r24
    2102:	99 1f       	adc	r25, r25
    2104:	0a 94       	dec	r0
    2106:	e2 f7       	brpl	.-8      	; 0x2100 <DIO_voidTogglePinValue+0xc8>
    2108:	84 27       	eor	r24, r20
    210a:	8c 93       	st	X, r24
    210c:	13 c0       	rjmp	.+38     	; 0x2134 <DIO_voidTogglePinValue+0xfc>
		case PORTD: TOGGLE_Bit(PORTD_REGISTER,Copy_u8PIN); break;
    210e:	a2 e3       	ldi	r26, 0x32	; 50
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e2 e3       	ldi	r30, 0x32	; 50
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	48 2f       	mov	r20, r24
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	02 2e       	mov	r0, r18
    2126:	02 c0       	rjmp	.+4      	; 0x212c <DIO_voidTogglePinValue+0xf4>
    2128:	88 0f       	add	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	0a 94       	dec	r0
    212e:	e2 f7       	brpl	.-8      	; 0x2128 <DIO_voidTogglePinValue+0xf0>
    2130:	84 27       	eor	r24, r20
    2132:	8c 93       	st	X, r24

		}


}
}
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <DIO_voidTogglePortValue>:

void DIO_voidTogglePortValue    (u8 Copy_u8PORT )
{
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	00 d0       	rcall	.+0      	; 0x2148 <DIO_voidTogglePortValue+0x6>
    2148:	0f 92       	push	r0
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PORT <= PORTD )&&(Copy_u8PORT >= PORTA ))
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	84 30       	cpi	r24, 0x04	; 4
    2154:	08 f0       	brcs	.+2      	; 0x2158 <DIO_voidTogglePortValue+0x16>
    2156:	3e c0       	rjmp	.+124    	; 0x21d4 <DIO_voidTogglePortValue+0x92>
	{

		switch(Copy_u8PORT)
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	3b 83       	std	Y+3, r19	; 0x03
    2160:	2a 83       	std	Y+2, r18	; 0x02
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	9b 81       	ldd	r25, Y+3	; 0x03
    2166:	81 30       	cpi	r24, 0x01	; 1
    2168:	91 05       	cpc	r25, r1
    216a:	e9 f0       	breq	.+58     	; 0x21a6 <DIO_voidTogglePortValue+0x64>
    216c:	2a 81       	ldd	r18, Y+2	; 0x02
    216e:	3b 81       	ldd	r19, Y+3	; 0x03
    2170:	22 30       	cpi	r18, 0x02	; 2
    2172:	31 05       	cpc	r19, r1
    2174:	2c f4       	brge	.+10     	; 0x2180 <DIO_voidTogglePortValue+0x3e>
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	9b 81       	ldd	r25, Y+3	; 0x03
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	61 f0       	breq	.+24     	; 0x2196 <DIO_voidTogglePortValue+0x54>
    217e:	2a c0       	rjmp	.+84     	; 0x21d4 <DIO_voidTogglePortValue+0x92>
    2180:	2a 81       	ldd	r18, Y+2	; 0x02
    2182:	3b 81       	ldd	r19, Y+3	; 0x03
    2184:	22 30       	cpi	r18, 0x02	; 2
    2186:	31 05       	cpc	r19, r1
    2188:	b1 f0       	breq	.+44     	; 0x21b6 <DIO_voidTogglePortValue+0x74>
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	9b 81       	ldd	r25, Y+3	; 0x03
    218e:	83 30       	cpi	r24, 0x03	; 3
    2190:	91 05       	cpc	r25, r1
    2192:	c9 f0       	breq	.+50     	; 0x21c6 <DIO_voidTogglePortValue+0x84>
    2194:	1f c0       	rjmp	.+62     	; 0x21d4 <DIO_voidTogglePortValue+0x92>
		{
		case PORTA: TOGGLE_PORT(PORTA_REGISTER); break;
    2196:	ab e3       	ldi	r26, 0x3B	; 59
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	eb e3       	ldi	r30, 0x3B	; 59
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	80 95       	com	r24
    21a2:	8c 93       	st	X, r24
    21a4:	17 c0       	rjmp	.+46     	; 0x21d4 <DIO_voidTogglePortValue+0x92>
		case PORTB: TOGGLE_PORT(PORTB_REGISTER); break;
    21a6:	a8 e3       	ldi	r26, 0x38	; 56
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e8 e3       	ldi	r30, 0x38	; 56
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	80 95       	com	r24
    21b2:	8c 93       	st	X, r24
    21b4:	0f c0       	rjmp	.+30     	; 0x21d4 <DIO_voidTogglePortValue+0x92>
		case PORTC: TOGGLE_PORT(PORTC_REGISTER); break;
    21b6:	a5 e3       	ldi	r26, 0x35	; 53
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e5 e3       	ldi	r30, 0x35	; 53
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	80 95       	com	r24
    21c2:	8c 93       	st	X, r24
    21c4:	07 c0       	rjmp	.+14     	; 0x21d4 <DIO_voidTogglePortValue+0x92>
		case PORTD: TOGGLE_PORT(PORTD_REGISTER); break;
    21c6:	a2 e3       	ldi	r26, 0x32	; 50
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e2 e3       	ldi	r30, 0x32	; 50
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	80 95       	com	r24
    21d2:	8c 93       	st	X, r24

		}


}
}
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	08 95       	ret

000021e0 <DIO_u8GetPinValue>:

u8   DIO_u8GetPinValue         (u8 Copy_u8PORT , u8 Copy_u8PIN )
{
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	00 d0       	rcall	.+0      	; 0x21e6 <DIO_u8GetPinValue+0x6>
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <DIO_u8GetPinValue+0x8>
    21e8:	0f 92       	push	r0
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	8a 83       	std	Y+2, r24	; 0x02
    21f0:	6b 83       	std	Y+3, r22	; 0x03
u8 Local_u8Result;
if ((Copy_u8PORT <= PORTD )&&(Copy_u8PIN <= PIN7))
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	84 30       	cpi	r24, 0x04	; 4
    21f6:	08 f0       	brcs	.+2      	; 0x21fa <DIO_u8GetPinValue+0x1a>
    21f8:	6b c0       	rjmp	.+214    	; 0x22d0 <DIO_u8GetPinValue+0xf0>
    21fa:	8b 81       	ldd	r24, Y+3	; 0x03
    21fc:	88 30       	cpi	r24, 0x08	; 8
    21fe:	08 f0       	brcs	.+2      	; 0x2202 <DIO_u8GetPinValue+0x22>
    2200:	67 c0       	rjmp	.+206    	; 0x22d0 <DIO_u8GetPinValue+0xf0>
	{
		switch(Copy_u8PORT)
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	28 2f       	mov	r18, r24
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	3d 83       	std	Y+5, r19	; 0x05
    220a:	2c 83       	std	Y+4, r18	; 0x04
    220c:	4c 81       	ldd	r20, Y+4	; 0x04
    220e:	5d 81       	ldd	r21, Y+5	; 0x05
    2210:	41 30       	cpi	r20, 0x01	; 1
    2212:	51 05       	cpc	r21, r1
    2214:	41 f1       	breq	.+80     	; 0x2266 <DIO_u8GetPinValue+0x86>
    2216:	8c 81       	ldd	r24, Y+4	; 0x04
    2218:	9d 81       	ldd	r25, Y+5	; 0x05
    221a:	82 30       	cpi	r24, 0x02	; 2
    221c:	91 05       	cpc	r25, r1
    221e:	34 f4       	brge	.+12     	; 0x222c <DIO_u8GetPinValue+0x4c>
    2220:	2c 81       	ldd	r18, Y+4	; 0x04
    2222:	3d 81       	ldd	r19, Y+5	; 0x05
    2224:	21 15       	cp	r18, r1
    2226:	31 05       	cpc	r19, r1
    2228:	61 f0       	breq	.+24     	; 0x2242 <DIO_u8GetPinValue+0x62>
    222a:	52 c0       	rjmp	.+164    	; 0x22d0 <DIO_u8GetPinValue+0xf0>
    222c:	4c 81       	ldd	r20, Y+4	; 0x04
    222e:	5d 81       	ldd	r21, Y+5	; 0x05
    2230:	42 30       	cpi	r20, 0x02	; 2
    2232:	51 05       	cpc	r21, r1
    2234:	51 f1       	breq	.+84     	; 0x228a <DIO_u8GetPinValue+0xaa>
    2236:	8c 81       	ldd	r24, Y+4	; 0x04
    2238:	9d 81       	ldd	r25, Y+5	; 0x05
    223a:	83 30       	cpi	r24, 0x03	; 3
    223c:	91 05       	cpc	r25, r1
    223e:	b9 f1       	breq	.+110    	; 0x22ae <DIO_u8GetPinValue+0xce>
    2240:	47 c0       	rjmp	.+142    	; 0x22d0 <DIO_u8GetPinValue+0xf0>
		{
			case PORTA: Local_u8Result=GET_BIT(PINA_REGISTER,Copy_u8PIN); break;
    2242:	e9 e3       	ldi	r30, 0x39	; 57
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	88 2f       	mov	r24, r24
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	a9 01       	movw	r20, r18
    2254:	02 c0       	rjmp	.+4      	; 0x225a <DIO_u8GetPinValue+0x7a>
    2256:	55 95       	asr	r21
    2258:	47 95       	ror	r20
    225a:	8a 95       	dec	r24
    225c:	e2 f7       	brpl	.-8      	; 0x2256 <DIO_u8GetPinValue+0x76>
    225e:	ca 01       	movw	r24, r20
    2260:	81 70       	andi	r24, 0x01	; 1
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	35 c0       	rjmp	.+106    	; 0x22d0 <DIO_u8GetPinValue+0xf0>
			case PORTB: Local_u8Result=GET_BIT(PINB_REGISTER,Copy_u8PIN); break;
    2266:	e6 e3       	ldi	r30, 0x36	; 54
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	28 2f       	mov	r18, r24
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	88 2f       	mov	r24, r24
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	a9 01       	movw	r20, r18
    2278:	02 c0       	rjmp	.+4      	; 0x227e <DIO_u8GetPinValue+0x9e>
    227a:	55 95       	asr	r21
    227c:	47 95       	ror	r20
    227e:	8a 95       	dec	r24
    2280:	e2 f7       	brpl	.-8      	; 0x227a <DIO_u8GetPinValue+0x9a>
    2282:	ca 01       	movw	r24, r20
    2284:	81 70       	andi	r24, 0x01	; 1
    2286:	89 83       	std	Y+1, r24	; 0x01
    2288:	23 c0       	rjmp	.+70     	; 0x22d0 <DIO_u8GetPinValue+0xf0>
			case PORTC: Local_u8Result=GET_BIT(PINC_REGISTER,Copy_u8PIN); break;
    228a:	e3 e3       	ldi	r30, 0x33	; 51
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	88 2f       	mov	r24, r24
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	a9 01       	movw	r20, r18
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <DIO_u8GetPinValue+0xc2>
    229e:	55 95       	asr	r21
    22a0:	47 95       	ror	r20
    22a2:	8a 95       	dec	r24
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <DIO_u8GetPinValue+0xbe>
    22a6:	ca 01       	movw	r24, r20
    22a8:	81 70       	andi	r24, 0x01	; 1
    22aa:	89 83       	std	Y+1, r24	; 0x01
    22ac:	11 c0       	rjmp	.+34     	; 0x22d0 <DIO_u8GetPinValue+0xf0>
			case PORTD: Local_u8Result=GET_BIT(PIND_REGISTER,Copy_u8PIN); break;
    22ae:	e0 e3       	ldi	r30, 0x30	; 48
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	28 2f       	mov	r18, r24
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	88 2f       	mov	r24, r24
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	a9 01       	movw	r20, r18
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <DIO_u8GetPinValue+0xe6>
    22c2:	55 95       	asr	r21
    22c4:	47 95       	ror	r20
    22c6:	8a 95       	dec	r24
    22c8:	e2 f7       	brpl	.-8      	; 0x22c2 <DIO_u8GetPinValue+0xe2>
    22ca:	ca 01       	movw	r24, r20
    22cc:	81 70       	andi	r24, 0x01	; 1
    22ce:	89 83       	std	Y+1, r24	; 0x01
		}


	}

return Local_u8Result;
    22d0:	89 81       	ldd	r24, Y+1	; 0x01

}
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	08 95       	ret

000022e2 <DIO_u8GetPortValue>:

u8   DIO_u8GetPortValue        (u8 Copy_u8PORT )
{
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <DIO_u8GetPortValue+0x6>
    22e8:	00 d0       	rcall	.+0      	; 0x22ea <DIO_u8GetPortValue+0x8>
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Result;
	if ((Copy_u8PORT <= PORTD)&&(Copy_u8PORT >= PORTA) )
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	84 30       	cpi	r24, 0x04	; 4
    22f4:	90 f5       	brcc	.+100    	; 0x235a <DIO_u8GetPortValue+0x78>
		{
			switch(Copy_u8PORT)
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	3c 83       	std	Y+4, r19	; 0x04
    22fe:	2b 83       	std	Y+3, r18	; 0x03
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	9c 81       	ldd	r25, Y+4	; 0x04
    2304:	81 30       	cpi	r24, 0x01	; 1
    2306:	91 05       	cpc	r25, r1
    2308:	d1 f0       	breq	.+52     	; 0x233e <DIO_u8GetPortValue+0x5c>
    230a:	2b 81       	ldd	r18, Y+3	; 0x03
    230c:	3c 81       	ldd	r19, Y+4	; 0x04
    230e:	22 30       	cpi	r18, 0x02	; 2
    2310:	31 05       	cpc	r19, r1
    2312:	2c f4       	brge	.+10     	; 0x231e <DIO_u8GetPortValue+0x3c>
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	9c 81       	ldd	r25, Y+4	; 0x04
    2318:	00 97       	sbiw	r24, 0x00	; 0
    231a:	61 f0       	breq	.+24     	; 0x2334 <DIO_u8GetPortValue+0x52>
    231c:	1e c0       	rjmp	.+60     	; 0x235a <DIO_u8GetPortValue+0x78>
    231e:	2b 81       	ldd	r18, Y+3	; 0x03
    2320:	3c 81       	ldd	r19, Y+4	; 0x04
    2322:	22 30       	cpi	r18, 0x02	; 2
    2324:	31 05       	cpc	r19, r1
    2326:	81 f0       	breq	.+32     	; 0x2348 <DIO_u8GetPortValue+0x66>
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	9c 81       	ldd	r25, Y+4	; 0x04
    232c:	83 30       	cpi	r24, 0x03	; 3
    232e:	91 05       	cpc	r25, r1
    2330:	81 f0       	breq	.+32     	; 0x2352 <DIO_u8GetPortValue+0x70>
    2332:	13 c0       	rjmp	.+38     	; 0x235a <DIO_u8GetPortValue+0x78>
			{
				case PORTA: Local_u8Result=PINA_REGISTER; break;
    2334:	e9 e3       	ldi	r30, 0x39	; 57
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	89 83       	std	Y+1, r24	; 0x01
    233c:	0e c0       	rjmp	.+28     	; 0x235a <DIO_u8GetPortValue+0x78>
				case PORTB: Local_u8Result=PINB_REGISTER; break;
    233e:	e6 e3       	ldi	r30, 0x36	; 54
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	09 c0       	rjmp	.+18     	; 0x235a <DIO_u8GetPortValue+0x78>
				case PORTC: Local_u8Result=PINC_REGISTER; break;
    2348:	e3 e3       	ldi	r30, 0x33	; 51
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	89 83       	std	Y+1, r24	; 0x01
    2350:	04 c0       	rjmp	.+8      	; 0x235a <DIO_u8GetPortValue+0x78>
				case PORTD: Local_u8Result=PIND_REGISTER; break;
    2352:	e0 e3       	ldi	r30, 0x30	; 48
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	89 83       	std	Y+1, r24	; 0x01
			}
		}

	return Local_u8Result;
    235a:	89 81       	ldd	r24, Y+1	; 0x01
}
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <STEPPER_voidInit>:
#include "STEPPER_Interface.h"
#include "STEPPER_Config.h"
#include <util/delay.h>

void STEPPER_voidInit(void)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
	//SET PINS OF STEPPER OUTPUT
	DIO_voidSetPinDirection(STEPPER_PORT,Coil_Blue,OUTPUT);
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	41 e0       	ldi	r20, 0x01	; 1
    2378:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_PORT,Coil_Pink,OUTPUT);
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	61 e0       	ldi	r22, 0x01	; 1
    2380:	41 e0       	ldi	r20, 0x01	; 1
    2382:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_PORT,Coil_Yellow,OUTPUT);
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	62 e0       	ldi	r22, 0x02	; 2
    238a:	41 e0       	ldi	r20, 0x01	; 1
    238c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(STEPPER_PORT,Coil_Orange,OUTPUT);
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	63 e0       	ldi	r22, 0x03	; 3
    2394:	41 e0       	ldi	r20, 0x01	; 1
    2396:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>

	//SET PINS OF STEPPER HIGH
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,HIGH);
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	41 e0       	ldi	r20, 0x01	; 1
    23a0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,HIGH);
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	61 e0       	ldi	r22, 0x01	; 1
    23a8:	41 e0       	ldi	r20, 0x01	; 1
    23aa:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,HIGH);
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	62 e0       	ldi	r22, 0x02	; 2
    23b2:	41 e0       	ldi	r20, 0x01	; 1
    23b4:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,HIGH);
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	63 e0       	ldi	r22, 0x03	; 3
    23bc:	41 e0       	ldi	r20, 0x01	; 1
    23be:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>

}
    23c2:	cf 91       	pop	r28
    23c4:	df 91       	pop	r29
    23c6:	08 95       	ret

000023c8 <Stepper_voidRotateCW>:

void Stepper_voidRotateCW(void)
{
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	e8 97       	sbiw	r28, 0x38	; 56
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,LOW);
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	60 e0       	ldi	r22, 0x00	; 0
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,HIGH);
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	61 e0       	ldi	r22, 0x01	; 1
    23ea:	41 e0       	ldi	r20, 0x01	; 1
    23ec:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,HIGH);
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	62 e0       	ldi	r22, 0x02	; 2
    23f4:	41 e0       	ldi	r20, 0x01	; 1
    23f6:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,HIGH);
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	63 e0       	ldi	r22, 0x03	; 3
    23fe:	41 e0       	ldi	r20, 0x01	; 1
    2400:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	a0 e0       	ldi	r26, 0x00	; 0
    240a:	b0 e4       	ldi	r27, 0x40	; 64
    240c:	8d ab       	std	Y+53, r24	; 0x35
    240e:	9e ab       	std	Y+54, r25	; 0x36
    2410:	af ab       	std	Y+55, r26	; 0x37
    2412:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2414:	6d a9       	ldd	r22, Y+53	; 0x35
    2416:	7e a9       	ldd	r23, Y+54	; 0x36
    2418:	8f a9       	ldd	r24, Y+55	; 0x37
    241a:	98 ad       	ldd	r25, Y+56	; 0x38
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	4a ef       	ldi	r20, 0xFA	; 250
    2422:	54 e4       	ldi	r21, 0x44	; 68
    2424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	89 ab       	std	Y+49, r24	; 0x31
    242e:	9a ab       	std	Y+50, r25	; 0x32
    2430:	ab ab       	std	Y+51, r26	; 0x33
    2432:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2434:	69 a9       	ldd	r22, Y+49	; 0x31
    2436:	7a a9       	ldd	r23, Y+50	; 0x32
    2438:	8b a9       	ldd	r24, Y+51	; 0x33
    243a:	9c a9       	ldd	r25, Y+52	; 0x34
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e8       	ldi	r20, 0x80	; 128
    2442:	5f e3       	ldi	r21, 0x3F	; 63
    2444:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2448:	88 23       	and	r24, r24
    244a:	2c f4       	brge	.+10     	; 0x2456 <Stepper_voidRotateCW+0x8e>
		__ticks = 1;
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	98 ab       	std	Y+48, r25	; 0x30
    2452:	8f a7       	std	Y+47, r24	; 0x2f
    2454:	3f c0       	rjmp	.+126    	; 0x24d4 <Stepper_voidRotateCW+0x10c>
	else if (__tmp > 65535)
    2456:	69 a9       	ldd	r22, Y+49	; 0x31
    2458:	7a a9       	ldd	r23, Y+50	; 0x32
    245a:	8b a9       	ldd	r24, Y+51	; 0x33
    245c:	9c a9       	ldd	r25, Y+52	; 0x34
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	3f ef       	ldi	r19, 0xFF	; 255
    2462:	4f e7       	ldi	r20, 0x7F	; 127
    2464:	57 e4       	ldi	r21, 0x47	; 71
    2466:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    246a:	18 16       	cp	r1, r24
    246c:	4c f5       	brge	.+82     	; 0x24c0 <Stepper_voidRotateCW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246e:	6d a9       	ldd	r22, Y+53	; 0x35
    2470:	7e a9       	ldd	r23, Y+54	; 0x36
    2472:	8f a9       	ldd	r24, Y+55	; 0x37
    2474:	98 ad       	ldd	r25, Y+56	; 0x38
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 e2       	ldi	r20, 0x20	; 32
    247c:	51 e4       	ldi	r21, 0x41	; 65
    247e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	bc 01       	movw	r22, r24
    2488:	cd 01       	movw	r24, r26
    248a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	98 ab       	std	Y+48, r25	; 0x30
    2494:	8f a7       	std	Y+47, r24	; 0x2f
    2496:	0f c0       	rjmp	.+30     	; 0x24b6 <Stepper_voidRotateCW+0xee>
    2498:	88 ec       	ldi	r24, 0xC8	; 200
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9e a7       	std	Y+46, r25	; 0x2e
    249e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    24a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <Stepper_voidRotateCW+0xdc>
    24a8:	9e a7       	std	Y+46, r25	; 0x2e
    24aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ae:	98 a9       	ldd	r25, Y+48	; 0x30
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	98 ab       	std	Y+48, r25	; 0x30
    24b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24b8:	98 a9       	ldd	r25, Y+48	; 0x30
    24ba:	00 97       	sbiw	r24, 0x00	; 0
    24bc:	69 f7       	brne	.-38     	; 0x2498 <Stepper_voidRotateCW+0xd0>
    24be:	14 c0       	rjmp	.+40     	; 0x24e8 <Stepper_voidRotateCW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c0:	69 a9       	ldd	r22, Y+49	; 0x31
    24c2:	7a a9       	ldd	r23, Y+50	; 0x32
    24c4:	8b a9       	ldd	r24, Y+51	; 0x33
    24c6:	9c a9       	ldd	r25, Y+52	; 0x34
    24c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	98 ab       	std	Y+48, r25	; 0x30
    24d2:	8f a7       	std	Y+47, r24	; 0x2f
    24d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d6:	98 a9       	ldd	r25, Y+48	; 0x30
    24d8:	9c a7       	std	Y+44, r25	; 0x2c
    24da:	8b a7       	std	Y+43, r24	; 0x2b
    24dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    24de:	9c a5       	ldd	r25, Y+44	; 0x2c
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <Stepper_voidRotateCW+0x118>
    24e4:	9c a7       	std	Y+44, r25	; 0x2c
    24e6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,HIGH);
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	41 e0       	ldi	r20, 0x01	; 1
    24ee:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,LOW);
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	61 e0       	ldi	r22, 0x01	; 1
    24f6:	40 e0       	ldi	r20, 0x00	; 0
    24f8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,HIGH);
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	62 e0       	ldi	r22, 0x02	; 2
    2500:	41 e0       	ldi	r20, 0x01	; 1
    2502:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,HIGH);
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	63 e0       	ldi	r22, 0x03	; 3
    250a:	41 e0       	ldi	r20, 0x01	; 1
    250c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	a0 e0       	ldi	r26, 0x00	; 0
    2516:	b0 e4       	ldi	r27, 0x40	; 64
    2518:	8f a3       	std	Y+39, r24	; 0x27
    251a:	98 a7       	std	Y+40, r25	; 0x28
    251c:	a9 a7       	std	Y+41, r26	; 0x29
    251e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2520:	6f a1       	ldd	r22, Y+39	; 0x27
    2522:	78 a5       	ldd	r23, Y+40	; 0x28
    2524:	89 a5       	ldd	r24, Y+41	; 0x29
    2526:	9a a5       	ldd	r25, Y+42	; 0x2a
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	4a ef       	ldi	r20, 0xFA	; 250
    252e:	54 e4       	ldi	r21, 0x44	; 68
    2530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	8b a3       	std	Y+35, r24	; 0x23
    253a:	9c a3       	std	Y+36, r25	; 0x24
    253c:	ad a3       	std	Y+37, r26	; 0x25
    253e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2540:	6b a1       	ldd	r22, Y+35	; 0x23
    2542:	7c a1       	ldd	r23, Y+36	; 0x24
    2544:	8d a1       	ldd	r24, Y+37	; 0x25
    2546:	9e a1       	ldd	r25, Y+38	; 0x26
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e8       	ldi	r20, 0x80	; 128
    254e:	5f e3       	ldi	r21, 0x3F	; 63
    2550:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2554:	88 23       	and	r24, r24
    2556:	2c f4       	brge	.+10     	; 0x2562 <Stepper_voidRotateCW+0x19a>
		__ticks = 1;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	9a a3       	std	Y+34, r25	; 0x22
    255e:	89 a3       	std	Y+33, r24	; 0x21
    2560:	3f c0       	rjmp	.+126    	; 0x25e0 <Stepper_voidRotateCW+0x218>
	else if (__tmp > 65535)
    2562:	6b a1       	ldd	r22, Y+35	; 0x23
    2564:	7c a1       	ldd	r23, Y+36	; 0x24
    2566:	8d a1       	ldd	r24, Y+37	; 0x25
    2568:	9e a1       	ldd	r25, Y+38	; 0x26
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	3f ef       	ldi	r19, 0xFF	; 255
    256e:	4f e7       	ldi	r20, 0x7F	; 127
    2570:	57 e4       	ldi	r21, 0x47	; 71
    2572:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2576:	18 16       	cp	r1, r24
    2578:	4c f5       	brge	.+82     	; 0x25cc <Stepper_voidRotateCW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257a:	6f a1       	ldd	r22, Y+39	; 0x27
    257c:	78 a5       	ldd	r23, Y+40	; 0x28
    257e:	89 a5       	ldd	r24, Y+41	; 0x29
    2580:	9a a5       	ldd	r25, Y+42	; 0x2a
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e2       	ldi	r20, 0x20	; 32
    2588:	51 e4       	ldi	r21, 0x41	; 65
    258a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	bc 01       	movw	r22, r24
    2594:	cd 01       	movw	r24, r26
    2596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	9a a3       	std	Y+34, r25	; 0x22
    25a0:	89 a3       	std	Y+33, r24	; 0x21
    25a2:	0f c0       	rjmp	.+30     	; 0x25c2 <Stepper_voidRotateCW+0x1fa>
    25a4:	88 ec       	ldi	r24, 0xC8	; 200
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	98 a3       	std	Y+32, r25	; 0x20
    25aa:	8f 8f       	std	Y+31, r24	; 0x1f
    25ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25ae:	98 a1       	ldd	r25, Y+32	; 0x20
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	f1 f7       	brne	.-4      	; 0x25b0 <Stepper_voidRotateCW+0x1e8>
    25b4:	98 a3       	std	Y+32, r25	; 0x20
    25b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b8:	89 a1       	ldd	r24, Y+33	; 0x21
    25ba:	9a a1       	ldd	r25, Y+34	; 0x22
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	9a a3       	std	Y+34, r25	; 0x22
    25c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c2:	89 a1       	ldd	r24, Y+33	; 0x21
    25c4:	9a a1       	ldd	r25, Y+34	; 0x22
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	69 f7       	brne	.-38     	; 0x25a4 <Stepper_voidRotateCW+0x1dc>
    25ca:	14 c0       	rjmp	.+40     	; 0x25f4 <Stepper_voidRotateCW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25cc:	6b a1       	ldd	r22, Y+35	; 0x23
    25ce:	7c a1       	ldd	r23, Y+36	; 0x24
    25d0:	8d a1       	ldd	r24, Y+37	; 0x25
    25d2:	9e a1       	ldd	r25, Y+38	; 0x26
    25d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	9a a3       	std	Y+34, r25	; 0x22
    25de:	89 a3       	std	Y+33, r24	; 0x21
    25e0:	89 a1       	ldd	r24, Y+33	; 0x21
    25e2:	9a a1       	ldd	r25, Y+34	; 0x22
    25e4:	9e 8f       	std	Y+30, r25	; 0x1e
    25e6:	8d 8f       	std	Y+29, r24	; 0x1d
    25e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <Stepper_voidRotateCW+0x224>
    25f0:	9e 8f       	std	Y+30, r25	; 0x1e
    25f2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,HIGH);
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	41 e0       	ldi	r20, 0x01	; 1
    25fa:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,HIGH);
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	61 e0       	ldi	r22, 0x01	; 1
    2602:	41 e0       	ldi	r20, 0x01	; 1
    2604:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,LOW);
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	62 e0       	ldi	r22, 0x02	; 2
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,HIGH);
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	63 e0       	ldi	r22, 0x03	; 3
    2616:	41 e0       	ldi	r20, 0x01	; 1
    2618:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	a0 e0       	ldi	r26, 0x00	; 0
    2622:	b0 e4       	ldi	r27, 0x40	; 64
    2624:	89 8f       	std	Y+25, r24	; 0x19
    2626:	9a 8f       	std	Y+26, r25	; 0x1a
    2628:	ab 8f       	std	Y+27, r26	; 0x1b
    262a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262c:	69 8d       	ldd	r22, Y+25	; 0x19
    262e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2630:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2632:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	4a ef       	ldi	r20, 0xFA	; 250
    263a:	54 e4       	ldi	r21, 0x44	; 68
    263c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	8d 8b       	std	Y+21, r24	; 0x15
    2646:	9e 8b       	std	Y+22, r25	; 0x16
    2648:	af 8b       	std	Y+23, r26	; 0x17
    264a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    264c:	6d 89       	ldd	r22, Y+21	; 0x15
    264e:	7e 89       	ldd	r23, Y+22	; 0x16
    2650:	8f 89       	ldd	r24, Y+23	; 0x17
    2652:	98 8d       	ldd	r25, Y+24	; 0x18
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e8       	ldi	r20, 0x80	; 128
    265a:	5f e3       	ldi	r21, 0x3F	; 63
    265c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2660:	88 23       	and	r24, r24
    2662:	2c f4       	brge	.+10     	; 0x266e <Stepper_voidRotateCW+0x2a6>
		__ticks = 1;
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	9c 8b       	std	Y+20, r25	; 0x14
    266a:	8b 8b       	std	Y+19, r24	; 0x13
    266c:	3f c0       	rjmp	.+126    	; 0x26ec <Stepper_voidRotateCW+0x324>
	else if (__tmp > 65535)
    266e:	6d 89       	ldd	r22, Y+21	; 0x15
    2670:	7e 89       	ldd	r23, Y+22	; 0x16
    2672:	8f 89       	ldd	r24, Y+23	; 0x17
    2674:	98 8d       	ldd	r25, Y+24	; 0x18
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	3f ef       	ldi	r19, 0xFF	; 255
    267a:	4f e7       	ldi	r20, 0x7F	; 127
    267c:	57 e4       	ldi	r21, 0x47	; 71
    267e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2682:	18 16       	cp	r1, r24
    2684:	4c f5       	brge	.+82     	; 0x26d8 <Stepper_voidRotateCW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2686:	69 8d       	ldd	r22, Y+25	; 0x19
    2688:	7a 8d       	ldd	r23, Y+26	; 0x1a
    268a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    268c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e2       	ldi	r20, 0x20	; 32
    2694:	51 e4       	ldi	r21, 0x41	; 65
    2696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	bc 01       	movw	r22, r24
    26a0:	cd 01       	movw	r24, r26
    26a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	9c 8b       	std	Y+20, r25	; 0x14
    26ac:	8b 8b       	std	Y+19, r24	; 0x13
    26ae:	0f c0       	rjmp	.+30     	; 0x26ce <Stepper_voidRotateCW+0x306>
    26b0:	88 ec       	ldi	r24, 0xC8	; 200
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	9a 8b       	std	Y+18, r25	; 0x12
    26b6:	89 8b       	std	Y+17, r24	; 0x11
    26b8:	89 89       	ldd	r24, Y+17	; 0x11
    26ba:	9a 89       	ldd	r25, Y+18	; 0x12
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	f1 f7       	brne	.-4      	; 0x26bc <Stepper_voidRotateCW+0x2f4>
    26c0:	9a 8b       	std	Y+18, r25	; 0x12
    26c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c4:	8b 89       	ldd	r24, Y+19	; 0x13
    26c6:	9c 89       	ldd	r25, Y+20	; 0x14
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	9c 8b       	std	Y+20, r25	; 0x14
    26cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ce:	8b 89       	ldd	r24, Y+19	; 0x13
    26d0:	9c 89       	ldd	r25, Y+20	; 0x14
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	69 f7       	brne	.-38     	; 0x26b0 <Stepper_voidRotateCW+0x2e8>
    26d6:	14 c0       	rjmp	.+40     	; 0x2700 <Stepper_voidRotateCW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d8:	6d 89       	ldd	r22, Y+21	; 0x15
    26da:	7e 89       	ldd	r23, Y+22	; 0x16
    26dc:	8f 89       	ldd	r24, Y+23	; 0x17
    26de:	98 8d       	ldd	r25, Y+24	; 0x18
    26e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	9c 8b       	std	Y+20, r25	; 0x14
    26ea:	8b 8b       	std	Y+19, r24	; 0x13
    26ec:	8b 89       	ldd	r24, Y+19	; 0x13
    26ee:	9c 89       	ldd	r25, Y+20	; 0x14
    26f0:	98 8b       	std	Y+16, r25	; 0x10
    26f2:	8f 87       	std	Y+15, r24	; 0x0f
    26f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f6:	98 89       	ldd	r25, Y+16	; 0x10
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	f1 f7       	brne	.-4      	; 0x26f8 <Stepper_voidRotateCW+0x330>
    26fc:	98 8b       	std	Y+16, r25	; 0x10
    26fe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,HIGH);
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	60 e0       	ldi	r22, 0x00	; 0
    2704:	41 e0       	ldi	r20, 0x01	; 1
    2706:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,HIGH);
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	61 e0       	ldi	r22, 0x01	; 1
    270e:	41 e0       	ldi	r20, 0x01	; 1
    2710:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,HIGH);
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	62 e0       	ldi	r22, 0x02	; 2
    2718:	41 e0       	ldi	r20, 0x01	; 1
    271a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,LOW);
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	63 e0       	ldi	r22, 0x03	; 3
    2722:	40 e0       	ldi	r20, 0x00	; 0
    2724:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	a0 e0       	ldi	r26, 0x00	; 0
    272e:	b0 e4       	ldi	r27, 0x40	; 64
    2730:	8b 87       	std	Y+11, r24	; 0x0b
    2732:	9c 87       	std	Y+12, r25	; 0x0c
    2734:	ad 87       	std	Y+13, r26	; 0x0d
    2736:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2738:	6b 85       	ldd	r22, Y+11	; 0x0b
    273a:	7c 85       	ldd	r23, Y+12	; 0x0c
    273c:	8d 85       	ldd	r24, Y+13	; 0x0d
    273e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	4a ef       	ldi	r20, 0xFA	; 250
    2746:	54 e4       	ldi	r21, 0x44	; 68
    2748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	8f 83       	std	Y+7, r24	; 0x07
    2752:	98 87       	std	Y+8, r25	; 0x08
    2754:	a9 87       	std	Y+9, r26	; 0x09
    2756:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2758:	6f 81       	ldd	r22, Y+7	; 0x07
    275a:	78 85       	ldd	r23, Y+8	; 0x08
    275c:	89 85       	ldd	r24, Y+9	; 0x09
    275e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e8       	ldi	r20, 0x80	; 128
    2766:	5f e3       	ldi	r21, 0x3F	; 63
    2768:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    276c:	88 23       	and	r24, r24
    276e:	2c f4       	brge	.+10     	; 0x277a <Stepper_voidRotateCW+0x3b2>
		__ticks = 1;
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	9e 83       	std	Y+6, r25	; 0x06
    2776:	8d 83       	std	Y+5, r24	; 0x05
    2778:	3f c0       	rjmp	.+126    	; 0x27f8 <Stepper_voidRotateCW+0x430>
	else if (__tmp > 65535)
    277a:	6f 81       	ldd	r22, Y+7	; 0x07
    277c:	78 85       	ldd	r23, Y+8	; 0x08
    277e:	89 85       	ldd	r24, Y+9	; 0x09
    2780:	9a 85       	ldd	r25, Y+10	; 0x0a
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	3f ef       	ldi	r19, 0xFF	; 255
    2786:	4f e7       	ldi	r20, 0x7F	; 127
    2788:	57 e4       	ldi	r21, 0x47	; 71
    278a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    278e:	18 16       	cp	r1, r24
    2790:	4c f5       	brge	.+82     	; 0x27e4 <Stepper_voidRotateCW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2792:	6b 85       	ldd	r22, Y+11	; 0x0b
    2794:	7c 85       	ldd	r23, Y+12	; 0x0c
    2796:	8d 85       	ldd	r24, Y+13	; 0x0d
    2798:	9e 85       	ldd	r25, Y+14	; 0x0e
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e2       	ldi	r20, 0x20	; 32
    27a0:	51 e4       	ldi	r21, 0x41	; 65
    27a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	bc 01       	movw	r22, r24
    27ac:	cd 01       	movw	r24, r26
    27ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	9e 83       	std	Y+6, r25	; 0x06
    27b8:	8d 83       	std	Y+5, r24	; 0x05
    27ba:	0f c0       	rjmp	.+30     	; 0x27da <Stepper_voidRotateCW+0x412>
    27bc:	88 ec       	ldi	r24, 0xC8	; 200
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	9c 83       	std	Y+4, r25	; 0x04
    27c2:	8b 83       	std	Y+3, r24	; 0x03
    27c4:	8b 81       	ldd	r24, Y+3	; 0x03
    27c6:	9c 81       	ldd	r25, Y+4	; 0x04
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	f1 f7       	brne	.-4      	; 0x27c8 <Stepper_voidRotateCW+0x400>
    27cc:	9c 83       	std	Y+4, r25	; 0x04
    27ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d0:	8d 81       	ldd	r24, Y+5	; 0x05
    27d2:	9e 81       	ldd	r25, Y+6	; 0x06
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	9e 83       	std	Y+6, r25	; 0x06
    27d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27da:	8d 81       	ldd	r24, Y+5	; 0x05
    27dc:	9e 81       	ldd	r25, Y+6	; 0x06
    27de:	00 97       	sbiw	r24, 0x00	; 0
    27e0:	69 f7       	brne	.-38     	; 0x27bc <Stepper_voidRotateCW+0x3f4>
    27e2:	14 c0       	rjmp	.+40     	; 0x280c <Stepper_voidRotateCW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e4:	6f 81       	ldd	r22, Y+7	; 0x07
    27e6:	78 85       	ldd	r23, Y+8	; 0x08
    27e8:	89 85       	ldd	r24, Y+9	; 0x09
    27ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	9e 83       	std	Y+6, r25	; 0x06
    27f6:	8d 83       	std	Y+5, r24	; 0x05
    27f8:	8d 81       	ldd	r24, Y+5	; 0x05
    27fa:	9e 81       	ldd	r25, Y+6	; 0x06
    27fc:	9a 83       	std	Y+2, r25	; 0x02
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	9a 81       	ldd	r25, Y+2	; 0x02
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	f1 f7       	brne	.-4      	; 0x2804 <Stepper_voidRotateCW+0x43c>
    2808:	9a 83       	std	Y+2, r25	; 0x02
    280a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    280c:	e8 96       	adiw	r28, 0x38	; 56
    280e:	0f b6       	in	r0, 0x3f	; 63
    2810:	f8 94       	cli
    2812:	de bf       	out	0x3e, r29	; 62
    2814:	0f be       	out	0x3f, r0	; 63
    2816:	cd bf       	out	0x3d, r28	; 61
    2818:	cf 91       	pop	r28
    281a:	df 91       	pop	r29
    281c:	08 95       	ret

0000281e <Stepper_voidRotateACW>:

void Stepper_voidRotateACW(void)
{
    281e:	df 93       	push	r29
    2820:	cf 93       	push	r28
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	e8 97       	sbiw	r28, 0x38	; 56
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,LOW);
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	60 e0       	ldi	r22, 0x00	; 0
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,HIGH);
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	61 e0       	ldi	r22, 0x01	; 1
    2840:	41 e0       	ldi	r20, 0x01	; 1
    2842:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,HIGH);
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	62 e0       	ldi	r22, 0x02	; 2
    284a:	41 e0       	ldi	r20, 0x01	; 1
    284c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,HIGH);
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	63 e0       	ldi	r22, 0x03	; 3
    2854:	41 e0       	ldi	r20, 0x01	; 1
    2856:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	a0 e0       	ldi	r26, 0x00	; 0
    2860:	b0 e4       	ldi	r27, 0x40	; 64
    2862:	8d ab       	std	Y+53, r24	; 0x35
    2864:	9e ab       	std	Y+54, r25	; 0x36
    2866:	af ab       	std	Y+55, r26	; 0x37
    2868:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    286a:	6d a9       	ldd	r22, Y+53	; 0x35
    286c:	7e a9       	ldd	r23, Y+54	; 0x36
    286e:	8f a9       	ldd	r24, Y+55	; 0x37
    2870:	98 ad       	ldd	r25, Y+56	; 0x38
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	4a ef       	ldi	r20, 0xFA	; 250
    2878:	54 e4       	ldi	r21, 0x44	; 68
    287a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	89 ab       	std	Y+49, r24	; 0x31
    2884:	9a ab       	std	Y+50, r25	; 0x32
    2886:	ab ab       	std	Y+51, r26	; 0x33
    2888:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    288a:	69 a9       	ldd	r22, Y+49	; 0x31
    288c:	7a a9       	ldd	r23, Y+50	; 0x32
    288e:	8b a9       	ldd	r24, Y+51	; 0x33
    2890:	9c a9       	ldd	r25, Y+52	; 0x34
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	40 e8       	ldi	r20, 0x80	; 128
    2898:	5f e3       	ldi	r21, 0x3F	; 63
    289a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    289e:	88 23       	and	r24, r24
    28a0:	2c f4       	brge	.+10     	; 0x28ac <Stepper_voidRotateACW+0x8e>
		__ticks = 1;
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	98 ab       	std	Y+48, r25	; 0x30
    28a8:	8f a7       	std	Y+47, r24	; 0x2f
    28aa:	3f c0       	rjmp	.+126    	; 0x292a <Stepper_voidRotateACW+0x10c>
	else if (__tmp > 65535)
    28ac:	69 a9       	ldd	r22, Y+49	; 0x31
    28ae:	7a a9       	ldd	r23, Y+50	; 0x32
    28b0:	8b a9       	ldd	r24, Y+51	; 0x33
    28b2:	9c a9       	ldd	r25, Y+52	; 0x34
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	3f ef       	ldi	r19, 0xFF	; 255
    28b8:	4f e7       	ldi	r20, 0x7F	; 127
    28ba:	57 e4       	ldi	r21, 0x47	; 71
    28bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28c0:	18 16       	cp	r1, r24
    28c2:	4c f5       	brge	.+82     	; 0x2916 <Stepper_voidRotateACW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c4:	6d a9       	ldd	r22, Y+53	; 0x35
    28c6:	7e a9       	ldd	r23, Y+54	; 0x36
    28c8:	8f a9       	ldd	r24, Y+55	; 0x37
    28ca:	98 ad       	ldd	r25, Y+56	; 0x38
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	40 e2       	ldi	r20, 0x20	; 32
    28d2:	51 e4       	ldi	r21, 0x41	; 65
    28d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	bc 01       	movw	r22, r24
    28de:	cd 01       	movw	r24, r26
    28e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	98 ab       	std	Y+48, r25	; 0x30
    28ea:	8f a7       	std	Y+47, r24	; 0x2f
    28ec:	0f c0       	rjmp	.+30     	; 0x290c <Stepper_voidRotateACW+0xee>
    28ee:	88 ec       	ldi	r24, 0xC8	; 200
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	9e a7       	std	Y+46, r25	; 0x2e
    28f4:	8d a7       	std	Y+45, r24	; 0x2d
    28f6:	8d a5       	ldd	r24, Y+45	; 0x2d
    28f8:	9e a5       	ldd	r25, Y+46	; 0x2e
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <Stepper_voidRotateACW+0xdc>
    28fe:	9e a7       	std	Y+46, r25	; 0x2e
    2900:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2902:	8f a5       	ldd	r24, Y+47	; 0x2f
    2904:	98 a9       	ldd	r25, Y+48	; 0x30
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	98 ab       	std	Y+48, r25	; 0x30
    290a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290c:	8f a5       	ldd	r24, Y+47	; 0x2f
    290e:	98 a9       	ldd	r25, Y+48	; 0x30
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	69 f7       	brne	.-38     	; 0x28ee <Stepper_voidRotateACW+0xd0>
    2914:	14 c0       	rjmp	.+40     	; 0x293e <Stepper_voidRotateACW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2916:	69 a9       	ldd	r22, Y+49	; 0x31
    2918:	7a a9       	ldd	r23, Y+50	; 0x32
    291a:	8b a9       	ldd	r24, Y+51	; 0x33
    291c:	9c a9       	ldd	r25, Y+52	; 0x34
    291e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	98 ab       	std	Y+48, r25	; 0x30
    2928:	8f a7       	std	Y+47, r24	; 0x2f
    292a:	8f a5       	ldd	r24, Y+47	; 0x2f
    292c:	98 a9       	ldd	r25, Y+48	; 0x30
    292e:	9c a7       	std	Y+44, r25	; 0x2c
    2930:	8b a7       	std	Y+43, r24	; 0x2b
    2932:	8b a5       	ldd	r24, Y+43	; 0x2b
    2934:	9c a5       	ldd	r25, Y+44	; 0x2c
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	f1 f7       	brne	.-4      	; 0x2936 <Stepper_voidRotateACW+0x118>
    293a:	9c a7       	std	Y+44, r25	; 0x2c
    293c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,HIGH);
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	60 e0       	ldi	r22, 0x00	; 0
    2942:	41 e0       	ldi	r20, 0x01	; 1
    2944:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,HIGH);
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	61 e0       	ldi	r22, 0x01	; 1
    294c:	41 e0       	ldi	r20, 0x01	; 1
    294e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,HIGH);
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	62 e0       	ldi	r22, 0x02	; 2
    2956:	41 e0       	ldi	r20, 0x01	; 1
    2958:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,LOW);
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	63 e0       	ldi	r22, 0x03	; 3
    2960:	40 e0       	ldi	r20, 0x00	; 0
    2962:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	a0 e0       	ldi	r26, 0x00	; 0
    296c:	b0 e4       	ldi	r27, 0x40	; 64
    296e:	8f a3       	std	Y+39, r24	; 0x27
    2970:	98 a7       	std	Y+40, r25	; 0x28
    2972:	a9 a7       	std	Y+41, r26	; 0x29
    2974:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2976:	6f a1       	ldd	r22, Y+39	; 0x27
    2978:	78 a5       	ldd	r23, Y+40	; 0x28
    297a:	89 a5       	ldd	r24, Y+41	; 0x29
    297c:	9a a5       	ldd	r25, Y+42	; 0x2a
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	4a ef       	ldi	r20, 0xFA	; 250
    2984:	54 e4       	ldi	r21, 0x44	; 68
    2986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	8b a3       	std	Y+35, r24	; 0x23
    2990:	9c a3       	std	Y+36, r25	; 0x24
    2992:	ad a3       	std	Y+37, r26	; 0x25
    2994:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2996:	6b a1       	ldd	r22, Y+35	; 0x23
    2998:	7c a1       	ldd	r23, Y+36	; 0x24
    299a:	8d a1       	ldd	r24, Y+37	; 0x25
    299c:	9e a1       	ldd	r25, Y+38	; 0x26
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	40 e8       	ldi	r20, 0x80	; 128
    29a4:	5f e3       	ldi	r21, 0x3F	; 63
    29a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29aa:	88 23       	and	r24, r24
    29ac:	2c f4       	brge	.+10     	; 0x29b8 <Stepper_voidRotateACW+0x19a>
		__ticks = 1;
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	9a a3       	std	Y+34, r25	; 0x22
    29b4:	89 a3       	std	Y+33, r24	; 0x21
    29b6:	3f c0       	rjmp	.+126    	; 0x2a36 <Stepper_voidRotateACW+0x218>
	else if (__tmp > 65535)
    29b8:	6b a1       	ldd	r22, Y+35	; 0x23
    29ba:	7c a1       	ldd	r23, Y+36	; 0x24
    29bc:	8d a1       	ldd	r24, Y+37	; 0x25
    29be:	9e a1       	ldd	r25, Y+38	; 0x26
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	3f ef       	ldi	r19, 0xFF	; 255
    29c4:	4f e7       	ldi	r20, 0x7F	; 127
    29c6:	57 e4       	ldi	r21, 0x47	; 71
    29c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29cc:	18 16       	cp	r1, r24
    29ce:	4c f5       	brge	.+82     	; 0x2a22 <Stepper_voidRotateACW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d0:	6f a1       	ldd	r22, Y+39	; 0x27
    29d2:	78 a5       	ldd	r23, Y+40	; 0x28
    29d4:	89 a5       	ldd	r24, Y+41	; 0x29
    29d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	40 e2       	ldi	r20, 0x20	; 32
    29de:	51 e4       	ldi	r21, 0x41	; 65
    29e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	bc 01       	movw	r22, r24
    29ea:	cd 01       	movw	r24, r26
    29ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	9a a3       	std	Y+34, r25	; 0x22
    29f6:	89 a3       	std	Y+33, r24	; 0x21
    29f8:	0f c0       	rjmp	.+30     	; 0x2a18 <Stepper_voidRotateACW+0x1fa>
    29fa:	88 ec       	ldi	r24, 0xC8	; 200
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	98 a3       	std	Y+32, r25	; 0x20
    2a00:	8f 8f       	std	Y+31, r24	; 0x1f
    2a02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a04:	98 a1       	ldd	r25, Y+32	; 0x20
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <Stepper_voidRotateACW+0x1e8>
    2a0a:	98 a3       	std	Y+32, r25	; 0x20
    2a0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a10:	9a a1       	ldd	r25, Y+34	; 0x22
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	9a a3       	std	Y+34, r25	; 0x22
    2a16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a18:	89 a1       	ldd	r24, Y+33	; 0x21
    2a1a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a1c:	00 97       	sbiw	r24, 0x00	; 0
    2a1e:	69 f7       	brne	.-38     	; 0x29fa <Stepper_voidRotateACW+0x1dc>
    2a20:	14 c0       	rjmp	.+40     	; 0x2a4a <Stepper_voidRotateACW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a22:	6b a1       	ldd	r22, Y+35	; 0x23
    2a24:	7c a1       	ldd	r23, Y+36	; 0x24
    2a26:	8d a1       	ldd	r24, Y+37	; 0x25
    2a28:	9e a1       	ldd	r25, Y+38	; 0x26
    2a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	9a a3       	std	Y+34, r25	; 0x22
    2a34:	89 a3       	std	Y+33, r24	; 0x21
    2a36:	89 a1       	ldd	r24, Y+33	; 0x21
    2a38:	9a a1       	ldd	r25, Y+34	; 0x22
    2a3a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a3c:	8d 8f       	std	Y+29, r24	; 0x1d
    2a3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	f1 f7       	brne	.-4      	; 0x2a42 <Stepper_voidRotateACW+0x224>
    2a46:	9e 8f       	std	Y+30, r25	; 0x1e
    2a48:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,HIGH);
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	60 e0       	ldi	r22, 0x00	; 0
    2a4e:	41 e0       	ldi	r20, 0x01	; 1
    2a50:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,HIGH);
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	61 e0       	ldi	r22, 0x01	; 1
    2a58:	41 e0       	ldi	r20, 0x01	; 1
    2a5a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,LOW);
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	62 e0       	ldi	r22, 0x02	; 2
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,HIGH);
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	63 e0       	ldi	r22, 0x03	; 3
    2a6c:	41 e0       	ldi	r20, 0x01	; 1
    2a6e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	a0 e0       	ldi	r26, 0x00	; 0
    2a78:	b0 e4       	ldi	r27, 0x40	; 64
    2a7a:	89 8f       	std	Y+25, r24	; 0x19
    2a7c:	9a 8f       	std	Y+26, r25	; 0x1a
    2a7e:	ab 8f       	std	Y+27, r26	; 0x1b
    2a80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a82:	69 8d       	ldd	r22, Y+25	; 0x19
    2a84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	4a ef       	ldi	r20, 0xFA	; 250
    2a90:	54 e4       	ldi	r21, 0x44	; 68
    2a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	8d 8b       	std	Y+21, r24	; 0x15
    2a9c:	9e 8b       	std	Y+22, r25	; 0x16
    2a9e:	af 8b       	std	Y+23, r26	; 0x17
    2aa0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aa2:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e8       	ldi	r20, 0x80	; 128
    2ab0:	5f e3       	ldi	r21, 0x3F	; 63
    2ab2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ab6:	88 23       	and	r24, r24
    2ab8:	2c f4       	brge	.+10     	; 0x2ac4 <Stepper_voidRotateACW+0x2a6>
		__ticks = 1;
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	9c 8b       	std	Y+20, r25	; 0x14
    2ac0:	8b 8b       	std	Y+19, r24	; 0x13
    2ac2:	3f c0       	rjmp	.+126    	; 0x2b42 <Stepper_voidRotateACW+0x324>
	else if (__tmp > 65535)
    2ac4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aca:	98 8d       	ldd	r25, Y+24	; 0x18
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	3f ef       	ldi	r19, 0xFF	; 255
    2ad0:	4f e7       	ldi	r20, 0x7F	; 127
    2ad2:	57 e4       	ldi	r21, 0x47	; 71
    2ad4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ad8:	18 16       	cp	r1, r24
    2ada:	4c f5       	brge	.+82     	; 0x2b2e <Stepper_voidRotateACW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2adc:	69 8d       	ldd	r22, Y+25	; 0x19
    2ade:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ae2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e2       	ldi	r20, 0x20	; 32
    2aea:	51 e4       	ldi	r21, 0x41	; 65
    2aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	bc 01       	movw	r22, r24
    2af6:	cd 01       	movw	r24, r26
    2af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	9c 8b       	std	Y+20, r25	; 0x14
    2b02:	8b 8b       	std	Y+19, r24	; 0x13
    2b04:	0f c0       	rjmp	.+30     	; 0x2b24 <Stepper_voidRotateACW+0x306>
    2b06:	88 ec       	ldi	r24, 0xC8	; 200
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	9a 8b       	std	Y+18, r25	; 0x12
    2b0c:	89 8b       	std	Y+17, r24	; 0x11
    2b0e:	89 89       	ldd	r24, Y+17	; 0x11
    2b10:	9a 89       	ldd	r25, Y+18	; 0x12
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <Stepper_voidRotateACW+0x2f4>
    2b16:	9a 8b       	std	Y+18, r25	; 0x12
    2b18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	9c 8b       	std	Y+20, r25	; 0x14
    2b22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b24:	8b 89       	ldd	r24, Y+19	; 0x13
    2b26:	9c 89       	ldd	r25, Y+20	; 0x14
    2b28:	00 97       	sbiw	r24, 0x00	; 0
    2b2a:	69 f7       	brne	.-38     	; 0x2b06 <Stepper_voidRotateACW+0x2e8>
    2b2c:	14 c0       	rjmp	.+40     	; 0x2b56 <Stepper_voidRotateACW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b30:	7e 89       	ldd	r23, Y+22	; 0x16
    2b32:	8f 89       	ldd	r24, Y+23	; 0x17
    2b34:	98 8d       	ldd	r25, Y+24	; 0x18
    2b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	9c 8b       	std	Y+20, r25	; 0x14
    2b40:	8b 8b       	std	Y+19, r24	; 0x13
    2b42:	8b 89       	ldd	r24, Y+19	; 0x13
    2b44:	9c 89       	ldd	r25, Y+20	; 0x14
    2b46:	98 8b       	std	Y+16, r25	; 0x10
    2b48:	8f 87       	std	Y+15, r24	; 0x0f
    2b4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b4c:	98 89       	ldd	r25, Y+16	; 0x10
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	f1 f7       	brne	.-4      	; 0x2b4e <Stepper_voidRotateACW+0x330>
    2b52:	98 8b       	std	Y+16, r25	; 0x10
    2b54:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,HIGH);
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	60 e0       	ldi	r22, 0x00	; 0
    2b5a:	41 e0       	ldi	r20, 0x01	; 1
    2b5c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,LOW);
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	61 e0       	ldi	r22, 0x01	; 1
    2b64:	40 e0       	ldi	r20, 0x00	; 0
    2b66:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,HIGH);
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	62 e0       	ldi	r22, 0x02	; 2
    2b6e:	41 e0       	ldi	r20, 0x01	; 1
    2b70:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,HIGH);
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	63 e0       	ldi	r22, 0x03	; 3
    2b78:	41 e0       	ldi	r20, 0x01	; 1
    2b7a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	a0 e0       	ldi	r26, 0x00	; 0
    2b84:	b0 e4       	ldi	r27, 0x40	; 64
    2b86:	8b 87       	std	Y+11, r24	; 0x0b
    2b88:	9c 87       	std	Y+12, r25	; 0x0c
    2b8a:	ad 87       	std	Y+13, r26	; 0x0d
    2b8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	4a ef       	ldi	r20, 0xFA	; 250
    2b9c:	54 e4       	ldi	r21, 0x44	; 68
    2b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	8f 83       	std	Y+7, r24	; 0x07
    2ba8:	98 87       	std	Y+8, r25	; 0x08
    2baa:	a9 87       	std	Y+9, r26	; 0x09
    2bac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bae:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb0:	78 85       	ldd	r23, Y+8	; 0x08
    2bb2:	89 85       	ldd	r24, Y+9	; 0x09
    2bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	40 e8       	ldi	r20, 0x80	; 128
    2bbc:	5f e3       	ldi	r21, 0x3F	; 63
    2bbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bc2:	88 23       	and	r24, r24
    2bc4:	2c f4       	brge	.+10     	; 0x2bd0 <Stepper_voidRotateACW+0x3b2>
		__ticks = 1;
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	9e 83       	std	Y+6, r25	; 0x06
    2bcc:	8d 83       	std	Y+5, r24	; 0x05
    2bce:	3f c0       	rjmp	.+126    	; 0x2c4e <Stepper_voidRotateACW+0x430>
	else if (__tmp > 65535)
    2bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd2:	78 85       	ldd	r23, Y+8	; 0x08
    2bd4:	89 85       	ldd	r24, Y+9	; 0x09
    2bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	3f ef       	ldi	r19, 0xFF	; 255
    2bdc:	4f e7       	ldi	r20, 0x7F	; 127
    2bde:	57 e4       	ldi	r21, 0x47	; 71
    2be0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2be4:	18 16       	cp	r1, r24
    2be6:	4c f5       	brge	.+82     	; 0x2c3a <Stepper_voidRotateACW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	40 e2       	ldi	r20, 0x20	; 32
    2bf6:	51 e4       	ldi	r21, 0x41	; 65
    2bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	bc 01       	movw	r22, r24
    2c02:	cd 01       	movw	r24, r26
    2c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	9e 83       	std	Y+6, r25	; 0x06
    2c0e:	8d 83       	std	Y+5, r24	; 0x05
    2c10:	0f c0       	rjmp	.+30     	; 0x2c30 <Stepper_voidRotateACW+0x412>
    2c12:	88 ec       	ldi	r24, 0xC8	; 200
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	9c 83       	std	Y+4, r25	; 0x04
    2c18:	8b 83       	std	Y+3, r24	; 0x03
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	f1 f7       	brne	.-4      	; 0x2c1e <Stepper_voidRotateACW+0x400>
    2c22:	9c 83       	std	Y+4, r25	; 0x04
    2c24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c26:	8d 81       	ldd	r24, Y+5	; 0x05
    2c28:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2a:	01 97       	sbiw	r24, 0x01	; 1
    2c2c:	9e 83       	std	Y+6, r25	; 0x06
    2c2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c30:	8d 81       	ldd	r24, Y+5	; 0x05
    2c32:	9e 81       	ldd	r25, Y+6	; 0x06
    2c34:	00 97       	sbiw	r24, 0x00	; 0
    2c36:	69 f7       	brne	.-38     	; 0x2c12 <Stepper_voidRotateACW+0x3f4>
    2c38:	14 c0       	rjmp	.+40     	; 0x2c62 <Stepper_voidRotateACW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c3c:	78 85       	ldd	r23, Y+8	; 0x08
    2c3e:	89 85       	ldd	r24, Y+9	; 0x09
    2c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	9e 83       	std	Y+6, r25	; 0x06
    2c4c:	8d 83       	std	Y+5, r24	; 0x05
    2c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c50:	9e 81       	ldd	r25, Y+6	; 0x06
    2c52:	9a 83       	std	Y+2, r25	; 0x02
    2c54:	89 83       	std	Y+1, r24	; 0x01
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <Stepper_voidRotateACW+0x43c>
    2c5e:	9a 83       	std	Y+2, r25	; 0x02
    2c60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2c62:	e8 96       	adiw	r28, 0x38	; 56
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
    2c6e:	cf 91       	pop	r28
    2c70:	df 91       	pop	r29
    2c72:	08 95       	ret

00002c74 <Stepper_voidHalfSetpRotateCW>:

void Stepper_voidHalfSetpRotateCW(void)
{
    2c74:	0f 93       	push	r16
    2c76:	1f 93       	push	r17
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	c0 57       	subi	r28, 0x70	; 112
    2c82:	d0 40       	sbci	r29, 0x00	; 0
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	f8 94       	cli
    2c88:	de bf       	out	0x3e, r29	; 62
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,LOW);
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	60 e0       	ldi	r22, 0x00	; 0
    2c92:	40 e0       	ldi	r20, 0x00	; 0
    2c94:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,HIGH);
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	61 e0       	ldi	r22, 0x01	; 1
    2c9c:	41 e0       	ldi	r20, 0x01	; 1
    2c9e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,HIGH);
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	62 e0       	ldi	r22, 0x02	; 2
    2ca6:	41 e0       	ldi	r20, 0x01	; 1
    2ca8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,LOW);
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	63 e0       	ldi	r22, 0x03	; 3
    2cb0:	40 e0       	ldi	r20, 0x00	; 0
    2cb2:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	e3 59       	subi	r30, 0x93	; 147
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	a0 e0       	ldi	r26, 0x00	; 0
    2cc2:	b0 e4       	ldi	r27, 0x40	; 64
    2cc4:	80 83       	st	Z, r24
    2cc6:	91 83       	std	Z+1, r25	; 0x01
    2cc8:	a2 83       	std	Z+2, r26	; 0x02
    2cca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ccc:	8e 01       	movw	r16, r28
    2cce:	07 59       	subi	r16, 0x97	; 151
    2cd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e3 59       	subi	r30, 0x93	; 147
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	60 81       	ld	r22, Z
    2cda:	71 81       	ldd	r23, Z+1	; 0x01
    2cdc:	82 81       	ldd	r24, Z+2	; 0x02
    2cde:	93 81       	ldd	r25, Z+3	; 0x03
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	4a ef       	ldi	r20, 0xFA	; 250
    2ce6:	54 e4       	ldi	r21, 0x44	; 68
    2ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	f8 01       	movw	r30, r16
    2cf2:	80 83       	st	Z, r24
    2cf4:	91 83       	std	Z+1, r25	; 0x01
    2cf6:	a2 83       	std	Z+2, r26	; 0x02
    2cf8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	e7 59       	subi	r30, 0x97	; 151
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	60 81       	ld	r22, Z
    2d02:	71 81       	ldd	r23, Z+1	; 0x01
    2d04:	82 81       	ldd	r24, Z+2	; 0x02
    2d06:	93 81       	ldd	r25, Z+3	; 0x03
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e8       	ldi	r20, 0x80	; 128
    2d0e:	5f e3       	ldi	r21, 0x3F	; 63
    2d10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d14:	88 23       	and	r24, r24
    2d16:	44 f4       	brge	.+16     	; 0x2d28 <Stepper_voidHalfSetpRotateCW+0xb4>
		__ticks = 1;
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e9 59       	subi	r30, 0x99	; 153
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	91 83       	std	Z+1, r25	; 0x01
    2d24:	80 83       	st	Z, r24
    2d26:	64 c0       	rjmp	.+200    	; 0x2df0 <Stepper_voidHalfSetpRotateCW+0x17c>
	else if (__tmp > 65535)
    2d28:	fe 01       	movw	r30, r28
    2d2a:	e7 59       	subi	r30, 0x97	; 151
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	60 81       	ld	r22, Z
    2d30:	71 81       	ldd	r23, Z+1	; 0x01
    2d32:	82 81       	ldd	r24, Z+2	; 0x02
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	3f ef       	ldi	r19, 0xFF	; 255
    2d3a:	4f e7       	ldi	r20, 0x7F	; 127
    2d3c:	57 e4       	ldi	r21, 0x47	; 71
    2d3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d42:	18 16       	cp	r1, r24
    2d44:	0c f0       	brlt	.+2      	; 0x2d48 <Stepper_voidHalfSetpRotateCW+0xd4>
    2d46:	43 c0       	rjmp	.+134    	; 0x2dce <Stepper_voidHalfSetpRotateCW+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e3 59       	subi	r30, 0x93	; 147
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	60 81       	ld	r22, Z
    2d50:	71 81       	ldd	r23, Z+1	; 0x01
    2d52:	82 81       	ldd	r24, Z+2	; 0x02
    2d54:	93 81       	ldd	r25, Z+3	; 0x03
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	40 e2       	ldi	r20, 0x20	; 32
    2d5c:	51 e4       	ldi	r21, 0x41	; 65
    2d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	8e 01       	movw	r16, r28
    2d68:	09 59       	subi	r16, 0x99	; 153
    2d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d6c:	bc 01       	movw	r22, r24
    2d6e:	cd 01       	movw	r24, r26
    2d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	f8 01       	movw	r30, r16
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	80 83       	st	Z, r24
    2d7e:	1f c0       	rjmp	.+62     	; 0x2dbe <Stepper_voidHalfSetpRotateCW+0x14a>
    2d80:	fe 01       	movw	r30, r28
    2d82:	eb 59       	subi	r30, 0x9B	; 155
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	88 ec       	ldi	r24, 0xC8	; 200
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	91 83       	std	Z+1, r25	; 0x01
    2d8c:	80 83       	st	Z, r24
    2d8e:	fe 01       	movw	r30, r28
    2d90:	eb 59       	subi	r30, 0x9B	; 155
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	80 81       	ld	r24, Z
    2d96:	91 81       	ldd	r25, Z+1	; 0x01
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	f1 f7       	brne	.-4      	; 0x2d98 <Stepper_voidHalfSetpRotateCW+0x124>
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	eb 59       	subi	r30, 0x9B	; 155
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	91 83       	std	Z+1, r25	; 0x01
    2da4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da6:	de 01       	movw	r26, r28
    2da8:	a9 59       	subi	r26, 0x99	; 153
    2daa:	bf 4f       	sbci	r27, 0xFF	; 255
    2dac:	fe 01       	movw	r30, r28
    2dae:	e9 59       	subi	r30, 0x99	; 153
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	80 81       	ld	r24, Z
    2db4:	91 81       	ldd	r25, Z+1	; 0x01
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	11 96       	adiw	r26, 0x01	; 1
    2dba:	9c 93       	st	X, r25
    2dbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	e9 59       	subi	r30, 0x99	; 153
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	80 81       	ld	r24, Z
    2dc6:	91 81       	ldd	r25, Z+1	; 0x01
    2dc8:	00 97       	sbiw	r24, 0x00	; 0
    2dca:	d1 f6       	brne	.-76     	; 0x2d80 <Stepper_voidHalfSetpRotateCW+0x10c>
    2dcc:	27 c0       	rjmp	.+78     	; 0x2e1c <Stepper_voidHalfSetpRotateCW+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dce:	8e 01       	movw	r16, r28
    2dd0:	09 59       	subi	r16, 0x99	; 153
    2dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	e7 59       	subi	r30, 0x97	; 151
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	60 81       	ld	r22, Z
    2ddc:	71 81       	ldd	r23, Z+1	; 0x01
    2dde:	82 81       	ldd	r24, Z+2	; 0x02
    2de0:	93 81       	ldd	r25, Z+3	; 0x03
    2de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	f8 01       	movw	r30, r16
    2dec:	91 83       	std	Z+1, r25	; 0x01
    2dee:	80 83       	st	Z, r24
    2df0:	de 01       	movw	r26, r28
    2df2:	ad 59       	subi	r26, 0x9D	; 157
    2df4:	bf 4f       	sbci	r27, 0xFF	; 255
    2df6:	fe 01       	movw	r30, r28
    2df8:	e9 59       	subi	r30, 0x99	; 153
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	80 81       	ld	r24, Z
    2dfe:	91 81       	ldd	r25, Z+1	; 0x01
    2e00:	8d 93       	st	X+, r24
    2e02:	9c 93       	st	X, r25
    2e04:	fe 01       	movw	r30, r28
    2e06:	ed 59       	subi	r30, 0x9D	; 157
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	80 81       	ld	r24, Z
    2e0c:	91 81       	ldd	r25, Z+1	; 0x01
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	f1 f7       	brne	.-4      	; 0x2e0e <Stepper_voidHalfSetpRotateCW+0x19a>
    2e12:	fe 01       	movw	r30, r28
    2e14:	ed 59       	subi	r30, 0x9D	; 157
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	91 83       	std	Z+1, r25	; 0x01
    2e1a:	80 83       	st	Z, r24
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,LOW);
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	60 e0       	ldi	r22, 0x00	; 0
    2e20:	40 e0       	ldi	r20, 0x00	; 0
    2e22:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,HIGH);
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	61 e0       	ldi	r22, 0x01	; 1
    2e2a:	41 e0       	ldi	r20, 0x01	; 1
    2e2c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,HIGH);
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	62 e0       	ldi	r22, 0x02	; 2
    2e34:	41 e0       	ldi	r20, 0x01	; 1
    2e36:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,HIGH);
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	63 e0       	ldi	r22, 0x03	; 3
    2e3e:	41 e0       	ldi	r20, 0x01	; 1
    2e40:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    2e44:	fe 01       	movw	r30, r28
    2e46:	e1 5a       	subi	r30, 0xA1	; 161
    2e48:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	a0 e0       	ldi	r26, 0x00	; 0
    2e50:	b0 e4       	ldi	r27, 0x40	; 64
    2e52:	80 83       	st	Z, r24
    2e54:	91 83       	std	Z+1, r25	; 0x01
    2e56:	a2 83       	std	Z+2, r26	; 0x02
    2e58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5a:	8e 01       	movw	r16, r28
    2e5c:	05 5a       	subi	r16, 0xA5	; 165
    2e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e60:	fe 01       	movw	r30, r28
    2e62:	e1 5a       	subi	r30, 0xA1	; 161
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	60 81       	ld	r22, Z
    2e68:	71 81       	ldd	r23, Z+1	; 0x01
    2e6a:	82 81       	ldd	r24, Z+2	; 0x02
    2e6c:	93 81       	ldd	r25, Z+3	; 0x03
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	4a ef       	ldi	r20, 0xFA	; 250
    2e74:	54 e4       	ldi	r21, 0x44	; 68
    2e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	f8 01       	movw	r30, r16
    2e80:	80 83       	st	Z, r24
    2e82:	91 83       	std	Z+1, r25	; 0x01
    2e84:	a2 83       	std	Z+2, r26	; 0x02
    2e86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e88:	fe 01       	movw	r30, r28
    2e8a:	e5 5a       	subi	r30, 0xA5	; 165
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	60 81       	ld	r22, Z
    2e90:	71 81       	ldd	r23, Z+1	; 0x01
    2e92:	82 81       	ldd	r24, Z+2	; 0x02
    2e94:	93 81       	ldd	r25, Z+3	; 0x03
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	40 e8       	ldi	r20, 0x80	; 128
    2e9c:	5f e3       	ldi	r21, 0x3F	; 63
    2e9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ea2:	88 23       	and	r24, r24
    2ea4:	44 f4       	brge	.+16     	; 0x2eb6 <Stepper_voidHalfSetpRotateCW+0x242>
		__ticks = 1;
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	e7 5a       	subi	r30, 0xA7	; 167
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	91 83       	std	Z+1, r25	; 0x01
    2eb2:	80 83       	st	Z, r24
    2eb4:	64 c0       	rjmp	.+200    	; 0x2f7e <Stepper_voidHalfSetpRotateCW+0x30a>
	else if (__tmp > 65535)
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	e5 5a       	subi	r30, 0xA5	; 165
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	60 81       	ld	r22, Z
    2ebe:	71 81       	ldd	r23, Z+1	; 0x01
    2ec0:	82 81       	ldd	r24, Z+2	; 0x02
    2ec2:	93 81       	ldd	r25, Z+3	; 0x03
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	3f ef       	ldi	r19, 0xFF	; 255
    2ec8:	4f e7       	ldi	r20, 0x7F	; 127
    2eca:	57 e4       	ldi	r21, 0x47	; 71
    2ecc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ed0:	18 16       	cp	r1, r24
    2ed2:	0c f0       	brlt	.+2      	; 0x2ed6 <Stepper_voidHalfSetpRotateCW+0x262>
    2ed4:	43 c0       	rjmp	.+134    	; 0x2f5c <Stepper_voidHalfSetpRotateCW+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	e1 5a       	subi	r30, 0xA1	; 161
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	60 81       	ld	r22, Z
    2ede:	71 81       	ldd	r23, Z+1	; 0x01
    2ee0:	82 81       	ldd	r24, Z+2	; 0x02
    2ee2:	93 81       	ldd	r25, Z+3	; 0x03
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	40 e2       	ldi	r20, 0x20	; 32
    2eea:	51 e4       	ldi	r21, 0x41	; 65
    2eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	8e 01       	movw	r16, r28
    2ef6:	07 5a       	subi	r16, 0xA7	; 167
    2ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    2efa:	bc 01       	movw	r22, r24
    2efc:	cd 01       	movw	r24, r26
    2efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	f8 01       	movw	r30, r16
    2f08:	91 83       	std	Z+1, r25	; 0x01
    2f0a:	80 83       	st	Z, r24
    2f0c:	1f c0       	rjmp	.+62     	; 0x2f4c <Stepper_voidHalfSetpRotateCW+0x2d8>
    2f0e:	fe 01       	movw	r30, r28
    2f10:	e9 5a       	subi	r30, 0xA9	; 169
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	88 ec       	ldi	r24, 0xC8	; 200
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	91 83       	std	Z+1, r25	; 0x01
    2f1a:	80 83       	st	Z, r24
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	e9 5a       	subi	r30, 0xA9	; 169
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	80 81       	ld	r24, Z
    2f24:	91 81       	ldd	r25, Z+1	; 0x01
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	f1 f7       	brne	.-4      	; 0x2f26 <Stepper_voidHalfSetpRotateCW+0x2b2>
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	e9 5a       	subi	r30, 0xA9	; 169
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	91 83       	std	Z+1, r25	; 0x01
    2f32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f34:	de 01       	movw	r26, r28
    2f36:	a7 5a       	subi	r26, 0xA7	; 167
    2f38:	bf 4f       	sbci	r27, 0xFF	; 255
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	e7 5a       	subi	r30, 0xA7	; 167
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	80 81       	ld	r24, Z
    2f42:	91 81       	ldd	r25, Z+1	; 0x01
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	11 96       	adiw	r26, 0x01	; 1
    2f48:	9c 93       	st	X, r25
    2f4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	e7 5a       	subi	r30, 0xA7	; 167
    2f50:	ff 4f       	sbci	r31, 0xFF	; 255
    2f52:	80 81       	ld	r24, Z
    2f54:	91 81       	ldd	r25, Z+1	; 0x01
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	d1 f6       	brne	.-76     	; 0x2f0e <Stepper_voidHalfSetpRotateCW+0x29a>
    2f5a:	27 c0       	rjmp	.+78     	; 0x2faa <Stepper_voidHalfSetpRotateCW+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f5c:	8e 01       	movw	r16, r28
    2f5e:	07 5a       	subi	r16, 0xA7	; 167
    2f60:	1f 4f       	sbci	r17, 0xFF	; 255
    2f62:	fe 01       	movw	r30, r28
    2f64:	e5 5a       	subi	r30, 0xA5	; 165
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	60 81       	ld	r22, Z
    2f6a:	71 81       	ldd	r23, Z+1	; 0x01
    2f6c:	82 81       	ldd	r24, Z+2	; 0x02
    2f6e:	93 81       	ldd	r25, Z+3	; 0x03
    2f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	f8 01       	movw	r30, r16
    2f7a:	91 83       	std	Z+1, r25	; 0x01
    2f7c:	80 83       	st	Z, r24
    2f7e:	de 01       	movw	r26, r28
    2f80:	ab 5a       	subi	r26, 0xAB	; 171
    2f82:	bf 4f       	sbci	r27, 0xFF	; 255
    2f84:	fe 01       	movw	r30, r28
    2f86:	e7 5a       	subi	r30, 0xA7	; 167
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	80 81       	ld	r24, Z
    2f8c:	91 81       	ldd	r25, Z+1	; 0x01
    2f8e:	8d 93       	st	X+, r24
    2f90:	9c 93       	st	X, r25
    2f92:	fe 01       	movw	r30, r28
    2f94:	eb 5a       	subi	r30, 0xAB	; 171
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	80 81       	ld	r24, Z
    2f9a:	91 81       	ldd	r25, Z+1	; 0x01
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	f1 f7       	brne	.-4      	; 0x2f9c <Stepper_voidHalfSetpRotateCW+0x328>
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	eb 5a       	subi	r30, 0xAB	; 171
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	91 83       	std	Z+1, r25	; 0x01
    2fa8:	80 83       	st	Z, r24
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,LOW);
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	60 e0       	ldi	r22, 0x00	; 0
    2fae:	40 e0       	ldi	r20, 0x00	; 0
    2fb0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,LOW);
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	61 e0       	ldi	r22, 0x01	; 1
    2fb8:	40 e0       	ldi	r20, 0x00	; 0
    2fba:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,HIGH);
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	62 e0       	ldi	r22, 0x02	; 2
    2fc2:	41 e0       	ldi	r20, 0x01	; 1
    2fc4:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,HIGH);
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	63 e0       	ldi	r22, 0x03	; 3
    2fcc:	41 e0       	ldi	r20, 0x01	; 1
    2fce:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	ef 5a       	subi	r30, 0xAF	; 175
    2fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	a0 e0       	ldi	r26, 0x00	; 0
    2fde:	b0 e4       	ldi	r27, 0x40	; 64
    2fe0:	80 83       	st	Z, r24
    2fe2:	91 83       	std	Z+1, r25	; 0x01
    2fe4:	a2 83       	std	Z+2, r26	; 0x02
    2fe6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fe8:	8e 01       	movw	r16, r28
    2fea:	03 5b       	subi	r16, 0xB3	; 179
    2fec:	1f 4f       	sbci	r17, 0xFF	; 255
    2fee:	fe 01       	movw	r30, r28
    2ff0:	ef 5a       	subi	r30, 0xAF	; 175
    2ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff4:	60 81       	ld	r22, Z
    2ff6:	71 81       	ldd	r23, Z+1	; 0x01
    2ff8:	82 81       	ldd	r24, Z+2	; 0x02
    2ffa:	93 81       	ldd	r25, Z+3	; 0x03
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	4a ef       	ldi	r20, 0xFA	; 250
    3002:	54 e4       	ldi	r21, 0x44	; 68
    3004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	f8 01       	movw	r30, r16
    300e:	80 83       	st	Z, r24
    3010:	91 83       	std	Z+1, r25	; 0x01
    3012:	a2 83       	std	Z+2, r26	; 0x02
    3014:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3016:	fe 01       	movw	r30, r28
    3018:	e3 5b       	subi	r30, 0xB3	; 179
    301a:	ff 4f       	sbci	r31, 0xFF	; 255
    301c:	60 81       	ld	r22, Z
    301e:	71 81       	ldd	r23, Z+1	; 0x01
    3020:	82 81       	ldd	r24, Z+2	; 0x02
    3022:	93 81       	ldd	r25, Z+3	; 0x03
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	40 e8       	ldi	r20, 0x80	; 128
    302a:	5f e3       	ldi	r21, 0x3F	; 63
    302c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3030:	88 23       	and	r24, r24
    3032:	44 f4       	brge	.+16     	; 0x3044 <Stepper_voidHalfSetpRotateCW+0x3d0>
		__ticks = 1;
    3034:	fe 01       	movw	r30, r28
    3036:	e5 5b       	subi	r30, 0xB5	; 181
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	91 83       	std	Z+1, r25	; 0x01
    3040:	80 83       	st	Z, r24
    3042:	64 c0       	rjmp	.+200    	; 0x310c <Stepper_voidHalfSetpRotateCW+0x498>
	else if (__tmp > 65535)
    3044:	fe 01       	movw	r30, r28
    3046:	e3 5b       	subi	r30, 0xB3	; 179
    3048:	ff 4f       	sbci	r31, 0xFF	; 255
    304a:	60 81       	ld	r22, Z
    304c:	71 81       	ldd	r23, Z+1	; 0x01
    304e:	82 81       	ldd	r24, Z+2	; 0x02
    3050:	93 81       	ldd	r25, Z+3	; 0x03
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	3f ef       	ldi	r19, 0xFF	; 255
    3056:	4f e7       	ldi	r20, 0x7F	; 127
    3058:	57 e4       	ldi	r21, 0x47	; 71
    305a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    305e:	18 16       	cp	r1, r24
    3060:	0c f0       	brlt	.+2      	; 0x3064 <Stepper_voidHalfSetpRotateCW+0x3f0>
    3062:	43 c0       	rjmp	.+134    	; 0x30ea <Stepper_voidHalfSetpRotateCW+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3064:	fe 01       	movw	r30, r28
    3066:	ef 5a       	subi	r30, 0xAF	; 175
    3068:	ff 4f       	sbci	r31, 0xFF	; 255
    306a:	60 81       	ld	r22, Z
    306c:	71 81       	ldd	r23, Z+1	; 0x01
    306e:	82 81       	ldd	r24, Z+2	; 0x02
    3070:	93 81       	ldd	r25, Z+3	; 0x03
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	40 e2       	ldi	r20, 0x20	; 32
    3078:	51 e4       	ldi	r21, 0x41	; 65
    307a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	8e 01       	movw	r16, r28
    3084:	05 5b       	subi	r16, 0xB5	; 181
    3086:	1f 4f       	sbci	r17, 0xFF	; 255
    3088:	bc 01       	movw	r22, r24
    308a:	cd 01       	movw	r24, r26
    308c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	f8 01       	movw	r30, r16
    3096:	91 83       	std	Z+1, r25	; 0x01
    3098:	80 83       	st	Z, r24
    309a:	1f c0       	rjmp	.+62     	; 0x30da <Stepper_voidHalfSetpRotateCW+0x466>
    309c:	fe 01       	movw	r30, r28
    309e:	e7 5b       	subi	r30, 0xB7	; 183
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	88 ec       	ldi	r24, 0xC8	; 200
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	91 83       	std	Z+1, r25	; 0x01
    30a8:	80 83       	st	Z, r24
    30aa:	fe 01       	movw	r30, r28
    30ac:	e7 5b       	subi	r30, 0xB7	; 183
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	80 81       	ld	r24, Z
    30b2:	91 81       	ldd	r25, Z+1	; 0x01
    30b4:	01 97       	sbiw	r24, 0x01	; 1
    30b6:	f1 f7       	brne	.-4      	; 0x30b4 <Stepper_voidHalfSetpRotateCW+0x440>
    30b8:	fe 01       	movw	r30, r28
    30ba:	e7 5b       	subi	r30, 0xB7	; 183
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	91 83       	std	Z+1, r25	; 0x01
    30c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c2:	de 01       	movw	r26, r28
    30c4:	a5 5b       	subi	r26, 0xB5	; 181
    30c6:	bf 4f       	sbci	r27, 0xFF	; 255
    30c8:	fe 01       	movw	r30, r28
    30ca:	e5 5b       	subi	r30, 0xB5	; 181
    30cc:	ff 4f       	sbci	r31, 0xFF	; 255
    30ce:	80 81       	ld	r24, Z
    30d0:	91 81       	ldd	r25, Z+1	; 0x01
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	11 96       	adiw	r26, 0x01	; 1
    30d6:	9c 93       	st	X, r25
    30d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30da:	fe 01       	movw	r30, r28
    30dc:	e5 5b       	subi	r30, 0xB5	; 181
    30de:	ff 4f       	sbci	r31, 0xFF	; 255
    30e0:	80 81       	ld	r24, Z
    30e2:	91 81       	ldd	r25, Z+1	; 0x01
    30e4:	00 97       	sbiw	r24, 0x00	; 0
    30e6:	d1 f6       	brne	.-76     	; 0x309c <Stepper_voidHalfSetpRotateCW+0x428>
    30e8:	27 c0       	rjmp	.+78     	; 0x3138 <Stepper_voidHalfSetpRotateCW+0x4c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ea:	8e 01       	movw	r16, r28
    30ec:	05 5b       	subi	r16, 0xB5	; 181
    30ee:	1f 4f       	sbci	r17, 0xFF	; 255
    30f0:	fe 01       	movw	r30, r28
    30f2:	e3 5b       	subi	r30, 0xB3	; 179
    30f4:	ff 4f       	sbci	r31, 0xFF	; 255
    30f6:	60 81       	ld	r22, Z
    30f8:	71 81       	ldd	r23, Z+1	; 0x01
    30fa:	82 81       	ldd	r24, Z+2	; 0x02
    30fc:	93 81       	ldd	r25, Z+3	; 0x03
    30fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	f8 01       	movw	r30, r16
    3108:	91 83       	std	Z+1, r25	; 0x01
    310a:	80 83       	st	Z, r24
    310c:	de 01       	movw	r26, r28
    310e:	a9 5b       	subi	r26, 0xB9	; 185
    3110:	bf 4f       	sbci	r27, 0xFF	; 255
    3112:	fe 01       	movw	r30, r28
    3114:	e5 5b       	subi	r30, 0xB5	; 181
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	80 81       	ld	r24, Z
    311a:	91 81       	ldd	r25, Z+1	; 0x01
    311c:	8d 93       	st	X+, r24
    311e:	9c 93       	st	X, r25
    3120:	fe 01       	movw	r30, r28
    3122:	e9 5b       	subi	r30, 0xB9	; 185
    3124:	ff 4f       	sbci	r31, 0xFF	; 255
    3126:	80 81       	ld	r24, Z
    3128:	91 81       	ldd	r25, Z+1	; 0x01
    312a:	01 97       	sbiw	r24, 0x01	; 1
    312c:	f1 f7       	brne	.-4      	; 0x312a <Stepper_voidHalfSetpRotateCW+0x4b6>
    312e:	fe 01       	movw	r30, r28
    3130:	e9 5b       	subi	r30, 0xB9	; 185
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	91 83       	std	Z+1, r25	; 0x01
    3136:	80 83       	st	Z, r24
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,HIGH);
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	60 e0       	ldi	r22, 0x00	; 0
    313c:	41 e0       	ldi	r20, 0x01	; 1
    313e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,LOW);
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	61 e0       	ldi	r22, 0x01	; 1
    3146:	40 e0       	ldi	r20, 0x00	; 0
    3148:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,HIGH);
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	62 e0       	ldi	r22, 0x02	; 2
    3150:	41 e0       	ldi	r20, 0x01	; 1
    3152:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,HIGH);
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	63 e0       	ldi	r22, 0x03	; 3
    315a:	41 e0       	ldi	r20, 0x01	; 1
    315c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    3160:	fe 01       	movw	r30, r28
    3162:	ed 5b       	subi	r30, 0xBD	; 189
    3164:	ff 4f       	sbci	r31, 0xFF	; 255
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	a0 e0       	ldi	r26, 0x00	; 0
    316c:	b0 e4       	ldi	r27, 0x40	; 64
    316e:	80 83       	st	Z, r24
    3170:	91 83       	std	Z+1, r25	; 0x01
    3172:	a2 83       	std	Z+2, r26	; 0x02
    3174:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3176:	8e 01       	movw	r16, r28
    3178:	01 5c       	subi	r16, 0xC1	; 193
    317a:	1f 4f       	sbci	r17, 0xFF	; 255
    317c:	fe 01       	movw	r30, r28
    317e:	ed 5b       	subi	r30, 0xBD	; 189
    3180:	ff 4f       	sbci	r31, 0xFF	; 255
    3182:	60 81       	ld	r22, Z
    3184:	71 81       	ldd	r23, Z+1	; 0x01
    3186:	82 81       	ldd	r24, Z+2	; 0x02
    3188:	93 81       	ldd	r25, Z+3	; 0x03
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	4a ef       	ldi	r20, 0xFA	; 250
    3190:	54 e4       	ldi	r21, 0x44	; 68
    3192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	f8 01       	movw	r30, r16
    319c:	80 83       	st	Z, r24
    319e:	91 83       	std	Z+1, r25	; 0x01
    31a0:	a2 83       	std	Z+2, r26	; 0x02
    31a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31a4:	fe 01       	movw	r30, r28
    31a6:	ff 96       	adiw	r30, 0x3f	; 63
    31a8:	60 81       	ld	r22, Z
    31aa:	71 81       	ldd	r23, Z+1	; 0x01
    31ac:	82 81       	ldd	r24, Z+2	; 0x02
    31ae:	93 81       	ldd	r25, Z+3	; 0x03
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	40 e8       	ldi	r20, 0x80	; 128
    31b6:	5f e3       	ldi	r21, 0x3F	; 63
    31b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31bc:	88 23       	and	r24, r24
    31be:	2c f4       	brge	.+10     	; 0x31ca <Stepper_voidHalfSetpRotateCW+0x556>
		__ticks = 1;
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	9e af       	std	Y+62, r25	; 0x3e
    31c6:	8d af       	std	Y+61, r24	; 0x3d
    31c8:	46 c0       	rjmp	.+140    	; 0x3256 <Stepper_voidHalfSetpRotateCW+0x5e2>
	else if (__tmp > 65535)
    31ca:	fe 01       	movw	r30, r28
    31cc:	ff 96       	adiw	r30, 0x3f	; 63
    31ce:	60 81       	ld	r22, Z
    31d0:	71 81       	ldd	r23, Z+1	; 0x01
    31d2:	82 81       	ldd	r24, Z+2	; 0x02
    31d4:	93 81       	ldd	r25, Z+3	; 0x03
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	3f ef       	ldi	r19, 0xFF	; 255
    31da:	4f e7       	ldi	r20, 0x7F	; 127
    31dc:	57 e4       	ldi	r21, 0x47	; 71
    31de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31e2:	18 16       	cp	r1, r24
    31e4:	64 f5       	brge	.+88     	; 0x323e <Stepper_voidHalfSetpRotateCW+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e6:	fe 01       	movw	r30, r28
    31e8:	ed 5b       	subi	r30, 0xBD	; 189
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	60 81       	ld	r22, Z
    31ee:	71 81       	ldd	r23, Z+1	; 0x01
    31f0:	82 81       	ldd	r24, Z+2	; 0x02
    31f2:	93 81       	ldd	r25, Z+3	; 0x03
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	40 e2       	ldi	r20, 0x20	; 32
    31fa:	51 e4       	ldi	r21, 0x41	; 65
    31fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	bc 01       	movw	r22, r24
    3206:	cd 01       	movw	r24, r26
    3208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	9e af       	std	Y+62, r25	; 0x3e
    3212:	8d af       	std	Y+61, r24	; 0x3d
    3214:	0f c0       	rjmp	.+30     	; 0x3234 <Stepper_voidHalfSetpRotateCW+0x5c0>
    3216:	88 ec       	ldi	r24, 0xC8	; 200
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	9c af       	std	Y+60, r25	; 0x3c
    321c:	8b af       	std	Y+59, r24	; 0x3b
    321e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3220:	9c ad       	ldd	r25, Y+60	; 0x3c
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	f1 f7       	brne	.-4      	; 0x3222 <Stepper_voidHalfSetpRotateCW+0x5ae>
    3226:	9c af       	std	Y+60, r25	; 0x3c
    3228:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    322a:	8d ad       	ldd	r24, Y+61	; 0x3d
    322c:	9e ad       	ldd	r25, Y+62	; 0x3e
    322e:	01 97       	sbiw	r24, 0x01	; 1
    3230:	9e af       	std	Y+62, r25	; 0x3e
    3232:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3234:	8d ad       	ldd	r24, Y+61	; 0x3d
    3236:	9e ad       	ldd	r25, Y+62	; 0x3e
    3238:	00 97       	sbiw	r24, 0x00	; 0
    323a:	69 f7       	brne	.-38     	; 0x3216 <Stepper_voidHalfSetpRotateCW+0x5a2>
    323c:	16 c0       	rjmp	.+44     	; 0x326a <Stepper_voidHalfSetpRotateCW+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    323e:	fe 01       	movw	r30, r28
    3240:	ff 96       	adiw	r30, 0x3f	; 63
    3242:	60 81       	ld	r22, Z
    3244:	71 81       	ldd	r23, Z+1	; 0x01
    3246:	82 81       	ldd	r24, Z+2	; 0x02
    3248:	93 81       	ldd	r25, Z+3	; 0x03
    324a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	9e af       	std	Y+62, r25	; 0x3e
    3254:	8d af       	std	Y+61, r24	; 0x3d
    3256:	8d ad       	ldd	r24, Y+61	; 0x3d
    3258:	9e ad       	ldd	r25, Y+62	; 0x3e
    325a:	9a af       	std	Y+58, r25	; 0x3a
    325c:	89 af       	std	Y+57, r24	; 0x39
    325e:	89 ad       	ldd	r24, Y+57	; 0x39
    3260:	9a ad       	ldd	r25, Y+58	; 0x3a
    3262:	01 97       	sbiw	r24, 0x01	; 1
    3264:	f1 f7       	brne	.-4      	; 0x3262 <Stepper_voidHalfSetpRotateCW+0x5ee>
    3266:	9a af       	std	Y+58, r25	; 0x3a
    3268:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,HIGH);
    326a:	81 e0       	ldi	r24, 0x01	; 1
    326c:	60 e0       	ldi	r22, 0x00	; 0
    326e:	41 e0       	ldi	r20, 0x01	; 1
    3270:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,LOW);
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	61 e0       	ldi	r22, 0x01	; 1
    3278:	40 e0       	ldi	r20, 0x00	; 0
    327a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,LOW);
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	62 e0       	ldi	r22, 0x02	; 2
    3282:	40 e0       	ldi	r20, 0x00	; 0
    3284:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,HIGH);
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	63 e0       	ldi	r22, 0x03	; 3
    328c:	41 e0       	ldi	r20, 0x01	; 1
    328e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	a0 e0       	ldi	r26, 0x00	; 0
    3298:	b0 e4       	ldi	r27, 0x40	; 64
    329a:	8d ab       	std	Y+53, r24	; 0x35
    329c:	9e ab       	std	Y+54, r25	; 0x36
    329e:	af ab       	std	Y+55, r26	; 0x37
    32a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a2:	6d a9       	ldd	r22, Y+53	; 0x35
    32a4:	7e a9       	ldd	r23, Y+54	; 0x36
    32a6:	8f a9       	ldd	r24, Y+55	; 0x37
    32a8:	98 ad       	ldd	r25, Y+56	; 0x38
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	4a ef       	ldi	r20, 0xFA	; 250
    32b0:	54 e4       	ldi	r21, 0x44	; 68
    32b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b6:	dc 01       	movw	r26, r24
    32b8:	cb 01       	movw	r24, r22
    32ba:	89 ab       	std	Y+49, r24	; 0x31
    32bc:	9a ab       	std	Y+50, r25	; 0x32
    32be:	ab ab       	std	Y+51, r26	; 0x33
    32c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32c2:	69 a9       	ldd	r22, Y+49	; 0x31
    32c4:	7a a9       	ldd	r23, Y+50	; 0x32
    32c6:	8b a9       	ldd	r24, Y+51	; 0x33
    32c8:	9c a9       	ldd	r25, Y+52	; 0x34
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	40 e8       	ldi	r20, 0x80	; 128
    32d0:	5f e3       	ldi	r21, 0x3F	; 63
    32d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32d6:	88 23       	and	r24, r24
    32d8:	2c f4       	brge	.+10     	; 0x32e4 <Stepper_voidHalfSetpRotateCW+0x670>
		__ticks = 1;
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	98 ab       	std	Y+48, r25	; 0x30
    32e0:	8f a7       	std	Y+47, r24	; 0x2f
    32e2:	3f c0       	rjmp	.+126    	; 0x3362 <Stepper_voidHalfSetpRotateCW+0x6ee>
	else if (__tmp > 65535)
    32e4:	69 a9       	ldd	r22, Y+49	; 0x31
    32e6:	7a a9       	ldd	r23, Y+50	; 0x32
    32e8:	8b a9       	ldd	r24, Y+51	; 0x33
    32ea:	9c a9       	ldd	r25, Y+52	; 0x34
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	3f ef       	ldi	r19, 0xFF	; 255
    32f0:	4f e7       	ldi	r20, 0x7F	; 127
    32f2:	57 e4       	ldi	r21, 0x47	; 71
    32f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32f8:	18 16       	cp	r1, r24
    32fa:	4c f5       	brge	.+82     	; 0x334e <Stepper_voidHalfSetpRotateCW+0x6da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32fc:	6d a9       	ldd	r22, Y+53	; 0x35
    32fe:	7e a9       	ldd	r23, Y+54	; 0x36
    3300:	8f a9       	ldd	r24, Y+55	; 0x37
    3302:	98 ad       	ldd	r25, Y+56	; 0x38
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	40 e2       	ldi	r20, 0x20	; 32
    330a:	51 e4       	ldi	r21, 0x41	; 65
    330c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	bc 01       	movw	r22, r24
    3316:	cd 01       	movw	r24, r26
    3318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	98 ab       	std	Y+48, r25	; 0x30
    3322:	8f a7       	std	Y+47, r24	; 0x2f
    3324:	0f c0       	rjmp	.+30     	; 0x3344 <Stepper_voidHalfSetpRotateCW+0x6d0>
    3326:	88 ec       	ldi	r24, 0xC8	; 200
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	9e a7       	std	Y+46, r25	; 0x2e
    332c:	8d a7       	std	Y+45, r24	; 0x2d
    332e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3330:	9e a5       	ldd	r25, Y+46	; 0x2e
    3332:	01 97       	sbiw	r24, 0x01	; 1
    3334:	f1 f7       	brne	.-4      	; 0x3332 <Stepper_voidHalfSetpRotateCW+0x6be>
    3336:	9e a7       	std	Y+46, r25	; 0x2e
    3338:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    333a:	8f a5       	ldd	r24, Y+47	; 0x2f
    333c:	98 a9       	ldd	r25, Y+48	; 0x30
    333e:	01 97       	sbiw	r24, 0x01	; 1
    3340:	98 ab       	std	Y+48, r25	; 0x30
    3342:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3344:	8f a5       	ldd	r24, Y+47	; 0x2f
    3346:	98 a9       	ldd	r25, Y+48	; 0x30
    3348:	00 97       	sbiw	r24, 0x00	; 0
    334a:	69 f7       	brne	.-38     	; 0x3326 <Stepper_voidHalfSetpRotateCW+0x6b2>
    334c:	14 c0       	rjmp	.+40     	; 0x3376 <Stepper_voidHalfSetpRotateCW+0x702>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    334e:	69 a9       	ldd	r22, Y+49	; 0x31
    3350:	7a a9       	ldd	r23, Y+50	; 0x32
    3352:	8b a9       	ldd	r24, Y+51	; 0x33
    3354:	9c a9       	ldd	r25, Y+52	; 0x34
    3356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	98 ab       	std	Y+48, r25	; 0x30
    3360:	8f a7       	std	Y+47, r24	; 0x2f
    3362:	8f a5       	ldd	r24, Y+47	; 0x2f
    3364:	98 a9       	ldd	r25, Y+48	; 0x30
    3366:	9c a7       	std	Y+44, r25	; 0x2c
    3368:	8b a7       	std	Y+43, r24	; 0x2b
    336a:	8b a5       	ldd	r24, Y+43	; 0x2b
    336c:	9c a5       	ldd	r25, Y+44	; 0x2c
    336e:	01 97       	sbiw	r24, 0x01	; 1
    3370:	f1 f7       	brne	.-4      	; 0x336e <Stepper_voidHalfSetpRotateCW+0x6fa>
    3372:	9c a7       	std	Y+44, r25	; 0x2c
    3374:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,HIGH);
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	60 e0       	ldi	r22, 0x00	; 0
    337a:	41 e0       	ldi	r20, 0x01	; 1
    337c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,HIGH);
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	61 e0       	ldi	r22, 0x01	; 1
    3384:	41 e0       	ldi	r20, 0x01	; 1
    3386:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,LOW);
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	62 e0       	ldi	r22, 0x02	; 2
    338e:	40 e0       	ldi	r20, 0x00	; 0
    3390:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,HIGH);
    3394:	81 e0       	ldi	r24, 0x01	; 1
    3396:	63 e0       	ldi	r22, 0x03	; 3
    3398:	41 e0       	ldi	r20, 0x01	; 1
    339a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    339e:	80 e0       	ldi	r24, 0x00	; 0
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	a0 e0       	ldi	r26, 0x00	; 0
    33a4:	b0 e4       	ldi	r27, 0x40	; 64
    33a6:	8f a3       	std	Y+39, r24	; 0x27
    33a8:	98 a7       	std	Y+40, r25	; 0x28
    33aa:	a9 a7       	std	Y+41, r26	; 0x29
    33ac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ae:	6f a1       	ldd	r22, Y+39	; 0x27
    33b0:	78 a5       	ldd	r23, Y+40	; 0x28
    33b2:	89 a5       	ldd	r24, Y+41	; 0x29
    33b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	4a ef       	ldi	r20, 0xFA	; 250
    33bc:	54 e4       	ldi	r21, 0x44	; 68
    33be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c2:	dc 01       	movw	r26, r24
    33c4:	cb 01       	movw	r24, r22
    33c6:	8b a3       	std	Y+35, r24	; 0x23
    33c8:	9c a3       	std	Y+36, r25	; 0x24
    33ca:	ad a3       	std	Y+37, r26	; 0x25
    33cc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33ce:	6b a1       	ldd	r22, Y+35	; 0x23
    33d0:	7c a1       	ldd	r23, Y+36	; 0x24
    33d2:	8d a1       	ldd	r24, Y+37	; 0x25
    33d4:	9e a1       	ldd	r25, Y+38	; 0x26
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	40 e8       	ldi	r20, 0x80	; 128
    33dc:	5f e3       	ldi	r21, 0x3F	; 63
    33de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33e2:	88 23       	and	r24, r24
    33e4:	2c f4       	brge	.+10     	; 0x33f0 <Stepper_voidHalfSetpRotateCW+0x77c>
		__ticks = 1;
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	9a a3       	std	Y+34, r25	; 0x22
    33ec:	89 a3       	std	Y+33, r24	; 0x21
    33ee:	3f c0       	rjmp	.+126    	; 0x346e <Stepper_voidHalfSetpRotateCW+0x7fa>
	else if (__tmp > 65535)
    33f0:	6b a1       	ldd	r22, Y+35	; 0x23
    33f2:	7c a1       	ldd	r23, Y+36	; 0x24
    33f4:	8d a1       	ldd	r24, Y+37	; 0x25
    33f6:	9e a1       	ldd	r25, Y+38	; 0x26
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	3f ef       	ldi	r19, 0xFF	; 255
    33fc:	4f e7       	ldi	r20, 0x7F	; 127
    33fe:	57 e4       	ldi	r21, 0x47	; 71
    3400:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3404:	18 16       	cp	r1, r24
    3406:	4c f5       	brge	.+82     	; 0x345a <Stepper_voidHalfSetpRotateCW+0x7e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3408:	6f a1       	ldd	r22, Y+39	; 0x27
    340a:	78 a5       	ldd	r23, Y+40	; 0x28
    340c:	89 a5       	ldd	r24, Y+41	; 0x29
    340e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3410:	20 e0       	ldi	r18, 0x00	; 0
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	40 e2       	ldi	r20, 0x20	; 32
    3416:	51 e4       	ldi	r21, 0x41	; 65
    3418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341c:	dc 01       	movw	r26, r24
    341e:	cb 01       	movw	r24, r22
    3420:	bc 01       	movw	r22, r24
    3422:	cd 01       	movw	r24, r26
    3424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3428:	dc 01       	movw	r26, r24
    342a:	cb 01       	movw	r24, r22
    342c:	9a a3       	std	Y+34, r25	; 0x22
    342e:	89 a3       	std	Y+33, r24	; 0x21
    3430:	0f c0       	rjmp	.+30     	; 0x3450 <Stepper_voidHalfSetpRotateCW+0x7dc>
    3432:	88 ec       	ldi	r24, 0xC8	; 200
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	98 a3       	std	Y+32, r25	; 0x20
    3438:	8f 8f       	std	Y+31, r24	; 0x1f
    343a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    343c:	98 a1       	ldd	r25, Y+32	; 0x20
    343e:	01 97       	sbiw	r24, 0x01	; 1
    3440:	f1 f7       	brne	.-4      	; 0x343e <Stepper_voidHalfSetpRotateCW+0x7ca>
    3442:	98 a3       	std	Y+32, r25	; 0x20
    3444:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3446:	89 a1       	ldd	r24, Y+33	; 0x21
    3448:	9a a1       	ldd	r25, Y+34	; 0x22
    344a:	01 97       	sbiw	r24, 0x01	; 1
    344c:	9a a3       	std	Y+34, r25	; 0x22
    344e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3450:	89 a1       	ldd	r24, Y+33	; 0x21
    3452:	9a a1       	ldd	r25, Y+34	; 0x22
    3454:	00 97       	sbiw	r24, 0x00	; 0
    3456:	69 f7       	brne	.-38     	; 0x3432 <Stepper_voidHalfSetpRotateCW+0x7be>
    3458:	14 c0       	rjmp	.+40     	; 0x3482 <Stepper_voidHalfSetpRotateCW+0x80e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345a:	6b a1       	ldd	r22, Y+35	; 0x23
    345c:	7c a1       	ldd	r23, Y+36	; 0x24
    345e:	8d a1       	ldd	r24, Y+37	; 0x25
    3460:	9e a1       	ldd	r25, Y+38	; 0x26
    3462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	9a a3       	std	Y+34, r25	; 0x22
    346c:	89 a3       	std	Y+33, r24	; 0x21
    346e:	89 a1       	ldd	r24, Y+33	; 0x21
    3470:	9a a1       	ldd	r25, Y+34	; 0x22
    3472:	9e 8f       	std	Y+30, r25	; 0x1e
    3474:	8d 8f       	std	Y+29, r24	; 0x1d
    3476:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3478:	9e 8d       	ldd	r25, Y+30	; 0x1e
    347a:	01 97       	sbiw	r24, 0x01	; 1
    347c:	f1 f7       	brne	.-4      	; 0x347a <Stepper_voidHalfSetpRotateCW+0x806>
    347e:	9e 8f       	std	Y+30, r25	; 0x1e
    3480:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,HIGH);
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	60 e0       	ldi	r22, 0x00	; 0
    3486:	41 e0       	ldi	r20, 0x01	; 1
    3488:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,HIGH);
    348c:	81 e0       	ldi	r24, 0x01	; 1
    348e:	61 e0       	ldi	r22, 0x01	; 1
    3490:	41 e0       	ldi	r20, 0x01	; 1
    3492:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,LOW);
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	62 e0       	ldi	r22, 0x02	; 2
    349a:	40 e0       	ldi	r20, 0x00	; 0
    349c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,LOW);
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	63 e0       	ldi	r22, 0x03	; 3
    34a4:	40 e0       	ldi	r20, 0x00	; 0
    34a6:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	a0 e0       	ldi	r26, 0x00	; 0
    34b0:	b0 e4       	ldi	r27, 0x40	; 64
    34b2:	89 8f       	std	Y+25, r24	; 0x19
    34b4:	9a 8f       	std	Y+26, r25	; 0x1a
    34b6:	ab 8f       	std	Y+27, r26	; 0x1b
    34b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ba:	69 8d       	ldd	r22, Y+25	; 0x19
    34bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	4a ef       	ldi	r20, 0xFA	; 250
    34c8:	54 e4       	ldi	r21, 0x44	; 68
    34ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	8d 8b       	std	Y+21, r24	; 0x15
    34d4:	9e 8b       	std	Y+22, r25	; 0x16
    34d6:	af 8b       	std	Y+23, r26	; 0x17
    34d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34da:	6d 89       	ldd	r22, Y+21	; 0x15
    34dc:	7e 89       	ldd	r23, Y+22	; 0x16
    34de:	8f 89       	ldd	r24, Y+23	; 0x17
    34e0:	98 8d       	ldd	r25, Y+24	; 0x18
    34e2:	20 e0       	ldi	r18, 0x00	; 0
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	40 e8       	ldi	r20, 0x80	; 128
    34e8:	5f e3       	ldi	r21, 0x3F	; 63
    34ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34ee:	88 23       	and	r24, r24
    34f0:	2c f4       	brge	.+10     	; 0x34fc <Stepper_voidHalfSetpRotateCW+0x888>
		__ticks = 1;
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	9c 8b       	std	Y+20, r25	; 0x14
    34f8:	8b 8b       	std	Y+19, r24	; 0x13
    34fa:	3f c0       	rjmp	.+126    	; 0x357a <Stepper_voidHalfSetpRotateCW+0x906>
	else if (__tmp > 65535)
    34fc:	6d 89       	ldd	r22, Y+21	; 0x15
    34fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3500:	8f 89       	ldd	r24, Y+23	; 0x17
    3502:	98 8d       	ldd	r25, Y+24	; 0x18
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	3f ef       	ldi	r19, 0xFF	; 255
    3508:	4f e7       	ldi	r20, 0x7F	; 127
    350a:	57 e4       	ldi	r21, 0x47	; 71
    350c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3510:	18 16       	cp	r1, r24
    3512:	4c f5       	brge	.+82     	; 0x3566 <Stepper_voidHalfSetpRotateCW+0x8f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3514:	69 8d       	ldd	r22, Y+25	; 0x19
    3516:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3518:	8b 8d       	ldd	r24, Y+27	; 0x1b
    351a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	40 e2       	ldi	r20, 0x20	; 32
    3522:	51 e4       	ldi	r21, 0x41	; 65
    3524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	bc 01       	movw	r22, r24
    352e:	cd 01       	movw	r24, r26
    3530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	9c 8b       	std	Y+20, r25	; 0x14
    353a:	8b 8b       	std	Y+19, r24	; 0x13
    353c:	0f c0       	rjmp	.+30     	; 0x355c <Stepper_voidHalfSetpRotateCW+0x8e8>
    353e:	88 ec       	ldi	r24, 0xC8	; 200
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	9a 8b       	std	Y+18, r25	; 0x12
    3544:	89 8b       	std	Y+17, r24	; 0x11
    3546:	89 89       	ldd	r24, Y+17	; 0x11
    3548:	9a 89       	ldd	r25, Y+18	; 0x12
    354a:	01 97       	sbiw	r24, 0x01	; 1
    354c:	f1 f7       	brne	.-4      	; 0x354a <Stepper_voidHalfSetpRotateCW+0x8d6>
    354e:	9a 8b       	std	Y+18, r25	; 0x12
    3550:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3552:	8b 89       	ldd	r24, Y+19	; 0x13
    3554:	9c 89       	ldd	r25, Y+20	; 0x14
    3556:	01 97       	sbiw	r24, 0x01	; 1
    3558:	9c 8b       	std	Y+20, r25	; 0x14
    355a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    355c:	8b 89       	ldd	r24, Y+19	; 0x13
    355e:	9c 89       	ldd	r25, Y+20	; 0x14
    3560:	00 97       	sbiw	r24, 0x00	; 0
    3562:	69 f7       	brne	.-38     	; 0x353e <Stepper_voidHalfSetpRotateCW+0x8ca>
    3564:	14 c0       	rjmp	.+40     	; 0x358e <Stepper_voidHalfSetpRotateCW+0x91a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3566:	6d 89       	ldd	r22, Y+21	; 0x15
    3568:	7e 89       	ldd	r23, Y+22	; 0x16
    356a:	8f 89       	ldd	r24, Y+23	; 0x17
    356c:	98 8d       	ldd	r25, Y+24	; 0x18
    356e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	9c 8b       	std	Y+20, r25	; 0x14
    3578:	8b 8b       	std	Y+19, r24	; 0x13
    357a:	8b 89       	ldd	r24, Y+19	; 0x13
    357c:	9c 89       	ldd	r25, Y+20	; 0x14
    357e:	98 8b       	std	Y+16, r25	; 0x10
    3580:	8f 87       	std	Y+15, r24	; 0x0f
    3582:	8f 85       	ldd	r24, Y+15	; 0x0f
    3584:	98 89       	ldd	r25, Y+16	; 0x10
    3586:	01 97       	sbiw	r24, 0x01	; 1
    3588:	f1 f7       	brne	.-4      	; 0x3586 <Stepper_voidHalfSetpRotateCW+0x912>
    358a:	98 8b       	std	Y+16, r25	; 0x10
    358c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,HIGH);
    358e:	81 e0       	ldi	r24, 0x01	; 1
    3590:	60 e0       	ldi	r22, 0x00	; 0
    3592:	41 e0       	ldi	r20, 0x01	; 1
    3594:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,HIGH);
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	61 e0       	ldi	r22, 0x01	; 1
    359c:	41 e0       	ldi	r20, 0x01	; 1
    359e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,HIGH);
    35a2:	81 e0       	ldi	r24, 0x01	; 1
    35a4:	62 e0       	ldi	r22, 0x02	; 2
    35a6:	41 e0       	ldi	r20, 0x01	; 1
    35a8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,LOW);
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	63 e0       	ldi	r22, 0x03	; 3
    35b0:	40 e0       	ldi	r20, 0x00	; 0
    35b2:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	a0 e0       	ldi	r26, 0x00	; 0
    35bc:	b0 e4       	ldi	r27, 0x40	; 64
    35be:	8b 87       	std	Y+11, r24	; 0x0b
    35c0:	9c 87       	std	Y+12, r25	; 0x0c
    35c2:	ad 87       	std	Y+13, r26	; 0x0d
    35c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    35c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    35ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    35cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	4a ef       	ldi	r20, 0xFA	; 250
    35d4:	54 e4       	ldi	r21, 0x44	; 68
    35d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35da:	dc 01       	movw	r26, r24
    35dc:	cb 01       	movw	r24, r22
    35de:	8f 83       	std	Y+7, r24	; 0x07
    35e0:	98 87       	std	Y+8, r25	; 0x08
    35e2:	a9 87       	std	Y+9, r26	; 0x09
    35e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35e6:	6f 81       	ldd	r22, Y+7	; 0x07
    35e8:	78 85       	ldd	r23, Y+8	; 0x08
    35ea:	89 85       	ldd	r24, Y+9	; 0x09
    35ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ee:	20 e0       	ldi	r18, 0x00	; 0
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	40 e8       	ldi	r20, 0x80	; 128
    35f4:	5f e3       	ldi	r21, 0x3F	; 63
    35f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35fa:	88 23       	and	r24, r24
    35fc:	2c f4       	brge	.+10     	; 0x3608 <Stepper_voidHalfSetpRotateCW+0x994>
		__ticks = 1;
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	9e 83       	std	Y+6, r25	; 0x06
    3604:	8d 83       	std	Y+5, r24	; 0x05
    3606:	3f c0       	rjmp	.+126    	; 0x3686 <Stepper_voidHalfSetpRotateCW+0xa12>
	else if (__tmp > 65535)
    3608:	6f 81       	ldd	r22, Y+7	; 0x07
    360a:	78 85       	ldd	r23, Y+8	; 0x08
    360c:	89 85       	ldd	r24, Y+9	; 0x09
    360e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3610:	20 e0       	ldi	r18, 0x00	; 0
    3612:	3f ef       	ldi	r19, 0xFF	; 255
    3614:	4f e7       	ldi	r20, 0x7F	; 127
    3616:	57 e4       	ldi	r21, 0x47	; 71
    3618:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    361c:	18 16       	cp	r1, r24
    361e:	4c f5       	brge	.+82     	; 0x3672 <Stepper_voidHalfSetpRotateCW+0x9fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3620:	6b 85       	ldd	r22, Y+11	; 0x0b
    3622:	7c 85       	ldd	r23, Y+12	; 0x0c
    3624:	8d 85       	ldd	r24, Y+13	; 0x0d
    3626:	9e 85       	ldd	r25, Y+14	; 0x0e
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	40 e2       	ldi	r20, 0x20	; 32
    362e:	51 e4       	ldi	r21, 0x41	; 65
    3630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	bc 01       	movw	r22, r24
    363a:	cd 01       	movw	r24, r26
    363c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	9e 83       	std	Y+6, r25	; 0x06
    3646:	8d 83       	std	Y+5, r24	; 0x05
    3648:	0f c0       	rjmp	.+30     	; 0x3668 <Stepper_voidHalfSetpRotateCW+0x9f4>
    364a:	88 ec       	ldi	r24, 0xC8	; 200
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	9c 83       	std	Y+4, r25	; 0x04
    3650:	8b 83       	std	Y+3, r24	; 0x03
    3652:	8b 81       	ldd	r24, Y+3	; 0x03
    3654:	9c 81       	ldd	r25, Y+4	; 0x04
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	f1 f7       	brne	.-4      	; 0x3656 <Stepper_voidHalfSetpRotateCW+0x9e2>
    365a:	9c 83       	std	Y+4, r25	; 0x04
    365c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    365e:	8d 81       	ldd	r24, Y+5	; 0x05
    3660:	9e 81       	ldd	r25, Y+6	; 0x06
    3662:	01 97       	sbiw	r24, 0x01	; 1
    3664:	9e 83       	std	Y+6, r25	; 0x06
    3666:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3668:	8d 81       	ldd	r24, Y+5	; 0x05
    366a:	9e 81       	ldd	r25, Y+6	; 0x06
    366c:	00 97       	sbiw	r24, 0x00	; 0
    366e:	69 f7       	brne	.-38     	; 0x364a <Stepper_voidHalfSetpRotateCW+0x9d6>
    3670:	14 c0       	rjmp	.+40     	; 0x369a <Stepper_voidHalfSetpRotateCW+0xa26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3672:	6f 81       	ldd	r22, Y+7	; 0x07
    3674:	78 85       	ldd	r23, Y+8	; 0x08
    3676:	89 85       	ldd	r24, Y+9	; 0x09
    3678:	9a 85       	ldd	r25, Y+10	; 0x0a
    367a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	9e 83       	std	Y+6, r25	; 0x06
    3684:	8d 83       	std	Y+5, r24	; 0x05
    3686:	8d 81       	ldd	r24, Y+5	; 0x05
    3688:	9e 81       	ldd	r25, Y+6	; 0x06
    368a:	9a 83       	std	Y+2, r25	; 0x02
    368c:	89 83       	std	Y+1, r24	; 0x01
    368e:	89 81       	ldd	r24, Y+1	; 0x01
    3690:	9a 81       	ldd	r25, Y+2	; 0x02
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	f1 f7       	brne	.-4      	; 0x3692 <Stepper_voidHalfSetpRotateCW+0xa1e>
    3696:	9a 83       	std	Y+2, r25	; 0x02
    3698:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    369a:	c0 59       	subi	r28, 0x90	; 144
    369c:	df 4f       	sbci	r29, 0xFF	; 255
    369e:	0f b6       	in	r0, 0x3f	; 63
    36a0:	f8 94       	cli
    36a2:	de bf       	out	0x3e, r29	; 62
    36a4:	0f be       	out	0x3f, r0	; 63
    36a6:	cd bf       	out	0x3d, r28	; 61
    36a8:	cf 91       	pop	r28
    36aa:	df 91       	pop	r29
    36ac:	1f 91       	pop	r17
    36ae:	0f 91       	pop	r16
    36b0:	08 95       	ret

000036b2 <Stepper_voidHalfSetpRotateACW>:

void Stepper_voidHalfSetpRotateACW(void)
{
    36b2:	0f 93       	push	r16
    36b4:	1f 93       	push	r17
    36b6:	df 93       	push	r29
    36b8:	cf 93       	push	r28
    36ba:	cd b7       	in	r28, 0x3d	; 61
    36bc:	de b7       	in	r29, 0x3e	; 62
    36be:	c0 57       	subi	r28, 0x70	; 112
    36c0:	d0 40       	sbci	r29, 0x00	; 0
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	f8 94       	cli
    36c6:	de bf       	out	0x3e, r29	; 62
    36c8:	0f be       	out	0x3f, r0	; 63
    36ca:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,LOW);
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	60 e0       	ldi	r22, 0x00	; 0
    36d0:	40 e0       	ldi	r20, 0x00	; 0
    36d2:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,HIGH);
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	61 e0       	ldi	r22, 0x01	; 1
    36da:	41 e0       	ldi	r20, 0x01	; 1
    36dc:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,HIGH);
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	62 e0       	ldi	r22, 0x02	; 2
    36e4:	41 e0       	ldi	r20, 0x01	; 1
    36e6:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,LOW);
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	63 e0       	ldi	r22, 0x03	; 3
    36ee:	40 e0       	ldi	r20, 0x00	; 0
    36f0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    36f4:	fe 01       	movw	r30, r28
    36f6:	e3 59       	subi	r30, 0x93	; 147
    36f8:	ff 4f       	sbci	r31, 0xFF	; 255
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	a0 e0       	ldi	r26, 0x00	; 0
    3700:	b0 e4       	ldi	r27, 0x40	; 64
    3702:	80 83       	st	Z, r24
    3704:	91 83       	std	Z+1, r25	; 0x01
    3706:	a2 83       	std	Z+2, r26	; 0x02
    3708:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    370a:	8e 01       	movw	r16, r28
    370c:	07 59       	subi	r16, 0x97	; 151
    370e:	1f 4f       	sbci	r17, 0xFF	; 255
    3710:	fe 01       	movw	r30, r28
    3712:	e3 59       	subi	r30, 0x93	; 147
    3714:	ff 4f       	sbci	r31, 0xFF	; 255
    3716:	60 81       	ld	r22, Z
    3718:	71 81       	ldd	r23, Z+1	; 0x01
    371a:	82 81       	ldd	r24, Z+2	; 0x02
    371c:	93 81       	ldd	r25, Z+3	; 0x03
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	4a ef       	ldi	r20, 0xFA	; 250
    3724:	54 e4       	ldi	r21, 0x44	; 68
    3726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    372a:	dc 01       	movw	r26, r24
    372c:	cb 01       	movw	r24, r22
    372e:	f8 01       	movw	r30, r16
    3730:	80 83       	st	Z, r24
    3732:	91 83       	std	Z+1, r25	; 0x01
    3734:	a2 83       	std	Z+2, r26	; 0x02
    3736:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3738:	fe 01       	movw	r30, r28
    373a:	e7 59       	subi	r30, 0x97	; 151
    373c:	ff 4f       	sbci	r31, 0xFF	; 255
    373e:	60 81       	ld	r22, Z
    3740:	71 81       	ldd	r23, Z+1	; 0x01
    3742:	82 81       	ldd	r24, Z+2	; 0x02
    3744:	93 81       	ldd	r25, Z+3	; 0x03
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	40 e8       	ldi	r20, 0x80	; 128
    374c:	5f e3       	ldi	r21, 0x3F	; 63
    374e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3752:	88 23       	and	r24, r24
    3754:	44 f4       	brge	.+16     	; 0x3766 <Stepper_voidHalfSetpRotateACW+0xb4>
		__ticks = 1;
    3756:	fe 01       	movw	r30, r28
    3758:	e9 59       	subi	r30, 0x99	; 153
    375a:	ff 4f       	sbci	r31, 0xFF	; 255
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	91 83       	std	Z+1, r25	; 0x01
    3762:	80 83       	st	Z, r24
    3764:	64 c0       	rjmp	.+200    	; 0x382e <Stepper_voidHalfSetpRotateACW+0x17c>
	else if (__tmp > 65535)
    3766:	fe 01       	movw	r30, r28
    3768:	e7 59       	subi	r30, 0x97	; 151
    376a:	ff 4f       	sbci	r31, 0xFF	; 255
    376c:	60 81       	ld	r22, Z
    376e:	71 81       	ldd	r23, Z+1	; 0x01
    3770:	82 81       	ldd	r24, Z+2	; 0x02
    3772:	93 81       	ldd	r25, Z+3	; 0x03
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	3f ef       	ldi	r19, 0xFF	; 255
    3778:	4f e7       	ldi	r20, 0x7F	; 127
    377a:	57 e4       	ldi	r21, 0x47	; 71
    377c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3780:	18 16       	cp	r1, r24
    3782:	0c f0       	brlt	.+2      	; 0x3786 <Stepper_voidHalfSetpRotateACW+0xd4>
    3784:	43 c0       	rjmp	.+134    	; 0x380c <Stepper_voidHalfSetpRotateACW+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3786:	fe 01       	movw	r30, r28
    3788:	e3 59       	subi	r30, 0x93	; 147
    378a:	ff 4f       	sbci	r31, 0xFF	; 255
    378c:	60 81       	ld	r22, Z
    378e:	71 81       	ldd	r23, Z+1	; 0x01
    3790:	82 81       	ldd	r24, Z+2	; 0x02
    3792:	93 81       	ldd	r25, Z+3	; 0x03
    3794:	20 e0       	ldi	r18, 0x00	; 0
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	40 e2       	ldi	r20, 0x20	; 32
    379a:	51 e4       	ldi	r21, 0x41	; 65
    379c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a0:	dc 01       	movw	r26, r24
    37a2:	cb 01       	movw	r24, r22
    37a4:	8e 01       	movw	r16, r28
    37a6:	09 59       	subi	r16, 0x99	; 153
    37a8:	1f 4f       	sbci	r17, 0xFF	; 255
    37aa:	bc 01       	movw	r22, r24
    37ac:	cd 01       	movw	r24, r26
    37ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	f8 01       	movw	r30, r16
    37b8:	91 83       	std	Z+1, r25	; 0x01
    37ba:	80 83       	st	Z, r24
    37bc:	1f c0       	rjmp	.+62     	; 0x37fc <Stepper_voidHalfSetpRotateACW+0x14a>
    37be:	fe 01       	movw	r30, r28
    37c0:	eb 59       	subi	r30, 0x9B	; 155
    37c2:	ff 4f       	sbci	r31, 0xFF	; 255
    37c4:	88 ec       	ldi	r24, 0xC8	; 200
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	91 83       	std	Z+1, r25	; 0x01
    37ca:	80 83       	st	Z, r24
    37cc:	fe 01       	movw	r30, r28
    37ce:	eb 59       	subi	r30, 0x9B	; 155
    37d0:	ff 4f       	sbci	r31, 0xFF	; 255
    37d2:	80 81       	ld	r24, Z
    37d4:	91 81       	ldd	r25, Z+1	; 0x01
    37d6:	01 97       	sbiw	r24, 0x01	; 1
    37d8:	f1 f7       	brne	.-4      	; 0x37d6 <Stepper_voidHalfSetpRotateACW+0x124>
    37da:	fe 01       	movw	r30, r28
    37dc:	eb 59       	subi	r30, 0x9B	; 155
    37de:	ff 4f       	sbci	r31, 0xFF	; 255
    37e0:	91 83       	std	Z+1, r25	; 0x01
    37e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37e4:	de 01       	movw	r26, r28
    37e6:	a9 59       	subi	r26, 0x99	; 153
    37e8:	bf 4f       	sbci	r27, 0xFF	; 255
    37ea:	fe 01       	movw	r30, r28
    37ec:	e9 59       	subi	r30, 0x99	; 153
    37ee:	ff 4f       	sbci	r31, 0xFF	; 255
    37f0:	80 81       	ld	r24, Z
    37f2:	91 81       	ldd	r25, Z+1	; 0x01
    37f4:	01 97       	sbiw	r24, 0x01	; 1
    37f6:	11 96       	adiw	r26, 0x01	; 1
    37f8:	9c 93       	st	X, r25
    37fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37fc:	fe 01       	movw	r30, r28
    37fe:	e9 59       	subi	r30, 0x99	; 153
    3800:	ff 4f       	sbci	r31, 0xFF	; 255
    3802:	80 81       	ld	r24, Z
    3804:	91 81       	ldd	r25, Z+1	; 0x01
    3806:	00 97       	sbiw	r24, 0x00	; 0
    3808:	d1 f6       	brne	.-76     	; 0x37be <Stepper_voidHalfSetpRotateACW+0x10c>
    380a:	27 c0       	rjmp	.+78     	; 0x385a <Stepper_voidHalfSetpRotateACW+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    380c:	8e 01       	movw	r16, r28
    380e:	09 59       	subi	r16, 0x99	; 153
    3810:	1f 4f       	sbci	r17, 0xFF	; 255
    3812:	fe 01       	movw	r30, r28
    3814:	e7 59       	subi	r30, 0x97	; 151
    3816:	ff 4f       	sbci	r31, 0xFF	; 255
    3818:	60 81       	ld	r22, Z
    381a:	71 81       	ldd	r23, Z+1	; 0x01
    381c:	82 81       	ldd	r24, Z+2	; 0x02
    381e:	93 81       	ldd	r25, Z+3	; 0x03
    3820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3824:	dc 01       	movw	r26, r24
    3826:	cb 01       	movw	r24, r22
    3828:	f8 01       	movw	r30, r16
    382a:	91 83       	std	Z+1, r25	; 0x01
    382c:	80 83       	st	Z, r24
    382e:	de 01       	movw	r26, r28
    3830:	ad 59       	subi	r26, 0x9D	; 157
    3832:	bf 4f       	sbci	r27, 0xFF	; 255
    3834:	fe 01       	movw	r30, r28
    3836:	e9 59       	subi	r30, 0x99	; 153
    3838:	ff 4f       	sbci	r31, 0xFF	; 255
    383a:	80 81       	ld	r24, Z
    383c:	91 81       	ldd	r25, Z+1	; 0x01
    383e:	8d 93       	st	X+, r24
    3840:	9c 93       	st	X, r25
    3842:	fe 01       	movw	r30, r28
    3844:	ed 59       	subi	r30, 0x9D	; 157
    3846:	ff 4f       	sbci	r31, 0xFF	; 255
    3848:	80 81       	ld	r24, Z
    384a:	91 81       	ldd	r25, Z+1	; 0x01
    384c:	01 97       	sbiw	r24, 0x01	; 1
    384e:	f1 f7       	brne	.-4      	; 0x384c <Stepper_voidHalfSetpRotateACW+0x19a>
    3850:	fe 01       	movw	r30, r28
    3852:	ed 59       	subi	r30, 0x9D	; 157
    3854:	ff 4f       	sbci	r31, 0xFF	; 255
    3856:	91 83       	std	Z+1, r25	; 0x01
    3858:	80 83       	st	Z, r24
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,HIGH);
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	60 e0       	ldi	r22, 0x00	; 0
    385e:	41 e0       	ldi	r20, 0x01	; 1
    3860:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,HIGH);
    3864:	81 e0       	ldi	r24, 0x01	; 1
    3866:	61 e0       	ldi	r22, 0x01	; 1
    3868:	41 e0       	ldi	r20, 0x01	; 1
    386a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,HIGH);
    386e:	81 e0       	ldi	r24, 0x01	; 1
    3870:	62 e0       	ldi	r22, 0x02	; 2
    3872:	41 e0       	ldi	r20, 0x01	; 1
    3874:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,LOW);
    3878:	81 e0       	ldi	r24, 0x01	; 1
    387a:	63 e0       	ldi	r22, 0x03	; 3
    387c:	40 e0       	ldi	r20, 0x00	; 0
    387e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    3882:	fe 01       	movw	r30, r28
    3884:	e1 5a       	subi	r30, 0xA1	; 161
    3886:	ff 4f       	sbci	r31, 0xFF	; 255
    3888:	80 e0       	ldi	r24, 0x00	; 0
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	a0 e0       	ldi	r26, 0x00	; 0
    388e:	b0 e4       	ldi	r27, 0x40	; 64
    3890:	80 83       	st	Z, r24
    3892:	91 83       	std	Z+1, r25	; 0x01
    3894:	a2 83       	std	Z+2, r26	; 0x02
    3896:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3898:	8e 01       	movw	r16, r28
    389a:	05 5a       	subi	r16, 0xA5	; 165
    389c:	1f 4f       	sbci	r17, 0xFF	; 255
    389e:	fe 01       	movw	r30, r28
    38a0:	e1 5a       	subi	r30, 0xA1	; 161
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	60 81       	ld	r22, Z
    38a6:	71 81       	ldd	r23, Z+1	; 0x01
    38a8:	82 81       	ldd	r24, Z+2	; 0x02
    38aa:	93 81       	ldd	r25, Z+3	; 0x03
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	4a ef       	ldi	r20, 0xFA	; 250
    38b2:	54 e4       	ldi	r21, 0x44	; 68
    38b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    38bc:	f8 01       	movw	r30, r16
    38be:	80 83       	st	Z, r24
    38c0:	91 83       	std	Z+1, r25	; 0x01
    38c2:	a2 83       	std	Z+2, r26	; 0x02
    38c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38c6:	fe 01       	movw	r30, r28
    38c8:	e5 5a       	subi	r30, 0xA5	; 165
    38ca:	ff 4f       	sbci	r31, 0xFF	; 255
    38cc:	60 81       	ld	r22, Z
    38ce:	71 81       	ldd	r23, Z+1	; 0x01
    38d0:	82 81       	ldd	r24, Z+2	; 0x02
    38d2:	93 81       	ldd	r25, Z+3	; 0x03
    38d4:	20 e0       	ldi	r18, 0x00	; 0
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	40 e8       	ldi	r20, 0x80	; 128
    38da:	5f e3       	ldi	r21, 0x3F	; 63
    38dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38e0:	88 23       	and	r24, r24
    38e2:	44 f4       	brge	.+16     	; 0x38f4 <Stepper_voidHalfSetpRotateACW+0x242>
		__ticks = 1;
    38e4:	fe 01       	movw	r30, r28
    38e6:	e7 5a       	subi	r30, 0xA7	; 167
    38e8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ea:	81 e0       	ldi	r24, 0x01	; 1
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	91 83       	std	Z+1, r25	; 0x01
    38f0:	80 83       	st	Z, r24
    38f2:	64 c0       	rjmp	.+200    	; 0x39bc <Stepper_voidHalfSetpRotateACW+0x30a>
	else if (__tmp > 65535)
    38f4:	fe 01       	movw	r30, r28
    38f6:	e5 5a       	subi	r30, 0xA5	; 165
    38f8:	ff 4f       	sbci	r31, 0xFF	; 255
    38fa:	60 81       	ld	r22, Z
    38fc:	71 81       	ldd	r23, Z+1	; 0x01
    38fe:	82 81       	ldd	r24, Z+2	; 0x02
    3900:	93 81       	ldd	r25, Z+3	; 0x03
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	3f ef       	ldi	r19, 0xFF	; 255
    3906:	4f e7       	ldi	r20, 0x7F	; 127
    3908:	57 e4       	ldi	r21, 0x47	; 71
    390a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    390e:	18 16       	cp	r1, r24
    3910:	0c f0       	brlt	.+2      	; 0x3914 <Stepper_voidHalfSetpRotateACW+0x262>
    3912:	43 c0       	rjmp	.+134    	; 0x399a <Stepper_voidHalfSetpRotateACW+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3914:	fe 01       	movw	r30, r28
    3916:	e1 5a       	subi	r30, 0xA1	; 161
    3918:	ff 4f       	sbci	r31, 0xFF	; 255
    391a:	60 81       	ld	r22, Z
    391c:	71 81       	ldd	r23, Z+1	; 0x01
    391e:	82 81       	ldd	r24, Z+2	; 0x02
    3920:	93 81       	ldd	r25, Z+3	; 0x03
    3922:	20 e0       	ldi	r18, 0x00	; 0
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	40 e2       	ldi	r20, 0x20	; 32
    3928:	51 e4       	ldi	r21, 0x41	; 65
    392a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392e:	dc 01       	movw	r26, r24
    3930:	cb 01       	movw	r24, r22
    3932:	8e 01       	movw	r16, r28
    3934:	07 5a       	subi	r16, 0xA7	; 167
    3936:	1f 4f       	sbci	r17, 0xFF	; 255
    3938:	bc 01       	movw	r22, r24
    393a:	cd 01       	movw	r24, r26
    393c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3940:	dc 01       	movw	r26, r24
    3942:	cb 01       	movw	r24, r22
    3944:	f8 01       	movw	r30, r16
    3946:	91 83       	std	Z+1, r25	; 0x01
    3948:	80 83       	st	Z, r24
    394a:	1f c0       	rjmp	.+62     	; 0x398a <Stepper_voidHalfSetpRotateACW+0x2d8>
    394c:	fe 01       	movw	r30, r28
    394e:	e9 5a       	subi	r30, 0xA9	; 169
    3950:	ff 4f       	sbci	r31, 0xFF	; 255
    3952:	88 ec       	ldi	r24, 0xC8	; 200
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	91 83       	std	Z+1, r25	; 0x01
    3958:	80 83       	st	Z, r24
    395a:	fe 01       	movw	r30, r28
    395c:	e9 5a       	subi	r30, 0xA9	; 169
    395e:	ff 4f       	sbci	r31, 0xFF	; 255
    3960:	80 81       	ld	r24, Z
    3962:	91 81       	ldd	r25, Z+1	; 0x01
    3964:	01 97       	sbiw	r24, 0x01	; 1
    3966:	f1 f7       	brne	.-4      	; 0x3964 <Stepper_voidHalfSetpRotateACW+0x2b2>
    3968:	fe 01       	movw	r30, r28
    396a:	e9 5a       	subi	r30, 0xA9	; 169
    396c:	ff 4f       	sbci	r31, 0xFF	; 255
    396e:	91 83       	std	Z+1, r25	; 0x01
    3970:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3972:	de 01       	movw	r26, r28
    3974:	a7 5a       	subi	r26, 0xA7	; 167
    3976:	bf 4f       	sbci	r27, 0xFF	; 255
    3978:	fe 01       	movw	r30, r28
    397a:	e7 5a       	subi	r30, 0xA7	; 167
    397c:	ff 4f       	sbci	r31, 0xFF	; 255
    397e:	80 81       	ld	r24, Z
    3980:	91 81       	ldd	r25, Z+1	; 0x01
    3982:	01 97       	sbiw	r24, 0x01	; 1
    3984:	11 96       	adiw	r26, 0x01	; 1
    3986:	9c 93       	st	X, r25
    3988:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    398a:	fe 01       	movw	r30, r28
    398c:	e7 5a       	subi	r30, 0xA7	; 167
    398e:	ff 4f       	sbci	r31, 0xFF	; 255
    3990:	80 81       	ld	r24, Z
    3992:	91 81       	ldd	r25, Z+1	; 0x01
    3994:	00 97       	sbiw	r24, 0x00	; 0
    3996:	d1 f6       	brne	.-76     	; 0x394c <Stepper_voidHalfSetpRotateACW+0x29a>
    3998:	27 c0       	rjmp	.+78     	; 0x39e8 <Stepper_voidHalfSetpRotateACW+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    399a:	8e 01       	movw	r16, r28
    399c:	07 5a       	subi	r16, 0xA7	; 167
    399e:	1f 4f       	sbci	r17, 0xFF	; 255
    39a0:	fe 01       	movw	r30, r28
    39a2:	e5 5a       	subi	r30, 0xA5	; 165
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	60 81       	ld	r22, Z
    39a8:	71 81       	ldd	r23, Z+1	; 0x01
    39aa:	82 81       	ldd	r24, Z+2	; 0x02
    39ac:	93 81       	ldd	r25, Z+3	; 0x03
    39ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	f8 01       	movw	r30, r16
    39b8:	91 83       	std	Z+1, r25	; 0x01
    39ba:	80 83       	st	Z, r24
    39bc:	de 01       	movw	r26, r28
    39be:	ab 5a       	subi	r26, 0xAB	; 171
    39c0:	bf 4f       	sbci	r27, 0xFF	; 255
    39c2:	fe 01       	movw	r30, r28
    39c4:	e7 5a       	subi	r30, 0xA7	; 167
    39c6:	ff 4f       	sbci	r31, 0xFF	; 255
    39c8:	80 81       	ld	r24, Z
    39ca:	91 81       	ldd	r25, Z+1	; 0x01
    39cc:	8d 93       	st	X+, r24
    39ce:	9c 93       	st	X, r25
    39d0:	fe 01       	movw	r30, r28
    39d2:	eb 5a       	subi	r30, 0xAB	; 171
    39d4:	ff 4f       	sbci	r31, 0xFF	; 255
    39d6:	80 81       	ld	r24, Z
    39d8:	91 81       	ldd	r25, Z+1	; 0x01
    39da:	01 97       	sbiw	r24, 0x01	; 1
    39dc:	f1 f7       	brne	.-4      	; 0x39da <Stepper_voidHalfSetpRotateACW+0x328>
    39de:	fe 01       	movw	r30, r28
    39e0:	eb 5a       	subi	r30, 0xAB	; 171
    39e2:	ff 4f       	sbci	r31, 0xFF	; 255
    39e4:	91 83       	std	Z+1, r25	; 0x01
    39e6:	80 83       	st	Z, r24
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,HIGH);
    39e8:	81 e0       	ldi	r24, 0x01	; 1
    39ea:	60 e0       	ldi	r22, 0x00	; 0
    39ec:	41 e0       	ldi	r20, 0x01	; 1
    39ee:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,HIGH);
    39f2:	81 e0       	ldi	r24, 0x01	; 1
    39f4:	61 e0       	ldi	r22, 0x01	; 1
    39f6:	41 e0       	ldi	r20, 0x01	; 1
    39f8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,LOW);
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	62 e0       	ldi	r22, 0x02	; 2
    3a00:	40 e0       	ldi	r20, 0x00	; 0
    3a02:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,LOW);
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	63 e0       	ldi	r22, 0x03	; 3
    3a0a:	40 e0       	ldi	r20, 0x00	; 0
    3a0c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    3a10:	fe 01       	movw	r30, r28
    3a12:	ef 5a       	subi	r30, 0xAF	; 175
    3a14:	ff 4f       	sbci	r31, 0xFF	; 255
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	a0 e0       	ldi	r26, 0x00	; 0
    3a1c:	b0 e4       	ldi	r27, 0x40	; 64
    3a1e:	80 83       	st	Z, r24
    3a20:	91 83       	std	Z+1, r25	; 0x01
    3a22:	a2 83       	std	Z+2, r26	; 0x02
    3a24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a26:	8e 01       	movw	r16, r28
    3a28:	03 5b       	subi	r16, 0xB3	; 179
    3a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a2c:	fe 01       	movw	r30, r28
    3a2e:	ef 5a       	subi	r30, 0xAF	; 175
    3a30:	ff 4f       	sbci	r31, 0xFF	; 255
    3a32:	60 81       	ld	r22, Z
    3a34:	71 81       	ldd	r23, Z+1	; 0x01
    3a36:	82 81       	ldd	r24, Z+2	; 0x02
    3a38:	93 81       	ldd	r25, Z+3	; 0x03
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	4a ef       	ldi	r20, 0xFA	; 250
    3a40:	54 e4       	ldi	r21, 0x44	; 68
    3a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	f8 01       	movw	r30, r16
    3a4c:	80 83       	st	Z, r24
    3a4e:	91 83       	std	Z+1, r25	; 0x01
    3a50:	a2 83       	std	Z+2, r26	; 0x02
    3a52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a54:	fe 01       	movw	r30, r28
    3a56:	e3 5b       	subi	r30, 0xB3	; 179
    3a58:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5a:	60 81       	ld	r22, Z
    3a5c:	71 81       	ldd	r23, Z+1	; 0x01
    3a5e:	82 81       	ldd	r24, Z+2	; 0x02
    3a60:	93 81       	ldd	r25, Z+3	; 0x03
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	40 e8       	ldi	r20, 0x80	; 128
    3a68:	5f e3       	ldi	r21, 0x3F	; 63
    3a6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a6e:	88 23       	and	r24, r24
    3a70:	44 f4       	brge	.+16     	; 0x3a82 <Stepper_voidHalfSetpRotateACW+0x3d0>
		__ticks = 1;
    3a72:	fe 01       	movw	r30, r28
    3a74:	e5 5b       	subi	r30, 0xB5	; 181
    3a76:	ff 4f       	sbci	r31, 0xFF	; 255
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	91 83       	std	Z+1, r25	; 0x01
    3a7e:	80 83       	st	Z, r24
    3a80:	64 c0       	rjmp	.+200    	; 0x3b4a <Stepper_voidHalfSetpRotateACW+0x498>
	else if (__tmp > 65535)
    3a82:	fe 01       	movw	r30, r28
    3a84:	e3 5b       	subi	r30, 0xB3	; 179
    3a86:	ff 4f       	sbci	r31, 0xFF	; 255
    3a88:	60 81       	ld	r22, Z
    3a8a:	71 81       	ldd	r23, Z+1	; 0x01
    3a8c:	82 81       	ldd	r24, Z+2	; 0x02
    3a8e:	93 81       	ldd	r25, Z+3	; 0x03
    3a90:	20 e0       	ldi	r18, 0x00	; 0
    3a92:	3f ef       	ldi	r19, 0xFF	; 255
    3a94:	4f e7       	ldi	r20, 0x7F	; 127
    3a96:	57 e4       	ldi	r21, 0x47	; 71
    3a98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a9c:	18 16       	cp	r1, r24
    3a9e:	0c f0       	brlt	.+2      	; 0x3aa2 <Stepper_voidHalfSetpRotateACW+0x3f0>
    3aa0:	43 c0       	rjmp	.+134    	; 0x3b28 <Stepper_voidHalfSetpRotateACW+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aa2:	fe 01       	movw	r30, r28
    3aa4:	ef 5a       	subi	r30, 0xAF	; 175
    3aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa8:	60 81       	ld	r22, Z
    3aaa:	71 81       	ldd	r23, Z+1	; 0x01
    3aac:	82 81       	ldd	r24, Z+2	; 0x02
    3aae:	93 81       	ldd	r25, Z+3	; 0x03
    3ab0:	20 e0       	ldi	r18, 0x00	; 0
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	40 e2       	ldi	r20, 0x20	; 32
    3ab6:	51 e4       	ldi	r21, 0x41	; 65
    3ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3abc:	dc 01       	movw	r26, r24
    3abe:	cb 01       	movw	r24, r22
    3ac0:	8e 01       	movw	r16, r28
    3ac2:	05 5b       	subi	r16, 0xB5	; 181
    3ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac6:	bc 01       	movw	r22, r24
    3ac8:	cd 01       	movw	r24, r26
    3aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ace:	dc 01       	movw	r26, r24
    3ad0:	cb 01       	movw	r24, r22
    3ad2:	f8 01       	movw	r30, r16
    3ad4:	91 83       	std	Z+1, r25	; 0x01
    3ad6:	80 83       	st	Z, r24
    3ad8:	1f c0       	rjmp	.+62     	; 0x3b18 <Stepper_voidHalfSetpRotateACW+0x466>
    3ada:	fe 01       	movw	r30, r28
    3adc:	e7 5b       	subi	r30, 0xB7	; 183
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	88 ec       	ldi	r24, 0xC8	; 200
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	91 83       	std	Z+1, r25	; 0x01
    3ae6:	80 83       	st	Z, r24
    3ae8:	fe 01       	movw	r30, r28
    3aea:	e7 5b       	subi	r30, 0xB7	; 183
    3aec:	ff 4f       	sbci	r31, 0xFF	; 255
    3aee:	80 81       	ld	r24, Z
    3af0:	91 81       	ldd	r25, Z+1	; 0x01
    3af2:	01 97       	sbiw	r24, 0x01	; 1
    3af4:	f1 f7       	brne	.-4      	; 0x3af2 <Stepper_voidHalfSetpRotateACW+0x440>
    3af6:	fe 01       	movw	r30, r28
    3af8:	e7 5b       	subi	r30, 0xB7	; 183
    3afa:	ff 4f       	sbci	r31, 0xFF	; 255
    3afc:	91 83       	std	Z+1, r25	; 0x01
    3afe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b00:	de 01       	movw	r26, r28
    3b02:	a5 5b       	subi	r26, 0xB5	; 181
    3b04:	bf 4f       	sbci	r27, 0xFF	; 255
    3b06:	fe 01       	movw	r30, r28
    3b08:	e5 5b       	subi	r30, 0xB5	; 181
    3b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0c:	80 81       	ld	r24, Z
    3b0e:	91 81       	ldd	r25, Z+1	; 0x01
    3b10:	01 97       	sbiw	r24, 0x01	; 1
    3b12:	11 96       	adiw	r26, 0x01	; 1
    3b14:	9c 93       	st	X, r25
    3b16:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b18:	fe 01       	movw	r30, r28
    3b1a:	e5 5b       	subi	r30, 0xB5	; 181
    3b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1e:	80 81       	ld	r24, Z
    3b20:	91 81       	ldd	r25, Z+1	; 0x01
    3b22:	00 97       	sbiw	r24, 0x00	; 0
    3b24:	d1 f6       	brne	.-76     	; 0x3ada <Stepper_voidHalfSetpRotateACW+0x428>
    3b26:	27 c0       	rjmp	.+78     	; 0x3b76 <Stepper_voidHalfSetpRotateACW+0x4c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b28:	8e 01       	movw	r16, r28
    3b2a:	05 5b       	subi	r16, 0xB5	; 181
    3b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b2e:	fe 01       	movw	r30, r28
    3b30:	e3 5b       	subi	r30, 0xB3	; 179
    3b32:	ff 4f       	sbci	r31, 0xFF	; 255
    3b34:	60 81       	ld	r22, Z
    3b36:	71 81       	ldd	r23, Z+1	; 0x01
    3b38:	82 81       	ldd	r24, Z+2	; 0x02
    3b3a:	93 81       	ldd	r25, Z+3	; 0x03
    3b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	f8 01       	movw	r30, r16
    3b46:	91 83       	std	Z+1, r25	; 0x01
    3b48:	80 83       	st	Z, r24
    3b4a:	de 01       	movw	r26, r28
    3b4c:	a9 5b       	subi	r26, 0xB9	; 185
    3b4e:	bf 4f       	sbci	r27, 0xFF	; 255
    3b50:	fe 01       	movw	r30, r28
    3b52:	e5 5b       	subi	r30, 0xB5	; 181
    3b54:	ff 4f       	sbci	r31, 0xFF	; 255
    3b56:	80 81       	ld	r24, Z
    3b58:	91 81       	ldd	r25, Z+1	; 0x01
    3b5a:	8d 93       	st	X+, r24
    3b5c:	9c 93       	st	X, r25
    3b5e:	fe 01       	movw	r30, r28
    3b60:	e9 5b       	subi	r30, 0xB9	; 185
    3b62:	ff 4f       	sbci	r31, 0xFF	; 255
    3b64:	80 81       	ld	r24, Z
    3b66:	91 81       	ldd	r25, Z+1	; 0x01
    3b68:	01 97       	sbiw	r24, 0x01	; 1
    3b6a:	f1 f7       	brne	.-4      	; 0x3b68 <Stepper_voidHalfSetpRotateACW+0x4b6>
    3b6c:	fe 01       	movw	r30, r28
    3b6e:	e9 5b       	subi	r30, 0xB9	; 185
    3b70:	ff 4f       	sbci	r31, 0xFF	; 255
    3b72:	91 83       	std	Z+1, r25	; 0x01
    3b74:	80 83       	st	Z, r24
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,HIGH);
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	60 e0       	ldi	r22, 0x00	; 0
    3b7a:	41 e0       	ldi	r20, 0x01	; 1
    3b7c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,HIGH);
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    3b82:	61 e0       	ldi	r22, 0x01	; 1
    3b84:	41 e0       	ldi	r20, 0x01	; 1
    3b86:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,LOW);
    3b8a:	81 e0       	ldi	r24, 0x01	; 1
    3b8c:	62 e0       	ldi	r22, 0x02	; 2
    3b8e:	40 e0       	ldi	r20, 0x00	; 0
    3b90:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,HIGH);
    3b94:	81 e0       	ldi	r24, 0x01	; 1
    3b96:	63 e0       	ldi	r22, 0x03	; 3
    3b98:	41 e0       	ldi	r20, 0x01	; 1
    3b9a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    3b9e:	fe 01       	movw	r30, r28
    3ba0:	ed 5b       	subi	r30, 0xBD	; 189
    3ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba4:	80 e0       	ldi	r24, 0x00	; 0
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	a0 e0       	ldi	r26, 0x00	; 0
    3baa:	b0 e4       	ldi	r27, 0x40	; 64
    3bac:	80 83       	st	Z, r24
    3bae:	91 83       	std	Z+1, r25	; 0x01
    3bb0:	a2 83       	std	Z+2, r26	; 0x02
    3bb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bb4:	8e 01       	movw	r16, r28
    3bb6:	01 5c       	subi	r16, 0xC1	; 193
    3bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bba:	fe 01       	movw	r30, r28
    3bbc:	ed 5b       	subi	r30, 0xBD	; 189
    3bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc0:	60 81       	ld	r22, Z
    3bc2:	71 81       	ldd	r23, Z+1	; 0x01
    3bc4:	82 81       	ldd	r24, Z+2	; 0x02
    3bc6:	93 81       	ldd	r25, Z+3	; 0x03
    3bc8:	20 e0       	ldi	r18, 0x00	; 0
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	4a ef       	ldi	r20, 0xFA	; 250
    3bce:	54 e4       	ldi	r21, 0x44	; 68
    3bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	cb 01       	movw	r24, r22
    3bd8:	f8 01       	movw	r30, r16
    3bda:	80 83       	st	Z, r24
    3bdc:	91 83       	std	Z+1, r25	; 0x01
    3bde:	a2 83       	std	Z+2, r26	; 0x02
    3be0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3be2:	fe 01       	movw	r30, r28
    3be4:	ff 96       	adiw	r30, 0x3f	; 63
    3be6:	60 81       	ld	r22, Z
    3be8:	71 81       	ldd	r23, Z+1	; 0x01
    3bea:	82 81       	ldd	r24, Z+2	; 0x02
    3bec:	93 81       	ldd	r25, Z+3	; 0x03
    3bee:	20 e0       	ldi	r18, 0x00	; 0
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	40 e8       	ldi	r20, 0x80	; 128
    3bf4:	5f e3       	ldi	r21, 0x3F	; 63
    3bf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bfa:	88 23       	and	r24, r24
    3bfc:	2c f4       	brge	.+10     	; 0x3c08 <Stepper_voidHalfSetpRotateACW+0x556>
		__ticks = 1;
    3bfe:	81 e0       	ldi	r24, 0x01	; 1
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	9e af       	std	Y+62, r25	; 0x3e
    3c04:	8d af       	std	Y+61, r24	; 0x3d
    3c06:	46 c0       	rjmp	.+140    	; 0x3c94 <Stepper_voidHalfSetpRotateACW+0x5e2>
	else if (__tmp > 65535)
    3c08:	fe 01       	movw	r30, r28
    3c0a:	ff 96       	adiw	r30, 0x3f	; 63
    3c0c:	60 81       	ld	r22, Z
    3c0e:	71 81       	ldd	r23, Z+1	; 0x01
    3c10:	82 81       	ldd	r24, Z+2	; 0x02
    3c12:	93 81       	ldd	r25, Z+3	; 0x03
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	3f ef       	ldi	r19, 0xFF	; 255
    3c18:	4f e7       	ldi	r20, 0x7F	; 127
    3c1a:	57 e4       	ldi	r21, 0x47	; 71
    3c1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c20:	18 16       	cp	r1, r24
    3c22:	64 f5       	brge	.+88     	; 0x3c7c <Stepper_voidHalfSetpRotateACW+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c24:	fe 01       	movw	r30, r28
    3c26:	ed 5b       	subi	r30, 0xBD	; 189
    3c28:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2a:	60 81       	ld	r22, Z
    3c2c:	71 81       	ldd	r23, Z+1	; 0x01
    3c2e:	82 81       	ldd	r24, Z+2	; 0x02
    3c30:	93 81       	ldd	r25, Z+3	; 0x03
    3c32:	20 e0       	ldi	r18, 0x00	; 0
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	40 e2       	ldi	r20, 0x20	; 32
    3c38:	51 e4       	ldi	r21, 0x41	; 65
    3c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c3e:	dc 01       	movw	r26, r24
    3c40:	cb 01       	movw	r24, r22
    3c42:	bc 01       	movw	r22, r24
    3c44:	cd 01       	movw	r24, r26
    3c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	cb 01       	movw	r24, r22
    3c4e:	9e af       	std	Y+62, r25	; 0x3e
    3c50:	8d af       	std	Y+61, r24	; 0x3d
    3c52:	0f c0       	rjmp	.+30     	; 0x3c72 <Stepper_voidHalfSetpRotateACW+0x5c0>
    3c54:	88 ec       	ldi	r24, 0xC8	; 200
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	9c af       	std	Y+60, r25	; 0x3c
    3c5a:	8b af       	std	Y+59, r24	; 0x3b
    3c5c:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c5e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3c60:	01 97       	sbiw	r24, 0x01	; 1
    3c62:	f1 f7       	brne	.-4      	; 0x3c60 <Stepper_voidHalfSetpRotateACW+0x5ae>
    3c64:	9c af       	std	Y+60, r25	; 0x3c
    3c66:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c68:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c6c:	01 97       	sbiw	r24, 0x01	; 1
    3c6e:	9e af       	std	Y+62, r25	; 0x3e
    3c70:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c72:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c74:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c76:	00 97       	sbiw	r24, 0x00	; 0
    3c78:	69 f7       	brne	.-38     	; 0x3c54 <Stepper_voidHalfSetpRotateACW+0x5a2>
    3c7a:	16 c0       	rjmp	.+44     	; 0x3ca8 <Stepper_voidHalfSetpRotateACW+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c7c:	fe 01       	movw	r30, r28
    3c7e:	ff 96       	adiw	r30, 0x3f	; 63
    3c80:	60 81       	ld	r22, Z
    3c82:	71 81       	ldd	r23, Z+1	; 0x01
    3c84:	82 81       	ldd	r24, Z+2	; 0x02
    3c86:	93 81       	ldd	r25, Z+3	; 0x03
    3c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	cb 01       	movw	r24, r22
    3c90:	9e af       	std	Y+62, r25	; 0x3e
    3c92:	8d af       	std	Y+61, r24	; 0x3d
    3c94:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c96:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c98:	9a af       	std	Y+58, r25	; 0x3a
    3c9a:	89 af       	std	Y+57, r24	; 0x39
    3c9c:	89 ad       	ldd	r24, Y+57	; 0x39
    3c9e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3ca0:	01 97       	sbiw	r24, 0x01	; 1
    3ca2:	f1 f7       	brne	.-4      	; 0x3ca0 <Stepper_voidHalfSetpRotateACW+0x5ee>
    3ca4:	9a af       	std	Y+58, r25	; 0x3a
    3ca6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,HIGH);
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	60 e0       	ldi	r22, 0x00	; 0
    3cac:	41 e0       	ldi	r20, 0x01	; 1
    3cae:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,LOW);
    3cb2:	81 e0       	ldi	r24, 0x01	; 1
    3cb4:	61 e0       	ldi	r22, 0x01	; 1
    3cb6:	40 e0       	ldi	r20, 0x00	; 0
    3cb8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,LOW);
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	62 e0       	ldi	r22, 0x02	; 2
    3cc0:	40 e0       	ldi	r20, 0x00	; 0
    3cc2:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,HIGH);
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	63 e0       	ldi	r22, 0x03	; 3
    3cca:	41 e0       	ldi	r20, 0x01	; 1
    3ccc:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    3cd0:	80 e0       	ldi	r24, 0x00	; 0
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	a0 e0       	ldi	r26, 0x00	; 0
    3cd6:	b0 e4       	ldi	r27, 0x40	; 64
    3cd8:	8d ab       	std	Y+53, r24	; 0x35
    3cda:	9e ab       	std	Y+54, r25	; 0x36
    3cdc:	af ab       	std	Y+55, r26	; 0x37
    3cde:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ce0:	6d a9       	ldd	r22, Y+53	; 0x35
    3ce2:	7e a9       	ldd	r23, Y+54	; 0x36
    3ce4:	8f a9       	ldd	r24, Y+55	; 0x37
    3ce6:	98 ad       	ldd	r25, Y+56	; 0x38
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	4a ef       	ldi	r20, 0xFA	; 250
    3cee:	54 e4       	ldi	r21, 0x44	; 68
    3cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	89 ab       	std	Y+49, r24	; 0x31
    3cfa:	9a ab       	std	Y+50, r25	; 0x32
    3cfc:	ab ab       	std	Y+51, r26	; 0x33
    3cfe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d00:	69 a9       	ldd	r22, Y+49	; 0x31
    3d02:	7a a9       	ldd	r23, Y+50	; 0x32
    3d04:	8b a9       	ldd	r24, Y+51	; 0x33
    3d06:	9c a9       	ldd	r25, Y+52	; 0x34
    3d08:	20 e0       	ldi	r18, 0x00	; 0
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	40 e8       	ldi	r20, 0x80	; 128
    3d0e:	5f e3       	ldi	r21, 0x3F	; 63
    3d10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d14:	88 23       	and	r24, r24
    3d16:	2c f4       	brge	.+10     	; 0x3d22 <Stepper_voidHalfSetpRotateACW+0x670>
		__ticks = 1;
    3d18:	81 e0       	ldi	r24, 0x01	; 1
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	98 ab       	std	Y+48, r25	; 0x30
    3d1e:	8f a7       	std	Y+47, r24	; 0x2f
    3d20:	3f c0       	rjmp	.+126    	; 0x3da0 <Stepper_voidHalfSetpRotateACW+0x6ee>
	else if (__tmp > 65535)
    3d22:	69 a9       	ldd	r22, Y+49	; 0x31
    3d24:	7a a9       	ldd	r23, Y+50	; 0x32
    3d26:	8b a9       	ldd	r24, Y+51	; 0x33
    3d28:	9c a9       	ldd	r25, Y+52	; 0x34
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	3f ef       	ldi	r19, 0xFF	; 255
    3d2e:	4f e7       	ldi	r20, 0x7F	; 127
    3d30:	57 e4       	ldi	r21, 0x47	; 71
    3d32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d36:	18 16       	cp	r1, r24
    3d38:	4c f5       	brge	.+82     	; 0x3d8c <Stepper_voidHalfSetpRotateACW+0x6da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d3a:	6d a9       	ldd	r22, Y+53	; 0x35
    3d3c:	7e a9       	ldd	r23, Y+54	; 0x36
    3d3e:	8f a9       	ldd	r24, Y+55	; 0x37
    3d40:	98 ad       	ldd	r25, Y+56	; 0x38
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	40 e2       	ldi	r20, 0x20	; 32
    3d48:	51 e4       	ldi	r21, 0x41	; 65
    3d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	bc 01       	movw	r22, r24
    3d54:	cd 01       	movw	r24, r26
    3d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5a:	dc 01       	movw	r26, r24
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	98 ab       	std	Y+48, r25	; 0x30
    3d60:	8f a7       	std	Y+47, r24	; 0x2f
    3d62:	0f c0       	rjmp	.+30     	; 0x3d82 <Stepper_voidHalfSetpRotateACW+0x6d0>
    3d64:	88 ec       	ldi	r24, 0xC8	; 200
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	9e a7       	std	Y+46, r25	; 0x2e
    3d6a:	8d a7       	std	Y+45, r24	; 0x2d
    3d6c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d6e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d70:	01 97       	sbiw	r24, 0x01	; 1
    3d72:	f1 f7       	brne	.-4      	; 0x3d70 <Stepper_voidHalfSetpRotateACW+0x6be>
    3d74:	9e a7       	std	Y+46, r25	; 0x2e
    3d76:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d78:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d7a:	98 a9       	ldd	r25, Y+48	; 0x30
    3d7c:	01 97       	sbiw	r24, 0x01	; 1
    3d7e:	98 ab       	std	Y+48, r25	; 0x30
    3d80:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d82:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d84:	98 a9       	ldd	r25, Y+48	; 0x30
    3d86:	00 97       	sbiw	r24, 0x00	; 0
    3d88:	69 f7       	brne	.-38     	; 0x3d64 <Stepper_voidHalfSetpRotateACW+0x6b2>
    3d8a:	14 c0       	rjmp	.+40     	; 0x3db4 <Stepper_voidHalfSetpRotateACW+0x702>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d8c:	69 a9       	ldd	r22, Y+49	; 0x31
    3d8e:	7a a9       	ldd	r23, Y+50	; 0x32
    3d90:	8b a9       	ldd	r24, Y+51	; 0x33
    3d92:	9c a9       	ldd	r25, Y+52	; 0x34
    3d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d98:	dc 01       	movw	r26, r24
    3d9a:	cb 01       	movw	r24, r22
    3d9c:	98 ab       	std	Y+48, r25	; 0x30
    3d9e:	8f a7       	std	Y+47, r24	; 0x2f
    3da0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3da2:	98 a9       	ldd	r25, Y+48	; 0x30
    3da4:	9c a7       	std	Y+44, r25	; 0x2c
    3da6:	8b a7       	std	Y+43, r24	; 0x2b
    3da8:	8b a5       	ldd	r24, Y+43	; 0x2b
    3daa:	9c a5       	ldd	r25, Y+44	; 0x2c
    3dac:	01 97       	sbiw	r24, 0x01	; 1
    3dae:	f1 f7       	brne	.-4      	; 0x3dac <Stepper_voidHalfSetpRotateACW+0x6fa>
    3db0:	9c a7       	std	Y+44, r25	; 0x2c
    3db2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,HIGH);
    3db4:	81 e0       	ldi	r24, 0x01	; 1
    3db6:	60 e0       	ldi	r22, 0x00	; 0
    3db8:	41 e0       	ldi	r20, 0x01	; 1
    3dba:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,LOW);
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
    3dc0:	61 e0       	ldi	r22, 0x01	; 1
    3dc2:	40 e0       	ldi	r20, 0x00	; 0
    3dc4:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,HIGH);
    3dc8:	81 e0       	ldi	r24, 0x01	; 1
    3dca:	62 e0       	ldi	r22, 0x02	; 2
    3dcc:	41 e0       	ldi	r20, 0x01	; 1
    3dce:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,HIGH);
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	63 e0       	ldi	r22, 0x03	; 3
    3dd6:	41 e0       	ldi	r20, 0x01	; 1
    3dd8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    3ddc:	80 e0       	ldi	r24, 0x00	; 0
    3dde:	90 e0       	ldi	r25, 0x00	; 0
    3de0:	a0 e0       	ldi	r26, 0x00	; 0
    3de2:	b0 e4       	ldi	r27, 0x40	; 64
    3de4:	8f a3       	std	Y+39, r24	; 0x27
    3de6:	98 a7       	std	Y+40, r25	; 0x28
    3de8:	a9 a7       	std	Y+41, r26	; 0x29
    3dea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dec:	6f a1       	ldd	r22, Y+39	; 0x27
    3dee:	78 a5       	ldd	r23, Y+40	; 0x28
    3df0:	89 a5       	ldd	r24, Y+41	; 0x29
    3df2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3df4:	20 e0       	ldi	r18, 0x00	; 0
    3df6:	30 e0       	ldi	r19, 0x00	; 0
    3df8:	4a ef       	ldi	r20, 0xFA	; 250
    3dfa:	54 e4       	ldi	r21, 0x44	; 68
    3dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e00:	dc 01       	movw	r26, r24
    3e02:	cb 01       	movw	r24, r22
    3e04:	8b a3       	std	Y+35, r24	; 0x23
    3e06:	9c a3       	std	Y+36, r25	; 0x24
    3e08:	ad a3       	std	Y+37, r26	; 0x25
    3e0a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e0c:	6b a1       	ldd	r22, Y+35	; 0x23
    3e0e:	7c a1       	ldd	r23, Y+36	; 0x24
    3e10:	8d a1       	ldd	r24, Y+37	; 0x25
    3e12:	9e a1       	ldd	r25, Y+38	; 0x26
    3e14:	20 e0       	ldi	r18, 0x00	; 0
    3e16:	30 e0       	ldi	r19, 0x00	; 0
    3e18:	40 e8       	ldi	r20, 0x80	; 128
    3e1a:	5f e3       	ldi	r21, 0x3F	; 63
    3e1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e20:	88 23       	and	r24, r24
    3e22:	2c f4       	brge	.+10     	; 0x3e2e <Stepper_voidHalfSetpRotateACW+0x77c>
		__ticks = 1;
    3e24:	81 e0       	ldi	r24, 0x01	; 1
    3e26:	90 e0       	ldi	r25, 0x00	; 0
    3e28:	9a a3       	std	Y+34, r25	; 0x22
    3e2a:	89 a3       	std	Y+33, r24	; 0x21
    3e2c:	3f c0       	rjmp	.+126    	; 0x3eac <Stepper_voidHalfSetpRotateACW+0x7fa>
	else if (__tmp > 65535)
    3e2e:	6b a1       	ldd	r22, Y+35	; 0x23
    3e30:	7c a1       	ldd	r23, Y+36	; 0x24
    3e32:	8d a1       	ldd	r24, Y+37	; 0x25
    3e34:	9e a1       	ldd	r25, Y+38	; 0x26
    3e36:	20 e0       	ldi	r18, 0x00	; 0
    3e38:	3f ef       	ldi	r19, 0xFF	; 255
    3e3a:	4f e7       	ldi	r20, 0x7F	; 127
    3e3c:	57 e4       	ldi	r21, 0x47	; 71
    3e3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e42:	18 16       	cp	r1, r24
    3e44:	4c f5       	brge	.+82     	; 0x3e98 <Stepper_voidHalfSetpRotateACW+0x7e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e46:	6f a1       	ldd	r22, Y+39	; 0x27
    3e48:	78 a5       	ldd	r23, Y+40	; 0x28
    3e4a:	89 a5       	ldd	r24, Y+41	; 0x29
    3e4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e4e:	20 e0       	ldi	r18, 0x00	; 0
    3e50:	30 e0       	ldi	r19, 0x00	; 0
    3e52:	40 e2       	ldi	r20, 0x20	; 32
    3e54:	51 e4       	ldi	r21, 0x41	; 65
    3e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e5a:	dc 01       	movw	r26, r24
    3e5c:	cb 01       	movw	r24, r22
    3e5e:	bc 01       	movw	r22, r24
    3e60:	cd 01       	movw	r24, r26
    3e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e66:	dc 01       	movw	r26, r24
    3e68:	cb 01       	movw	r24, r22
    3e6a:	9a a3       	std	Y+34, r25	; 0x22
    3e6c:	89 a3       	std	Y+33, r24	; 0x21
    3e6e:	0f c0       	rjmp	.+30     	; 0x3e8e <Stepper_voidHalfSetpRotateACW+0x7dc>
    3e70:	88 ec       	ldi	r24, 0xC8	; 200
    3e72:	90 e0       	ldi	r25, 0x00	; 0
    3e74:	98 a3       	std	Y+32, r25	; 0x20
    3e76:	8f 8f       	std	Y+31, r24	; 0x1f
    3e78:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e7a:	98 a1       	ldd	r25, Y+32	; 0x20
    3e7c:	01 97       	sbiw	r24, 0x01	; 1
    3e7e:	f1 f7       	brne	.-4      	; 0x3e7c <Stepper_voidHalfSetpRotateACW+0x7ca>
    3e80:	98 a3       	std	Y+32, r25	; 0x20
    3e82:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e84:	89 a1       	ldd	r24, Y+33	; 0x21
    3e86:	9a a1       	ldd	r25, Y+34	; 0x22
    3e88:	01 97       	sbiw	r24, 0x01	; 1
    3e8a:	9a a3       	std	Y+34, r25	; 0x22
    3e8c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e8e:	89 a1       	ldd	r24, Y+33	; 0x21
    3e90:	9a a1       	ldd	r25, Y+34	; 0x22
    3e92:	00 97       	sbiw	r24, 0x00	; 0
    3e94:	69 f7       	brne	.-38     	; 0x3e70 <Stepper_voidHalfSetpRotateACW+0x7be>
    3e96:	14 c0       	rjmp	.+40     	; 0x3ec0 <Stepper_voidHalfSetpRotateACW+0x80e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e98:	6b a1       	ldd	r22, Y+35	; 0x23
    3e9a:	7c a1       	ldd	r23, Y+36	; 0x24
    3e9c:	8d a1       	ldd	r24, Y+37	; 0x25
    3e9e:	9e a1       	ldd	r25, Y+38	; 0x26
    3ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea4:	dc 01       	movw	r26, r24
    3ea6:	cb 01       	movw	r24, r22
    3ea8:	9a a3       	std	Y+34, r25	; 0x22
    3eaa:	89 a3       	std	Y+33, r24	; 0x21
    3eac:	89 a1       	ldd	r24, Y+33	; 0x21
    3eae:	9a a1       	ldd	r25, Y+34	; 0x22
    3eb0:	9e 8f       	std	Y+30, r25	; 0x1e
    3eb2:	8d 8f       	std	Y+29, r24	; 0x1d
    3eb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3eb6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3eb8:	01 97       	sbiw	r24, 0x01	; 1
    3eba:	f1 f7       	brne	.-4      	; 0x3eb8 <Stepper_voidHalfSetpRotateACW+0x806>
    3ebc:	9e 8f       	std	Y+30, r25	; 0x1e
    3ebe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,LOW);
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	60 e0       	ldi	r22, 0x00	; 0
    3ec4:	40 e0       	ldi	r20, 0x00	; 0
    3ec6:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,LOW);
    3eca:	81 e0       	ldi	r24, 0x01	; 1
    3ecc:	61 e0       	ldi	r22, 0x01	; 1
    3ece:	40 e0       	ldi	r20, 0x00	; 0
    3ed0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,HIGH);
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	62 e0       	ldi	r22, 0x02	; 2
    3ed8:	41 e0       	ldi	r20, 0x01	; 1
    3eda:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,HIGH);
    3ede:	81 e0       	ldi	r24, 0x01	; 1
    3ee0:	63 e0       	ldi	r22, 0x03	; 3
    3ee2:	41 e0       	ldi	r20, 0x01	; 1
    3ee4:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    3ee8:	80 e0       	ldi	r24, 0x00	; 0
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	a0 e0       	ldi	r26, 0x00	; 0
    3eee:	b0 e4       	ldi	r27, 0x40	; 64
    3ef0:	89 8f       	std	Y+25, r24	; 0x19
    3ef2:	9a 8f       	std	Y+26, r25	; 0x1a
    3ef4:	ab 8f       	std	Y+27, r26	; 0x1b
    3ef6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ef8:	69 8d       	ldd	r22, Y+25	; 0x19
    3efa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3efc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3efe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f00:	20 e0       	ldi	r18, 0x00	; 0
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	4a ef       	ldi	r20, 0xFA	; 250
    3f06:	54 e4       	ldi	r21, 0x44	; 68
    3f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f0c:	dc 01       	movw	r26, r24
    3f0e:	cb 01       	movw	r24, r22
    3f10:	8d 8b       	std	Y+21, r24	; 0x15
    3f12:	9e 8b       	std	Y+22, r25	; 0x16
    3f14:	af 8b       	std	Y+23, r26	; 0x17
    3f16:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f18:	6d 89       	ldd	r22, Y+21	; 0x15
    3f1a:	7e 89       	ldd	r23, Y+22	; 0x16
    3f1c:	8f 89       	ldd	r24, Y+23	; 0x17
    3f1e:	98 8d       	ldd	r25, Y+24	; 0x18
    3f20:	20 e0       	ldi	r18, 0x00	; 0
    3f22:	30 e0       	ldi	r19, 0x00	; 0
    3f24:	40 e8       	ldi	r20, 0x80	; 128
    3f26:	5f e3       	ldi	r21, 0x3F	; 63
    3f28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f2c:	88 23       	and	r24, r24
    3f2e:	2c f4       	brge	.+10     	; 0x3f3a <Stepper_voidHalfSetpRotateACW+0x888>
		__ticks = 1;
    3f30:	81 e0       	ldi	r24, 0x01	; 1
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	9c 8b       	std	Y+20, r25	; 0x14
    3f36:	8b 8b       	std	Y+19, r24	; 0x13
    3f38:	3f c0       	rjmp	.+126    	; 0x3fb8 <Stepper_voidHalfSetpRotateACW+0x906>
	else if (__tmp > 65535)
    3f3a:	6d 89       	ldd	r22, Y+21	; 0x15
    3f3c:	7e 89       	ldd	r23, Y+22	; 0x16
    3f3e:	8f 89       	ldd	r24, Y+23	; 0x17
    3f40:	98 8d       	ldd	r25, Y+24	; 0x18
    3f42:	20 e0       	ldi	r18, 0x00	; 0
    3f44:	3f ef       	ldi	r19, 0xFF	; 255
    3f46:	4f e7       	ldi	r20, 0x7F	; 127
    3f48:	57 e4       	ldi	r21, 0x47	; 71
    3f4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f4e:	18 16       	cp	r1, r24
    3f50:	4c f5       	brge	.+82     	; 0x3fa4 <Stepper_voidHalfSetpRotateACW+0x8f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f52:	69 8d       	ldd	r22, Y+25	; 0x19
    3f54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f5a:	20 e0       	ldi	r18, 0x00	; 0
    3f5c:	30 e0       	ldi	r19, 0x00	; 0
    3f5e:	40 e2       	ldi	r20, 0x20	; 32
    3f60:	51 e4       	ldi	r21, 0x41	; 65
    3f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f66:	dc 01       	movw	r26, r24
    3f68:	cb 01       	movw	r24, r22
    3f6a:	bc 01       	movw	r22, r24
    3f6c:	cd 01       	movw	r24, r26
    3f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f72:	dc 01       	movw	r26, r24
    3f74:	cb 01       	movw	r24, r22
    3f76:	9c 8b       	std	Y+20, r25	; 0x14
    3f78:	8b 8b       	std	Y+19, r24	; 0x13
    3f7a:	0f c0       	rjmp	.+30     	; 0x3f9a <Stepper_voidHalfSetpRotateACW+0x8e8>
    3f7c:	88 ec       	ldi	r24, 0xC8	; 200
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	9a 8b       	std	Y+18, r25	; 0x12
    3f82:	89 8b       	std	Y+17, r24	; 0x11
    3f84:	89 89       	ldd	r24, Y+17	; 0x11
    3f86:	9a 89       	ldd	r25, Y+18	; 0x12
    3f88:	01 97       	sbiw	r24, 0x01	; 1
    3f8a:	f1 f7       	brne	.-4      	; 0x3f88 <Stepper_voidHalfSetpRotateACW+0x8d6>
    3f8c:	9a 8b       	std	Y+18, r25	; 0x12
    3f8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f90:	8b 89       	ldd	r24, Y+19	; 0x13
    3f92:	9c 89       	ldd	r25, Y+20	; 0x14
    3f94:	01 97       	sbiw	r24, 0x01	; 1
    3f96:	9c 8b       	std	Y+20, r25	; 0x14
    3f98:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f9a:	8b 89       	ldd	r24, Y+19	; 0x13
    3f9c:	9c 89       	ldd	r25, Y+20	; 0x14
    3f9e:	00 97       	sbiw	r24, 0x00	; 0
    3fa0:	69 f7       	brne	.-38     	; 0x3f7c <Stepper_voidHalfSetpRotateACW+0x8ca>
    3fa2:	14 c0       	rjmp	.+40     	; 0x3fcc <Stepper_voidHalfSetpRotateACW+0x91a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fa4:	6d 89       	ldd	r22, Y+21	; 0x15
    3fa6:	7e 89       	ldd	r23, Y+22	; 0x16
    3fa8:	8f 89       	ldd	r24, Y+23	; 0x17
    3faa:	98 8d       	ldd	r25, Y+24	; 0x18
    3fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb0:	dc 01       	movw	r26, r24
    3fb2:	cb 01       	movw	r24, r22
    3fb4:	9c 8b       	std	Y+20, r25	; 0x14
    3fb6:	8b 8b       	std	Y+19, r24	; 0x13
    3fb8:	8b 89       	ldd	r24, Y+19	; 0x13
    3fba:	9c 89       	ldd	r25, Y+20	; 0x14
    3fbc:	98 8b       	std	Y+16, r25	; 0x10
    3fbe:	8f 87       	std	Y+15, r24	; 0x0f
    3fc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fc2:	98 89       	ldd	r25, Y+16	; 0x10
    3fc4:	01 97       	sbiw	r24, 0x01	; 1
    3fc6:	f1 f7       	brne	.-4      	; 0x3fc4 <Stepper_voidHalfSetpRotateACW+0x912>
    3fc8:	98 8b       	std	Y+16, r25	; 0x10
    3fca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Blue,LOW);
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	60 e0       	ldi	r22, 0x00	; 0
    3fd0:	40 e0       	ldi	r20, 0x00	; 0
    3fd2:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Pink,HIGH);
    3fd6:	81 e0       	ldi	r24, 0x01	; 1
    3fd8:	61 e0       	ldi	r22, 0x01	; 1
    3fda:	41 e0       	ldi	r20, 0x01	; 1
    3fdc:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Yellow,HIGH);
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	62 e0       	ldi	r22, 0x02	; 2
    3fe4:	41 e0       	ldi	r20, 0x01	; 1
    3fe6:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(STEPPER_PORT,Coil_Orange,HIGH);
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	63 e0       	ldi	r22, 0x03	; 3
    3fee:	41 e0       	ldi	r20, 0x01	; 1
    3ff0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    3ff4:	80 e0       	ldi	r24, 0x00	; 0
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	a0 e0       	ldi	r26, 0x00	; 0
    3ffa:	b0 e4       	ldi	r27, 0x40	; 64
    3ffc:	8b 87       	std	Y+11, r24	; 0x0b
    3ffe:	9c 87       	std	Y+12, r25	; 0x0c
    4000:	ad 87       	std	Y+13, r26	; 0x0d
    4002:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4004:	6b 85       	ldd	r22, Y+11	; 0x0b
    4006:	7c 85       	ldd	r23, Y+12	; 0x0c
    4008:	8d 85       	ldd	r24, Y+13	; 0x0d
    400a:	9e 85       	ldd	r25, Y+14	; 0x0e
    400c:	20 e0       	ldi	r18, 0x00	; 0
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	4a ef       	ldi	r20, 0xFA	; 250
    4012:	54 e4       	ldi	r21, 0x44	; 68
    4014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4018:	dc 01       	movw	r26, r24
    401a:	cb 01       	movw	r24, r22
    401c:	8f 83       	std	Y+7, r24	; 0x07
    401e:	98 87       	std	Y+8, r25	; 0x08
    4020:	a9 87       	std	Y+9, r26	; 0x09
    4022:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4024:	6f 81       	ldd	r22, Y+7	; 0x07
    4026:	78 85       	ldd	r23, Y+8	; 0x08
    4028:	89 85       	ldd	r24, Y+9	; 0x09
    402a:	9a 85       	ldd	r25, Y+10	; 0x0a
    402c:	20 e0       	ldi	r18, 0x00	; 0
    402e:	30 e0       	ldi	r19, 0x00	; 0
    4030:	40 e8       	ldi	r20, 0x80	; 128
    4032:	5f e3       	ldi	r21, 0x3F	; 63
    4034:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4038:	88 23       	and	r24, r24
    403a:	2c f4       	brge	.+10     	; 0x4046 <Stepper_voidHalfSetpRotateACW+0x994>
		__ticks = 1;
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	9e 83       	std	Y+6, r25	; 0x06
    4042:	8d 83       	std	Y+5, r24	; 0x05
    4044:	3f c0       	rjmp	.+126    	; 0x40c4 <Stepper_voidHalfSetpRotateACW+0xa12>
	else if (__tmp > 65535)
    4046:	6f 81       	ldd	r22, Y+7	; 0x07
    4048:	78 85       	ldd	r23, Y+8	; 0x08
    404a:	89 85       	ldd	r24, Y+9	; 0x09
    404c:	9a 85       	ldd	r25, Y+10	; 0x0a
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	3f ef       	ldi	r19, 0xFF	; 255
    4052:	4f e7       	ldi	r20, 0x7F	; 127
    4054:	57 e4       	ldi	r21, 0x47	; 71
    4056:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    405a:	18 16       	cp	r1, r24
    405c:	4c f5       	brge	.+82     	; 0x40b0 <Stepper_voidHalfSetpRotateACW+0x9fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    405e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4060:	7c 85       	ldd	r23, Y+12	; 0x0c
    4062:	8d 85       	ldd	r24, Y+13	; 0x0d
    4064:	9e 85       	ldd	r25, Y+14	; 0x0e
    4066:	20 e0       	ldi	r18, 0x00	; 0
    4068:	30 e0       	ldi	r19, 0x00	; 0
    406a:	40 e2       	ldi	r20, 0x20	; 32
    406c:	51 e4       	ldi	r21, 0x41	; 65
    406e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4072:	dc 01       	movw	r26, r24
    4074:	cb 01       	movw	r24, r22
    4076:	bc 01       	movw	r22, r24
    4078:	cd 01       	movw	r24, r26
    407a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    407e:	dc 01       	movw	r26, r24
    4080:	cb 01       	movw	r24, r22
    4082:	9e 83       	std	Y+6, r25	; 0x06
    4084:	8d 83       	std	Y+5, r24	; 0x05
    4086:	0f c0       	rjmp	.+30     	; 0x40a6 <Stepper_voidHalfSetpRotateACW+0x9f4>
    4088:	88 ec       	ldi	r24, 0xC8	; 200
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	9c 83       	std	Y+4, r25	; 0x04
    408e:	8b 83       	std	Y+3, r24	; 0x03
    4090:	8b 81       	ldd	r24, Y+3	; 0x03
    4092:	9c 81       	ldd	r25, Y+4	; 0x04
    4094:	01 97       	sbiw	r24, 0x01	; 1
    4096:	f1 f7       	brne	.-4      	; 0x4094 <Stepper_voidHalfSetpRotateACW+0x9e2>
    4098:	9c 83       	std	Y+4, r25	; 0x04
    409a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    409c:	8d 81       	ldd	r24, Y+5	; 0x05
    409e:	9e 81       	ldd	r25, Y+6	; 0x06
    40a0:	01 97       	sbiw	r24, 0x01	; 1
    40a2:	9e 83       	std	Y+6, r25	; 0x06
    40a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40a6:	8d 81       	ldd	r24, Y+5	; 0x05
    40a8:	9e 81       	ldd	r25, Y+6	; 0x06
    40aa:	00 97       	sbiw	r24, 0x00	; 0
    40ac:	69 f7       	brne	.-38     	; 0x4088 <Stepper_voidHalfSetpRotateACW+0x9d6>
    40ae:	14 c0       	rjmp	.+40     	; 0x40d8 <Stepper_voidHalfSetpRotateACW+0xa26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40b0:	6f 81       	ldd	r22, Y+7	; 0x07
    40b2:	78 85       	ldd	r23, Y+8	; 0x08
    40b4:	89 85       	ldd	r24, Y+9	; 0x09
    40b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    40b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40bc:	dc 01       	movw	r26, r24
    40be:	cb 01       	movw	r24, r22
    40c0:	9e 83       	std	Y+6, r25	; 0x06
    40c2:	8d 83       	std	Y+5, r24	; 0x05
    40c4:	8d 81       	ldd	r24, Y+5	; 0x05
    40c6:	9e 81       	ldd	r25, Y+6	; 0x06
    40c8:	9a 83       	std	Y+2, r25	; 0x02
    40ca:	89 83       	std	Y+1, r24	; 0x01
    40cc:	89 81       	ldd	r24, Y+1	; 0x01
    40ce:	9a 81       	ldd	r25, Y+2	; 0x02
    40d0:	01 97       	sbiw	r24, 0x01	; 1
    40d2:	f1 f7       	brne	.-4      	; 0x40d0 <Stepper_voidHalfSetpRotateACW+0xa1e>
    40d4:	9a 83       	std	Y+2, r25	; 0x02
    40d6:	89 83       	std	Y+1, r24	; 0x01





}
    40d8:	c0 59       	subi	r28, 0x90	; 144
    40da:	df 4f       	sbci	r29, 0xFF	; 255
    40dc:	0f b6       	in	r0, 0x3f	; 63
    40de:	f8 94       	cli
    40e0:	de bf       	out	0x3e, r29	; 62
    40e2:	0f be       	out	0x3f, r0	; 63
    40e4:	cd bf       	out	0x3d, r28	; 61
    40e6:	cf 91       	pop	r28
    40e8:	df 91       	pop	r29
    40ea:	1f 91       	pop	r17
    40ec:	0f 91       	pop	r16
    40ee:	08 95       	ret

000040f0 <SERVO_voidInit>:
#include "SERVO_Private.h"



void SERVO_voidInit(void)
{
    40f0:	df 93       	push	r29
    40f2:	cf 93       	push	r28
    40f4:	cd b7       	in	r28, 0x3d	; 61
    40f6:	de b7       	in	r29, 0x3e	; 62
	TIMER1_voidInit();
    40f8:	0e 94 81 07 	call	0xf02	; 0xf02 <TIMER1_voidInit>
	DIO_voidSetPinDirection(SERVO_PORT,SERVO_PIN,OUTPUT);
    40fc:	83 e0       	ldi	r24, 0x03	; 3
    40fe:	65 e0       	ldi	r22, 0x05	; 5
    4100:	41 e0       	ldi	r20, 0x01	; 1
    4102:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>


}
    4106:	cf 91       	pop	r28
    4108:	df 91       	pop	r29
    410a:	08 95       	ret

0000410c <SERVO_voidRotate>:

void SERVO_voidRotate(u8 Copy_u8Angle)
{
    410c:	df 93       	push	r29
    410e:	cf 93       	push	r28
    4110:	00 d0       	rcall	.+0      	; 0x4112 <SERVO_voidRotate+0x6>
    4112:	0f 92       	push	r0
    4114:	cd b7       	in	r28, 0x3d	; 61
    4116:	de b7       	in	r29, 0x3e	; 62
    4118:	8b 83       	std	Y+3, r24	; 0x03
	TIMER1_voidSetTopValue(20000);
    411a:	80 e2       	ldi	r24, 0x20	; 32
    411c:	9e e4       	ldi	r25, 0x4E	; 78
    411e:	0e 94 1c 08 	call	0x1038	; 0x1038 <TIMER1_voidSetTopValue>
	TIMER1_voidFastPWMNonIntvered(TIMER_CHANNELA ,PRESCALAR_8_CLOCK);
    4122:	80 e0       	ldi	r24, 0x00	; 0
    4124:	62 e0       	ldi	r22, 0x02	; 2
    4126:	0e 94 a4 07 	call	0xf48	; 0xf48 <TIMER1_voidFastPWMNonIntvered>

	u16 Local_u8Angle =((u16)(Copy_u8Angle*10))+750 ;
    412a:	8b 81       	ldd	r24, Y+3	; 0x03
    412c:	88 2f       	mov	r24, r24
    412e:	90 e0       	ldi	r25, 0x00	; 0
    4130:	9c 01       	movw	r18, r24
    4132:	22 0f       	add	r18, r18
    4134:	33 1f       	adc	r19, r19
    4136:	c9 01       	movw	r24, r18
    4138:	88 0f       	add	r24, r24
    413a:	99 1f       	adc	r25, r25
    413c:	88 0f       	add	r24, r24
    413e:	99 1f       	adc	r25, r25
    4140:	82 0f       	add	r24, r18
    4142:	93 1f       	adc	r25, r19
    4144:	82 51       	subi	r24, 0x12	; 18
    4146:	9d 4f       	sbci	r25, 0xFD	; 253
    4148:	9a 83       	std	Y+2, r25	; 0x02
    414a:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_voidSetDutyCycle(TIMER_CHANNELA ,Local_u8Angle);
    414c:	29 81       	ldd	r18, Y+1	; 0x01
    414e:	3a 81       	ldd	r19, Y+2	; 0x02
    4150:	80 e0       	ldi	r24, 0x00	; 0
    4152:	b9 01       	movw	r22, r18
    4154:	0e 94 ee 07 	call	0xfdc	; 0xfdc <TIMER1_voidSetDutyCycle>

}
    4158:	0f 90       	pop	r0
    415a:	0f 90       	pop	r0
    415c:	0f 90       	pop	r0
    415e:	cf 91       	pop	r28
    4160:	df 91       	pop	r29
    4162:	08 95       	ret

00004164 <LED_voidLedInit>:
#include "../../LIB/STD_TYPES.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "LED_Interface.h"

void LED_voidLedInit            (u8 Copy_u8PORT , u8 Copy_u8PIN)
{
    4164:	df 93       	push	r29
    4166:	cf 93       	push	r28
    4168:	00 d0       	rcall	.+0      	; 0x416a <LED_voidLedInit+0x6>
    416a:	00 d0       	rcall	.+0      	; 0x416c <LED_voidLedInit+0x8>
    416c:	cd b7       	in	r28, 0x3d	; 61
    416e:	de b7       	in	r29, 0x3e	; 62
    4170:	89 83       	std	Y+1, r24	; 0x01
    4172:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PORT)
    4174:	89 81       	ldd	r24, Y+1	; 0x01
    4176:	28 2f       	mov	r18, r24
    4178:	30 e0       	ldi	r19, 0x00	; 0
    417a:	3c 83       	std	Y+4, r19	; 0x04
    417c:	2b 83       	std	Y+3, r18	; 0x03
    417e:	8b 81       	ldd	r24, Y+3	; 0x03
    4180:	9c 81       	ldd	r25, Y+4	; 0x04
    4182:	81 30       	cpi	r24, 0x01	; 1
    4184:	91 05       	cpc	r25, r1
    4186:	d9 f0       	breq	.+54     	; 0x41be <LED_voidLedInit+0x5a>
    4188:	2b 81       	ldd	r18, Y+3	; 0x03
    418a:	3c 81       	ldd	r19, Y+4	; 0x04
    418c:	22 30       	cpi	r18, 0x02	; 2
    418e:	31 05       	cpc	r19, r1
    4190:	2c f4       	brge	.+10     	; 0x419c <LED_voidLedInit+0x38>
    4192:	8b 81       	ldd	r24, Y+3	; 0x03
    4194:	9c 81       	ldd	r25, Y+4	; 0x04
    4196:	00 97       	sbiw	r24, 0x00	; 0
    4198:	61 f0       	breq	.+24     	; 0x41b2 <LED_voidLedInit+0x4e>
    419a:	22 c0       	rjmp	.+68     	; 0x41e0 <LED_voidLedInit+0x7c>
    419c:	2b 81       	ldd	r18, Y+3	; 0x03
    419e:	3c 81       	ldd	r19, Y+4	; 0x04
    41a0:	22 30       	cpi	r18, 0x02	; 2
    41a2:	31 05       	cpc	r19, r1
    41a4:	91 f0       	breq	.+36     	; 0x41ca <LED_voidLedInit+0x66>
    41a6:	8b 81       	ldd	r24, Y+3	; 0x03
    41a8:	9c 81       	ldd	r25, Y+4	; 0x04
    41aa:	83 30       	cpi	r24, 0x03	; 3
    41ac:	91 05       	cpc	r25, r1
    41ae:	99 f0       	breq	.+38     	; 0x41d6 <LED_voidLedInit+0x72>
    41b0:	17 c0       	rjmp	.+46     	; 0x41e0 <LED_voidLedInit+0x7c>
	{
	{
	case PORTA : DIO_voidSetPinDirection(PORTA,Copy_u8PIN,OUTPUT);break;
    41b2:	80 e0       	ldi	r24, 0x00	; 0
    41b4:	6a 81       	ldd	r22, Y+2	; 0x02
    41b6:	41 e0       	ldi	r20, 0x01	; 1
    41b8:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>
    41bc:	11 c0       	rjmp	.+34     	; 0x41e0 <LED_voidLedInit+0x7c>
	case PORTB : DIO_voidSetPinDirection(PORTB,Copy_u8PIN,OUTPUT);break;
    41be:	81 e0       	ldi	r24, 0x01	; 1
    41c0:	6a 81       	ldd	r22, Y+2	; 0x02
    41c2:	41 e0       	ldi	r20, 0x01	; 1
    41c4:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>
    41c8:	0b c0       	rjmp	.+22     	; 0x41e0 <LED_voidLedInit+0x7c>
	case PORTC : DIO_voidSetPinDirection(PORTC,Copy_u8PIN,OUTPUT);break;
    41ca:	82 e0       	ldi	r24, 0x02	; 2
    41cc:	6a 81       	ldd	r22, Y+2	; 0x02
    41ce:	41 e0       	ldi	r20, 0x01	; 1
    41d0:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>
    41d4:	05 c0       	rjmp	.+10     	; 0x41e0 <LED_voidLedInit+0x7c>
	case PORTD : DIO_voidSetPinDirection(PORTD,Copy_u8PIN,OUTPUT);break;
    41d6:	83 e0       	ldi	r24, 0x03	; 3
    41d8:	6a 81       	ldd	r22, Y+2	; 0x02
    41da:	41 e0       	ldi	r20, 0x01	; 1
    41dc:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>
	}
}
}
    41e0:	0f 90       	pop	r0
    41e2:	0f 90       	pop	r0
    41e4:	0f 90       	pop	r0
    41e6:	0f 90       	pop	r0
    41e8:	cf 91       	pop	r28
    41ea:	df 91       	pop	r29
    41ec:	08 95       	ret

000041ee <LED_voidPortLedInit>:

void LED_voidPortLedInit     (u8 Copy_u8PORT )
{
    41ee:	df 93       	push	r29
    41f0:	cf 93       	push	r28
    41f2:	00 d0       	rcall	.+0      	; 0x41f4 <LED_voidPortLedInit+0x6>
    41f4:	0f 92       	push	r0
    41f6:	cd b7       	in	r28, 0x3d	; 61
    41f8:	de b7       	in	r29, 0x3e	; 62
    41fa:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PORT)
    41fc:	89 81       	ldd	r24, Y+1	; 0x01
    41fe:	28 2f       	mov	r18, r24
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	3b 83       	std	Y+3, r19	; 0x03
    4204:	2a 83       	std	Y+2, r18	; 0x02
    4206:	8a 81       	ldd	r24, Y+2	; 0x02
    4208:	9b 81       	ldd	r25, Y+3	; 0x03
    420a:	81 30       	cpi	r24, 0x01	; 1
    420c:	91 05       	cpc	r25, r1
    420e:	d1 f0       	breq	.+52     	; 0x4244 <LED_voidPortLedInit+0x56>
    4210:	2a 81       	ldd	r18, Y+2	; 0x02
    4212:	3b 81       	ldd	r19, Y+3	; 0x03
    4214:	22 30       	cpi	r18, 0x02	; 2
    4216:	31 05       	cpc	r19, r1
    4218:	2c f4       	brge	.+10     	; 0x4224 <LED_voidPortLedInit+0x36>
    421a:	8a 81       	ldd	r24, Y+2	; 0x02
    421c:	9b 81       	ldd	r25, Y+3	; 0x03
    421e:	00 97       	sbiw	r24, 0x00	; 0
    4220:	61 f0       	breq	.+24     	; 0x423a <LED_voidPortLedInit+0x4c>
    4222:	1e c0       	rjmp	.+60     	; 0x4260 <LED_voidPortLedInit+0x72>
    4224:	2a 81       	ldd	r18, Y+2	; 0x02
    4226:	3b 81       	ldd	r19, Y+3	; 0x03
    4228:	22 30       	cpi	r18, 0x02	; 2
    422a:	31 05       	cpc	r19, r1
    422c:	81 f0       	breq	.+32     	; 0x424e <LED_voidPortLedInit+0x60>
    422e:	8a 81       	ldd	r24, Y+2	; 0x02
    4230:	9b 81       	ldd	r25, Y+3	; 0x03
    4232:	83 30       	cpi	r24, 0x03	; 3
    4234:	91 05       	cpc	r25, r1
    4236:	81 f0       	breq	.+32     	; 0x4258 <LED_voidPortLedInit+0x6a>
    4238:	13 c0       	rjmp	.+38     	; 0x4260 <LED_voidPortLedInit+0x72>
	{
	{
	case PORTA : DIO_voidSetPortDirection(PORTA,PORT_OUTPUT);break;
    423a:	80 e0       	ldi	r24, 0x00	; 0
    423c:	6f ef       	ldi	r22, 0xFF	; 255
    423e:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <DIO_voidSetPortDirection>
    4242:	0e c0       	rjmp	.+28     	; 0x4260 <LED_voidPortLedInit+0x72>
	case PORTB : DIO_voidSetPortDirection(PORTB,PORT_OUTPUT);break;
    4244:	81 e0       	ldi	r24, 0x01	; 1
    4246:	6f ef       	ldi	r22, 0xFF	; 255
    4248:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <DIO_voidSetPortDirection>
    424c:	09 c0       	rjmp	.+18     	; 0x4260 <LED_voidPortLedInit+0x72>
	case PORTC : DIO_voidSetPortDirection(PORTC,PORT_OUTPUT);break;
    424e:	82 e0       	ldi	r24, 0x02	; 2
    4250:	6f ef       	ldi	r22, 0xFF	; 255
    4252:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <DIO_voidSetPortDirection>
    4256:	04 c0       	rjmp	.+8      	; 0x4260 <LED_voidPortLedInit+0x72>
	case PORTD : DIO_voidSetPortDirection(PORTD,PORT_OUTPUT);break;
    4258:	83 e0       	ldi	r24, 0x03	; 3
    425a:	6f ef       	ldi	r22, 0xFF	; 255
    425c:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <DIO_voidSetPortDirection>
	}
	}
}
    4260:	0f 90       	pop	r0
    4262:	0f 90       	pop	r0
    4264:	0f 90       	pop	r0
    4266:	cf 91       	pop	r28
    4268:	df 91       	pop	r29
    426a:	08 95       	ret

0000426c <LED_voidLedOn>:

void LED_voidLedOn(u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Type)
{
    426c:	df 93       	push	r29
    426e:	cf 93       	push	r28
    4270:	cd b7       	in	r28, 0x3d	; 61
    4272:	de b7       	in	r29, 0x3e	; 62
    4274:	27 97       	sbiw	r28, 0x07	; 7
    4276:	0f b6       	in	r0, 0x3f	; 63
    4278:	f8 94       	cli
    427a:	de bf       	out	0x3e, r29	; 62
    427c:	0f be       	out	0x3f, r0	; 63
    427e:	cd bf       	out	0x3d, r28	; 61
    4280:	89 83       	std	Y+1, r24	; 0x01
    4282:	6a 83       	std	Y+2, r22	; 0x02
    4284:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Type == VCC)
    4286:	8b 81       	ldd	r24, Y+3	; 0x03
    4288:	81 30       	cpi	r24, 0x01	; 1
    428a:	b9 f5       	brne	.+110    	; 0x42fa <LED_voidLedOn+0x8e>
	{
		switch (Copy_u8PORT)
    428c:	89 81       	ldd	r24, Y+1	; 0x01
    428e:	28 2f       	mov	r18, r24
    4290:	30 e0       	ldi	r19, 0x00	; 0
    4292:	3f 83       	std	Y+7, r19	; 0x07
    4294:	2e 83       	std	Y+6, r18	; 0x06
    4296:	8e 81       	ldd	r24, Y+6	; 0x06
    4298:	9f 81       	ldd	r25, Y+7	; 0x07
    429a:	81 30       	cpi	r24, 0x01	; 1
    429c:	91 05       	cpc	r25, r1
    429e:	d9 f0       	breq	.+54     	; 0x42d6 <LED_voidLedOn+0x6a>
    42a0:	2e 81       	ldd	r18, Y+6	; 0x06
    42a2:	3f 81       	ldd	r19, Y+7	; 0x07
    42a4:	22 30       	cpi	r18, 0x02	; 2
    42a6:	31 05       	cpc	r19, r1
    42a8:	2c f4       	brge	.+10     	; 0x42b4 <LED_voidLedOn+0x48>
    42aa:	8e 81       	ldd	r24, Y+6	; 0x06
    42ac:	9f 81       	ldd	r25, Y+7	; 0x07
    42ae:	00 97       	sbiw	r24, 0x00	; 0
    42b0:	61 f0       	breq	.+24     	; 0x42ca <LED_voidLedOn+0x5e>
    42b2:	5c c0       	rjmp	.+184    	; 0x436c <LED_voidLedOn+0x100>
    42b4:	2e 81       	ldd	r18, Y+6	; 0x06
    42b6:	3f 81       	ldd	r19, Y+7	; 0x07
    42b8:	22 30       	cpi	r18, 0x02	; 2
    42ba:	31 05       	cpc	r19, r1
    42bc:	91 f0       	breq	.+36     	; 0x42e2 <LED_voidLedOn+0x76>
    42be:	8e 81       	ldd	r24, Y+6	; 0x06
    42c0:	9f 81       	ldd	r25, Y+7	; 0x07
    42c2:	83 30       	cpi	r24, 0x03	; 3
    42c4:	91 05       	cpc	r25, r1
    42c6:	99 f0       	breq	.+38     	; 0x42ee <LED_voidLedOn+0x82>
    42c8:	51 c0       	rjmp	.+162    	; 0x436c <LED_voidLedOn+0x100>
		{
		case PORTA : DIO_voidSetPinValue(PORTA,Copy_u8PIN,HIGH);break;
    42ca:	80 e0       	ldi	r24, 0x00	; 0
    42cc:	6a 81       	ldd	r22, Y+2	; 0x02
    42ce:	41 e0       	ldi	r20, 0x01	; 1
    42d0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    42d4:	4b c0       	rjmp	.+150    	; 0x436c <LED_voidLedOn+0x100>
		case PORTB : DIO_voidSetPinValue(PORTB,Copy_u8PIN,HIGH);break;
    42d6:	81 e0       	ldi	r24, 0x01	; 1
    42d8:	6a 81       	ldd	r22, Y+2	; 0x02
    42da:	41 e0       	ldi	r20, 0x01	; 1
    42dc:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    42e0:	45 c0       	rjmp	.+138    	; 0x436c <LED_voidLedOn+0x100>
		case PORTC : DIO_voidSetPinValue(PORTC,Copy_u8PIN,HIGH);break;
    42e2:	82 e0       	ldi	r24, 0x02	; 2
    42e4:	6a 81       	ldd	r22, Y+2	; 0x02
    42e6:	41 e0       	ldi	r20, 0x01	; 1
    42e8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    42ec:	3f c0       	rjmp	.+126    	; 0x436c <LED_voidLedOn+0x100>
		case PORTD : DIO_voidSetPinValue(PORTD,Copy_u8PIN,HIGH);break;
    42ee:	83 e0       	ldi	r24, 0x03	; 3
    42f0:	6a 81       	ldd	r22, Y+2	; 0x02
    42f2:	41 e0       	ldi	r20, 0x01	; 1
    42f4:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    42f8:	39 c0       	rjmp	.+114    	; 0x436c <LED_voidLedOn+0x100>
		}
	}
	else if (Copy_u8Type == GROUND)
    42fa:	8b 81       	ldd	r24, Y+3	; 0x03
    42fc:	88 23       	and	r24, r24
    42fe:	b1 f5       	brne	.+108    	; 0x436c <LED_voidLedOn+0x100>
	{
		switch (Copy_u8PORT)
    4300:	89 81       	ldd	r24, Y+1	; 0x01
    4302:	28 2f       	mov	r18, r24
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	3d 83       	std	Y+5, r19	; 0x05
    4308:	2c 83       	std	Y+4, r18	; 0x04
    430a:	8c 81       	ldd	r24, Y+4	; 0x04
    430c:	9d 81       	ldd	r25, Y+5	; 0x05
    430e:	81 30       	cpi	r24, 0x01	; 1
    4310:	91 05       	cpc	r25, r1
    4312:	d9 f0       	breq	.+54     	; 0x434a <LED_voidLedOn+0xde>
    4314:	2c 81       	ldd	r18, Y+4	; 0x04
    4316:	3d 81       	ldd	r19, Y+5	; 0x05
    4318:	22 30       	cpi	r18, 0x02	; 2
    431a:	31 05       	cpc	r19, r1
    431c:	2c f4       	brge	.+10     	; 0x4328 <LED_voidLedOn+0xbc>
    431e:	8c 81       	ldd	r24, Y+4	; 0x04
    4320:	9d 81       	ldd	r25, Y+5	; 0x05
    4322:	00 97       	sbiw	r24, 0x00	; 0
    4324:	61 f0       	breq	.+24     	; 0x433e <LED_voidLedOn+0xd2>
    4326:	22 c0       	rjmp	.+68     	; 0x436c <LED_voidLedOn+0x100>
    4328:	2c 81       	ldd	r18, Y+4	; 0x04
    432a:	3d 81       	ldd	r19, Y+5	; 0x05
    432c:	22 30       	cpi	r18, 0x02	; 2
    432e:	31 05       	cpc	r19, r1
    4330:	91 f0       	breq	.+36     	; 0x4356 <LED_voidLedOn+0xea>
    4332:	8c 81       	ldd	r24, Y+4	; 0x04
    4334:	9d 81       	ldd	r25, Y+5	; 0x05
    4336:	83 30       	cpi	r24, 0x03	; 3
    4338:	91 05       	cpc	r25, r1
    433a:	99 f0       	breq	.+38     	; 0x4362 <LED_voidLedOn+0xf6>
    433c:	17 c0       	rjmp	.+46     	; 0x436c <LED_voidLedOn+0x100>
		{
		case PORTA : DIO_voidSetPinValue(PORTA,Copy_u8PIN,LOW);break;
    433e:	80 e0       	ldi	r24, 0x00	; 0
    4340:	6a 81       	ldd	r22, Y+2	; 0x02
    4342:	40 e0       	ldi	r20, 0x00	; 0
    4344:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    4348:	11 c0       	rjmp	.+34     	; 0x436c <LED_voidLedOn+0x100>
		case PORTB : DIO_voidSetPinValue(PORTB,Copy_u8PIN,LOW);break;
    434a:	81 e0       	ldi	r24, 0x01	; 1
    434c:	6a 81       	ldd	r22, Y+2	; 0x02
    434e:	40 e0       	ldi	r20, 0x00	; 0
    4350:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    4354:	0b c0       	rjmp	.+22     	; 0x436c <LED_voidLedOn+0x100>
		case PORTC : DIO_voidSetPinValue(PORTC,Copy_u8PIN,LOW);break;
    4356:	82 e0       	ldi	r24, 0x02	; 2
    4358:	6a 81       	ldd	r22, Y+2	; 0x02
    435a:	40 e0       	ldi	r20, 0x00	; 0
    435c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    4360:	05 c0       	rjmp	.+10     	; 0x436c <LED_voidLedOn+0x100>
		case PORTD : DIO_voidSetPinValue(PORTD,Copy_u8PIN,LOW);break;
    4362:	83 e0       	ldi	r24, 0x03	; 3
    4364:	6a 81       	ldd	r22, Y+2	; 0x02
    4366:	40 e0       	ldi	r20, 0x00	; 0
    4368:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
		}
	}
}
    436c:	27 96       	adiw	r28, 0x07	; 7
    436e:	0f b6       	in	r0, 0x3f	; 63
    4370:	f8 94       	cli
    4372:	de bf       	out	0x3e, r29	; 62
    4374:	0f be       	out	0x3f, r0	; 63
    4376:	cd bf       	out	0x3d, r28	; 61
    4378:	cf 91       	pop	r28
    437a:	df 91       	pop	r29
    437c:	08 95       	ret

0000437e <LED_voidLedOff>:

void LED_voidLedOff    		 (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Type)
{
    437e:	df 93       	push	r29
    4380:	cf 93       	push	r28
    4382:	cd b7       	in	r28, 0x3d	; 61
    4384:	de b7       	in	r29, 0x3e	; 62
    4386:	27 97       	sbiw	r28, 0x07	; 7
    4388:	0f b6       	in	r0, 0x3f	; 63
    438a:	f8 94       	cli
    438c:	de bf       	out	0x3e, r29	; 62
    438e:	0f be       	out	0x3f, r0	; 63
    4390:	cd bf       	out	0x3d, r28	; 61
    4392:	89 83       	std	Y+1, r24	; 0x01
    4394:	6a 83       	std	Y+2, r22	; 0x02
    4396:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Type == VCC)
    4398:	8b 81       	ldd	r24, Y+3	; 0x03
    439a:	81 30       	cpi	r24, 0x01	; 1
    439c:	b9 f5       	brne	.+110    	; 0x440c <LED_voidLedOff+0x8e>
	{
		switch (Copy_u8PORT)
    439e:	89 81       	ldd	r24, Y+1	; 0x01
    43a0:	28 2f       	mov	r18, r24
    43a2:	30 e0       	ldi	r19, 0x00	; 0
    43a4:	3f 83       	std	Y+7, r19	; 0x07
    43a6:	2e 83       	std	Y+6, r18	; 0x06
    43a8:	8e 81       	ldd	r24, Y+6	; 0x06
    43aa:	9f 81       	ldd	r25, Y+7	; 0x07
    43ac:	81 30       	cpi	r24, 0x01	; 1
    43ae:	91 05       	cpc	r25, r1
    43b0:	d9 f0       	breq	.+54     	; 0x43e8 <LED_voidLedOff+0x6a>
    43b2:	2e 81       	ldd	r18, Y+6	; 0x06
    43b4:	3f 81       	ldd	r19, Y+7	; 0x07
    43b6:	22 30       	cpi	r18, 0x02	; 2
    43b8:	31 05       	cpc	r19, r1
    43ba:	2c f4       	brge	.+10     	; 0x43c6 <LED_voidLedOff+0x48>
    43bc:	8e 81       	ldd	r24, Y+6	; 0x06
    43be:	9f 81       	ldd	r25, Y+7	; 0x07
    43c0:	00 97       	sbiw	r24, 0x00	; 0
    43c2:	61 f0       	breq	.+24     	; 0x43dc <LED_voidLedOff+0x5e>
    43c4:	5c c0       	rjmp	.+184    	; 0x447e <LED_voidLedOff+0x100>
    43c6:	2e 81       	ldd	r18, Y+6	; 0x06
    43c8:	3f 81       	ldd	r19, Y+7	; 0x07
    43ca:	22 30       	cpi	r18, 0x02	; 2
    43cc:	31 05       	cpc	r19, r1
    43ce:	91 f0       	breq	.+36     	; 0x43f4 <LED_voidLedOff+0x76>
    43d0:	8e 81       	ldd	r24, Y+6	; 0x06
    43d2:	9f 81       	ldd	r25, Y+7	; 0x07
    43d4:	83 30       	cpi	r24, 0x03	; 3
    43d6:	91 05       	cpc	r25, r1
    43d8:	99 f0       	breq	.+38     	; 0x4400 <LED_voidLedOff+0x82>
    43da:	51 c0       	rjmp	.+162    	; 0x447e <LED_voidLedOff+0x100>
		{
		case PORTA : DIO_voidSetPinValue(PORTA,Copy_u8PIN,LOW);break;
    43dc:	80 e0       	ldi	r24, 0x00	; 0
    43de:	6a 81       	ldd	r22, Y+2	; 0x02
    43e0:	40 e0       	ldi	r20, 0x00	; 0
    43e2:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    43e6:	4b c0       	rjmp	.+150    	; 0x447e <LED_voidLedOff+0x100>
		case PORTB : DIO_voidSetPinValue(PORTB,Copy_u8PIN,LOW);break;
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	6a 81       	ldd	r22, Y+2	; 0x02
    43ec:	40 e0       	ldi	r20, 0x00	; 0
    43ee:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    43f2:	45 c0       	rjmp	.+138    	; 0x447e <LED_voidLedOff+0x100>
		case PORTC : DIO_voidSetPinValue(PORTC,Copy_u8PIN,LOW);break;
    43f4:	82 e0       	ldi	r24, 0x02	; 2
    43f6:	6a 81       	ldd	r22, Y+2	; 0x02
    43f8:	40 e0       	ldi	r20, 0x00	; 0
    43fa:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    43fe:	3f c0       	rjmp	.+126    	; 0x447e <LED_voidLedOff+0x100>
		case PORTD : DIO_voidSetPinValue(PORTD,Copy_u8PIN,LOW);break;
    4400:	83 e0       	ldi	r24, 0x03	; 3
    4402:	6a 81       	ldd	r22, Y+2	; 0x02
    4404:	40 e0       	ldi	r20, 0x00	; 0
    4406:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    440a:	39 c0       	rjmp	.+114    	; 0x447e <LED_voidLedOff+0x100>
		}
	}
	else if (Copy_u8Type == GROUND)
    440c:	8b 81       	ldd	r24, Y+3	; 0x03
    440e:	88 23       	and	r24, r24
    4410:	b1 f5       	brne	.+108    	; 0x447e <LED_voidLedOff+0x100>
	{
		switch (Copy_u8PORT)
    4412:	89 81       	ldd	r24, Y+1	; 0x01
    4414:	28 2f       	mov	r18, r24
    4416:	30 e0       	ldi	r19, 0x00	; 0
    4418:	3d 83       	std	Y+5, r19	; 0x05
    441a:	2c 83       	std	Y+4, r18	; 0x04
    441c:	8c 81       	ldd	r24, Y+4	; 0x04
    441e:	9d 81       	ldd	r25, Y+5	; 0x05
    4420:	81 30       	cpi	r24, 0x01	; 1
    4422:	91 05       	cpc	r25, r1
    4424:	d9 f0       	breq	.+54     	; 0x445c <LED_voidLedOff+0xde>
    4426:	2c 81       	ldd	r18, Y+4	; 0x04
    4428:	3d 81       	ldd	r19, Y+5	; 0x05
    442a:	22 30       	cpi	r18, 0x02	; 2
    442c:	31 05       	cpc	r19, r1
    442e:	2c f4       	brge	.+10     	; 0x443a <LED_voidLedOff+0xbc>
    4430:	8c 81       	ldd	r24, Y+4	; 0x04
    4432:	9d 81       	ldd	r25, Y+5	; 0x05
    4434:	00 97       	sbiw	r24, 0x00	; 0
    4436:	61 f0       	breq	.+24     	; 0x4450 <LED_voidLedOff+0xd2>
    4438:	22 c0       	rjmp	.+68     	; 0x447e <LED_voidLedOff+0x100>
    443a:	2c 81       	ldd	r18, Y+4	; 0x04
    443c:	3d 81       	ldd	r19, Y+5	; 0x05
    443e:	22 30       	cpi	r18, 0x02	; 2
    4440:	31 05       	cpc	r19, r1
    4442:	91 f0       	breq	.+36     	; 0x4468 <LED_voidLedOff+0xea>
    4444:	8c 81       	ldd	r24, Y+4	; 0x04
    4446:	9d 81       	ldd	r25, Y+5	; 0x05
    4448:	83 30       	cpi	r24, 0x03	; 3
    444a:	91 05       	cpc	r25, r1
    444c:	99 f0       	breq	.+38     	; 0x4474 <LED_voidLedOff+0xf6>
    444e:	17 c0       	rjmp	.+46     	; 0x447e <LED_voidLedOff+0x100>
		{
		case PORTA : DIO_voidSetPinValue(PORTA,Copy_u8PIN,HIGH);break;
    4450:	80 e0       	ldi	r24, 0x00	; 0
    4452:	6a 81       	ldd	r22, Y+2	; 0x02
    4454:	41 e0       	ldi	r20, 0x01	; 1
    4456:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    445a:	11 c0       	rjmp	.+34     	; 0x447e <LED_voidLedOff+0x100>
	    case PORTB : DIO_voidSetPinValue(PORTB,Copy_u8PIN,HIGH);break;
    445c:	81 e0       	ldi	r24, 0x01	; 1
    445e:	6a 81       	ldd	r22, Y+2	; 0x02
    4460:	41 e0       	ldi	r20, 0x01	; 1
    4462:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    4466:	0b c0       	rjmp	.+22     	; 0x447e <LED_voidLedOff+0x100>
		case PORTC : DIO_voidSetPinValue(PORTC,Copy_u8PIN,HIGH);break;
    4468:	82 e0       	ldi	r24, 0x02	; 2
    446a:	6a 81       	ldd	r22, Y+2	; 0x02
    446c:	41 e0       	ldi	r20, 0x01	; 1
    446e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    4472:	05 c0       	rjmp	.+10     	; 0x447e <LED_voidLedOff+0x100>
		case PORTD : DIO_voidSetPinValue(PORTD,Copy_u8PIN,HIGH);break;
    4474:	83 e0       	ldi	r24, 0x03	; 3
    4476:	6a 81       	ldd	r22, Y+2	; 0x02
    4478:	41 e0       	ldi	r20, 0x01	; 1
    447a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
		}
	}
}
    447e:	27 96       	adiw	r28, 0x07	; 7
    4480:	0f b6       	in	r0, 0x3f	; 63
    4482:	f8 94       	cli
    4484:	de bf       	out	0x3e, r29	; 62
    4486:	0f be       	out	0x3f, r0	; 63
    4488:	cd bf       	out	0x3d, r28	; 61
    448a:	cf 91       	pop	r28
    448c:	df 91       	pop	r29
    448e:	08 95       	ret

00004490 <LED_voidPortLedOn>:

void LED_voidPortLedOn 		 (u8 Copy_u8PORT ,  u8 Copy_u8Type)
{
    4490:	df 93       	push	r29
    4492:	cf 93       	push	r28
    4494:	00 d0       	rcall	.+0      	; 0x4496 <LED_voidPortLedOn+0x6>
    4496:	00 d0       	rcall	.+0      	; 0x4498 <LED_voidPortLedOn+0x8>
    4498:	00 d0       	rcall	.+0      	; 0x449a <LED_voidPortLedOn+0xa>
    449a:	cd b7       	in	r28, 0x3d	; 61
    449c:	de b7       	in	r29, 0x3e	; 62
    449e:	89 83       	std	Y+1, r24	; 0x01
    44a0:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Type == VCC)
    44a2:	8a 81       	ldd	r24, Y+2	; 0x02
    44a4:	81 30       	cpi	r24, 0x01	; 1
    44a6:	99 f5       	brne	.+102    	; 0x450e <LED_voidPortLedOn+0x7e>
	{
		switch (Copy_u8PORT)
    44a8:	89 81       	ldd	r24, Y+1	; 0x01
    44aa:	28 2f       	mov	r18, r24
    44ac:	30 e0       	ldi	r19, 0x00	; 0
    44ae:	3e 83       	std	Y+6, r19	; 0x06
    44b0:	2d 83       	std	Y+5, r18	; 0x05
    44b2:	8d 81       	ldd	r24, Y+5	; 0x05
    44b4:	9e 81       	ldd	r25, Y+6	; 0x06
    44b6:	81 30       	cpi	r24, 0x01	; 1
    44b8:	91 05       	cpc	r25, r1
    44ba:	d1 f0       	breq	.+52     	; 0x44f0 <LED_voidPortLedOn+0x60>
    44bc:	2d 81       	ldd	r18, Y+5	; 0x05
    44be:	3e 81       	ldd	r19, Y+6	; 0x06
    44c0:	22 30       	cpi	r18, 0x02	; 2
    44c2:	31 05       	cpc	r19, r1
    44c4:	2c f4       	brge	.+10     	; 0x44d0 <LED_voidPortLedOn+0x40>
    44c6:	8d 81       	ldd	r24, Y+5	; 0x05
    44c8:	9e 81       	ldd	r25, Y+6	; 0x06
    44ca:	00 97       	sbiw	r24, 0x00	; 0
    44cc:	61 f0       	breq	.+24     	; 0x44e6 <LED_voidPortLedOn+0x56>
    44ce:	54 c0       	rjmp	.+168    	; 0x4578 <LED_voidPortLedOn+0xe8>
    44d0:	2d 81       	ldd	r18, Y+5	; 0x05
    44d2:	3e 81       	ldd	r19, Y+6	; 0x06
    44d4:	22 30       	cpi	r18, 0x02	; 2
    44d6:	31 05       	cpc	r19, r1
    44d8:	81 f0       	breq	.+32     	; 0x44fa <LED_voidPortLedOn+0x6a>
    44da:	8d 81       	ldd	r24, Y+5	; 0x05
    44dc:	9e 81       	ldd	r25, Y+6	; 0x06
    44de:	83 30       	cpi	r24, 0x03	; 3
    44e0:	91 05       	cpc	r25, r1
    44e2:	81 f0       	breq	.+32     	; 0x4504 <LED_voidPortLedOn+0x74>
    44e4:	49 c0       	rjmp	.+146    	; 0x4578 <LED_voidPortLedOn+0xe8>
		{
		case PORTA : DIO_voidSetPortValue(PORTA,PORT_HIGH);break;
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	6f ef       	ldi	r22, 0xFF	; 255
    44ea:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_voidSetPortValue>
    44ee:	44 c0       	rjmp	.+136    	; 0x4578 <LED_voidPortLedOn+0xe8>
		case PORTB : DIO_voidSetPortValue(PORTB,PORT_HIGH);break;
    44f0:	81 e0       	ldi	r24, 0x01	; 1
    44f2:	6f ef       	ldi	r22, 0xFF	; 255
    44f4:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_voidSetPortValue>
    44f8:	3f c0       	rjmp	.+126    	; 0x4578 <LED_voidPortLedOn+0xe8>
		case PORTC : DIO_voidSetPortValue(PORTC,PORT_HIGH);break;
    44fa:	82 e0       	ldi	r24, 0x02	; 2
    44fc:	6f ef       	ldi	r22, 0xFF	; 255
    44fe:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_voidSetPortValue>
    4502:	3a c0       	rjmp	.+116    	; 0x4578 <LED_voidPortLedOn+0xe8>
		case PORTD : DIO_voidSetPortValue(PORTD,PORT_HIGH);break;
    4504:	83 e0       	ldi	r24, 0x03	; 3
    4506:	6f ef       	ldi	r22, 0xFF	; 255
    4508:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_voidSetPortValue>
    450c:	35 c0       	rjmp	.+106    	; 0x4578 <LED_voidPortLedOn+0xe8>
		}
	}
	else if (Copy_u8Type == GROUND)
    450e:	8a 81       	ldd	r24, Y+2	; 0x02
    4510:	88 23       	and	r24, r24
    4512:	91 f5       	brne	.+100    	; 0x4578 <LED_voidPortLedOn+0xe8>
	{
		switch (Copy_u8PORT)
    4514:	89 81       	ldd	r24, Y+1	; 0x01
    4516:	28 2f       	mov	r18, r24
    4518:	30 e0       	ldi	r19, 0x00	; 0
    451a:	3c 83       	std	Y+4, r19	; 0x04
    451c:	2b 83       	std	Y+3, r18	; 0x03
    451e:	8b 81       	ldd	r24, Y+3	; 0x03
    4520:	9c 81       	ldd	r25, Y+4	; 0x04
    4522:	81 30       	cpi	r24, 0x01	; 1
    4524:	91 05       	cpc	r25, r1
    4526:	d1 f0       	breq	.+52     	; 0x455c <LED_voidPortLedOn+0xcc>
    4528:	2b 81       	ldd	r18, Y+3	; 0x03
    452a:	3c 81       	ldd	r19, Y+4	; 0x04
    452c:	22 30       	cpi	r18, 0x02	; 2
    452e:	31 05       	cpc	r19, r1
    4530:	2c f4       	brge	.+10     	; 0x453c <LED_voidPortLedOn+0xac>
    4532:	8b 81       	ldd	r24, Y+3	; 0x03
    4534:	9c 81       	ldd	r25, Y+4	; 0x04
    4536:	00 97       	sbiw	r24, 0x00	; 0
    4538:	61 f0       	breq	.+24     	; 0x4552 <LED_voidPortLedOn+0xc2>
    453a:	1e c0       	rjmp	.+60     	; 0x4578 <LED_voidPortLedOn+0xe8>
    453c:	2b 81       	ldd	r18, Y+3	; 0x03
    453e:	3c 81       	ldd	r19, Y+4	; 0x04
    4540:	22 30       	cpi	r18, 0x02	; 2
    4542:	31 05       	cpc	r19, r1
    4544:	81 f0       	breq	.+32     	; 0x4566 <LED_voidPortLedOn+0xd6>
    4546:	8b 81       	ldd	r24, Y+3	; 0x03
    4548:	9c 81       	ldd	r25, Y+4	; 0x04
    454a:	83 30       	cpi	r24, 0x03	; 3
    454c:	91 05       	cpc	r25, r1
    454e:	81 f0       	breq	.+32     	; 0x4570 <LED_voidPortLedOn+0xe0>
    4550:	13 c0       	rjmp	.+38     	; 0x4578 <LED_voidPortLedOn+0xe8>
		{
		case PORTA : DIO_voidSetPortValue(PORTA,PORT_LOW);break;
    4552:	80 e0       	ldi	r24, 0x00	; 0
    4554:	60 e0       	ldi	r22, 0x00	; 0
    4556:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_voidSetPortValue>
    455a:	0e c0       	rjmp	.+28     	; 0x4578 <LED_voidPortLedOn+0xe8>
		case PORTB : DIO_voidSetPortValue(PORTB,PORT_LOW);break;
    455c:	81 e0       	ldi	r24, 0x01	; 1
    455e:	60 e0       	ldi	r22, 0x00	; 0
    4560:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_voidSetPortValue>
    4564:	09 c0       	rjmp	.+18     	; 0x4578 <LED_voidPortLedOn+0xe8>
		case PORTC : DIO_voidSetPortValue(PORTC,PORT_LOW);break;
    4566:	82 e0       	ldi	r24, 0x02	; 2
    4568:	60 e0       	ldi	r22, 0x00	; 0
    456a:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_voidSetPortValue>
    456e:	04 c0       	rjmp	.+8      	; 0x4578 <LED_voidPortLedOn+0xe8>
		case PORTD : DIO_voidSetPortValue(PORTD,PORT_LOW);break;
    4570:	83 e0       	ldi	r24, 0x03	; 3
    4572:	60 e0       	ldi	r22, 0x00	; 0
    4574:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_voidSetPortValue>
		}
	}
}
    4578:	26 96       	adiw	r28, 0x06	; 6
    457a:	0f b6       	in	r0, 0x3f	; 63
    457c:	f8 94       	cli
    457e:	de bf       	out	0x3e, r29	; 62
    4580:	0f be       	out	0x3f, r0	; 63
    4582:	cd bf       	out	0x3d, r28	; 61
    4584:	cf 91       	pop	r28
    4586:	df 91       	pop	r29
    4588:	08 95       	ret

0000458a <LED_voidPortLedOff>:

void LED_voidPortLedOff 	 (u8 Copy_u8PORT ,  u8 Copy_u8Type)
{
    458a:	df 93       	push	r29
    458c:	cf 93       	push	r28
    458e:	00 d0       	rcall	.+0      	; 0x4590 <LED_voidPortLedOff+0x6>
    4590:	00 d0       	rcall	.+0      	; 0x4592 <LED_voidPortLedOff+0x8>
    4592:	00 d0       	rcall	.+0      	; 0x4594 <LED_voidPortLedOff+0xa>
    4594:	cd b7       	in	r28, 0x3d	; 61
    4596:	de b7       	in	r29, 0x3e	; 62
    4598:	89 83       	std	Y+1, r24	; 0x01
    459a:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Type == VCC)
    459c:	8a 81       	ldd	r24, Y+2	; 0x02
    459e:	81 30       	cpi	r24, 0x01	; 1
    45a0:	99 f5       	brne	.+102    	; 0x4608 <LED_voidPortLedOff+0x7e>
	{
		switch (Copy_u8PORT)
    45a2:	89 81       	ldd	r24, Y+1	; 0x01
    45a4:	28 2f       	mov	r18, r24
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	3e 83       	std	Y+6, r19	; 0x06
    45aa:	2d 83       	std	Y+5, r18	; 0x05
    45ac:	8d 81       	ldd	r24, Y+5	; 0x05
    45ae:	9e 81       	ldd	r25, Y+6	; 0x06
    45b0:	81 30       	cpi	r24, 0x01	; 1
    45b2:	91 05       	cpc	r25, r1
    45b4:	d1 f0       	breq	.+52     	; 0x45ea <LED_voidPortLedOff+0x60>
    45b6:	2d 81       	ldd	r18, Y+5	; 0x05
    45b8:	3e 81       	ldd	r19, Y+6	; 0x06
    45ba:	22 30       	cpi	r18, 0x02	; 2
    45bc:	31 05       	cpc	r19, r1
    45be:	2c f4       	brge	.+10     	; 0x45ca <LED_voidPortLedOff+0x40>
    45c0:	8d 81       	ldd	r24, Y+5	; 0x05
    45c2:	9e 81       	ldd	r25, Y+6	; 0x06
    45c4:	00 97       	sbiw	r24, 0x00	; 0
    45c6:	61 f0       	breq	.+24     	; 0x45e0 <LED_voidPortLedOff+0x56>
    45c8:	54 c0       	rjmp	.+168    	; 0x4672 <LED_voidPortLedOff+0xe8>
    45ca:	2d 81       	ldd	r18, Y+5	; 0x05
    45cc:	3e 81       	ldd	r19, Y+6	; 0x06
    45ce:	22 30       	cpi	r18, 0x02	; 2
    45d0:	31 05       	cpc	r19, r1
    45d2:	81 f0       	breq	.+32     	; 0x45f4 <LED_voidPortLedOff+0x6a>
    45d4:	8d 81       	ldd	r24, Y+5	; 0x05
    45d6:	9e 81       	ldd	r25, Y+6	; 0x06
    45d8:	83 30       	cpi	r24, 0x03	; 3
    45da:	91 05       	cpc	r25, r1
    45dc:	81 f0       	breq	.+32     	; 0x45fe <LED_voidPortLedOff+0x74>
    45de:	49 c0       	rjmp	.+146    	; 0x4672 <LED_voidPortLedOff+0xe8>
		{
		case PORTA : DIO_voidSetPortValue(PORTA,PORT_LOW);break;
    45e0:	80 e0       	ldi	r24, 0x00	; 0
    45e2:	60 e0       	ldi	r22, 0x00	; 0
    45e4:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_voidSetPortValue>
    45e8:	44 c0       	rjmp	.+136    	; 0x4672 <LED_voidPortLedOff+0xe8>
		case PORTB : DIO_voidSetPortValue(PORTB,PORT_LOW);break;
    45ea:	81 e0       	ldi	r24, 0x01	; 1
    45ec:	60 e0       	ldi	r22, 0x00	; 0
    45ee:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_voidSetPortValue>
    45f2:	3f c0       	rjmp	.+126    	; 0x4672 <LED_voidPortLedOff+0xe8>
		case PORTC : DIO_voidSetPortValue(PORTC,PORT_LOW);break;
    45f4:	82 e0       	ldi	r24, 0x02	; 2
    45f6:	60 e0       	ldi	r22, 0x00	; 0
    45f8:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_voidSetPortValue>
    45fc:	3a c0       	rjmp	.+116    	; 0x4672 <LED_voidPortLedOff+0xe8>
		case PORTD : DIO_voidSetPortValue(PORTD,PORT_LOW);break;
    45fe:	83 e0       	ldi	r24, 0x03	; 3
    4600:	60 e0       	ldi	r22, 0x00	; 0
    4602:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_voidSetPortValue>
    4606:	35 c0       	rjmp	.+106    	; 0x4672 <LED_voidPortLedOff+0xe8>
		}
	}
	else if (Copy_u8Type == GROUND)
    4608:	8a 81       	ldd	r24, Y+2	; 0x02
    460a:	88 23       	and	r24, r24
    460c:	91 f5       	brne	.+100    	; 0x4672 <LED_voidPortLedOff+0xe8>
	{
		switch (Copy_u8PORT)
    460e:	89 81       	ldd	r24, Y+1	; 0x01
    4610:	28 2f       	mov	r18, r24
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	3c 83       	std	Y+4, r19	; 0x04
    4616:	2b 83       	std	Y+3, r18	; 0x03
    4618:	8b 81       	ldd	r24, Y+3	; 0x03
    461a:	9c 81       	ldd	r25, Y+4	; 0x04
    461c:	81 30       	cpi	r24, 0x01	; 1
    461e:	91 05       	cpc	r25, r1
    4620:	d1 f0       	breq	.+52     	; 0x4656 <LED_voidPortLedOff+0xcc>
    4622:	2b 81       	ldd	r18, Y+3	; 0x03
    4624:	3c 81       	ldd	r19, Y+4	; 0x04
    4626:	22 30       	cpi	r18, 0x02	; 2
    4628:	31 05       	cpc	r19, r1
    462a:	2c f4       	brge	.+10     	; 0x4636 <LED_voidPortLedOff+0xac>
    462c:	8b 81       	ldd	r24, Y+3	; 0x03
    462e:	9c 81       	ldd	r25, Y+4	; 0x04
    4630:	00 97       	sbiw	r24, 0x00	; 0
    4632:	61 f0       	breq	.+24     	; 0x464c <LED_voidPortLedOff+0xc2>
    4634:	1e c0       	rjmp	.+60     	; 0x4672 <LED_voidPortLedOff+0xe8>
    4636:	2b 81       	ldd	r18, Y+3	; 0x03
    4638:	3c 81       	ldd	r19, Y+4	; 0x04
    463a:	22 30       	cpi	r18, 0x02	; 2
    463c:	31 05       	cpc	r19, r1
    463e:	81 f0       	breq	.+32     	; 0x4660 <LED_voidPortLedOff+0xd6>
    4640:	8b 81       	ldd	r24, Y+3	; 0x03
    4642:	9c 81       	ldd	r25, Y+4	; 0x04
    4644:	83 30       	cpi	r24, 0x03	; 3
    4646:	91 05       	cpc	r25, r1
    4648:	81 f0       	breq	.+32     	; 0x466a <LED_voidPortLedOff+0xe0>
    464a:	13 c0       	rjmp	.+38     	; 0x4672 <LED_voidPortLedOff+0xe8>
		{
		case PORTA : DIO_voidSetPortValue(PORTA,PORT_HIGH);break;
    464c:	80 e0       	ldi	r24, 0x00	; 0
    464e:	6f ef       	ldi	r22, 0xFF	; 255
    4650:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_voidSetPortValue>
    4654:	0e c0       	rjmp	.+28     	; 0x4672 <LED_voidPortLedOff+0xe8>
		case PORTB : DIO_voidSetPortValue(PORTB,PORT_HIGH);break;
    4656:	81 e0       	ldi	r24, 0x01	; 1
    4658:	6f ef       	ldi	r22, 0xFF	; 255
    465a:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_voidSetPortValue>
    465e:	09 c0       	rjmp	.+18     	; 0x4672 <LED_voidPortLedOff+0xe8>
		case PORTC : DIO_voidSetPortValue(PORTC,PORT_HIGH);break;
    4660:	82 e0       	ldi	r24, 0x02	; 2
    4662:	6f ef       	ldi	r22, 0xFF	; 255
    4664:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_voidSetPortValue>
    4668:	04 c0       	rjmp	.+8      	; 0x4672 <LED_voidPortLedOff+0xe8>
		case PORTD : DIO_voidSetPortValue(PORTD,PORT_HIGH);break;
    466a:	83 e0       	ldi	r24, 0x03	; 3
    466c:	6f ef       	ldi	r22, 0xFF	; 255
    466e:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_voidSetPortValue>
		}
	}
}
    4672:	26 96       	adiw	r28, 0x06	; 6
    4674:	0f b6       	in	r0, 0x3f	; 63
    4676:	f8 94       	cli
    4678:	de bf       	out	0x3e, r29	; 62
    467a:	0f be       	out	0x3f, r0	; 63
    467c:	cd bf       	out	0x3d, r28	; 61
    467e:	cf 91       	pop	r28
    4680:	df 91       	pop	r29
    4682:	08 95       	ret

00004684 <LED_voidLedToggle>:

void LED_voidLedToggle       (u8 Copy_u8PORT , u8 Copy_u8PIN  )
{
    4684:	df 93       	push	r29
    4686:	cf 93       	push	r28
    4688:	00 d0       	rcall	.+0      	; 0x468a <LED_voidLedToggle+0x6>
    468a:	00 d0       	rcall	.+0      	; 0x468c <LED_voidLedToggle+0x8>
    468c:	cd b7       	in	r28, 0x3d	; 61
    468e:	de b7       	in	r29, 0x3e	; 62
    4690:	89 83       	std	Y+1, r24	; 0x01
    4692:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PORT)
    4694:	89 81       	ldd	r24, Y+1	; 0x01
    4696:	28 2f       	mov	r18, r24
    4698:	30 e0       	ldi	r19, 0x00	; 0
    469a:	3c 83       	std	Y+4, r19	; 0x04
    469c:	2b 83       	std	Y+3, r18	; 0x03
    469e:	8b 81       	ldd	r24, Y+3	; 0x03
    46a0:	9c 81       	ldd	r25, Y+4	; 0x04
    46a2:	81 30       	cpi	r24, 0x01	; 1
    46a4:	91 05       	cpc	r25, r1
    46a6:	d1 f0       	breq	.+52     	; 0x46dc <LED_voidLedToggle+0x58>
    46a8:	2b 81       	ldd	r18, Y+3	; 0x03
    46aa:	3c 81       	ldd	r19, Y+4	; 0x04
    46ac:	22 30       	cpi	r18, 0x02	; 2
    46ae:	31 05       	cpc	r19, r1
    46b0:	2c f4       	brge	.+10     	; 0x46bc <LED_voidLedToggle+0x38>
    46b2:	8b 81       	ldd	r24, Y+3	; 0x03
    46b4:	9c 81       	ldd	r25, Y+4	; 0x04
    46b6:	00 97       	sbiw	r24, 0x00	; 0
    46b8:	61 f0       	breq	.+24     	; 0x46d2 <LED_voidLedToggle+0x4e>
    46ba:	1e c0       	rjmp	.+60     	; 0x46f8 <LED_voidLedToggle+0x74>
    46bc:	2b 81       	ldd	r18, Y+3	; 0x03
    46be:	3c 81       	ldd	r19, Y+4	; 0x04
    46c0:	22 30       	cpi	r18, 0x02	; 2
    46c2:	31 05       	cpc	r19, r1
    46c4:	81 f0       	breq	.+32     	; 0x46e6 <LED_voidLedToggle+0x62>
    46c6:	8b 81       	ldd	r24, Y+3	; 0x03
    46c8:	9c 81       	ldd	r25, Y+4	; 0x04
    46ca:	83 30       	cpi	r24, 0x03	; 3
    46cc:	91 05       	cpc	r25, r1
    46ce:	81 f0       	breq	.+32     	; 0x46f0 <LED_voidLedToggle+0x6c>
    46d0:	13 c0       	rjmp	.+38     	; 0x46f8 <LED_voidLedToggle+0x74>
	{
	case PORTA : DIO_voidTogglePinValue(PORTA,Copy_u8PIN);break;
    46d2:	80 e0       	ldi	r24, 0x00	; 0
    46d4:	6a 81       	ldd	r22, Y+2	; 0x02
    46d6:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidTogglePinValue>
    46da:	0e c0       	rjmp	.+28     	; 0x46f8 <LED_voidLedToggle+0x74>
	case PORTB : DIO_voidTogglePinValue(PORTB,Copy_u8PIN);break;
    46dc:	81 e0       	ldi	r24, 0x01	; 1
    46de:	6a 81       	ldd	r22, Y+2	; 0x02
    46e0:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidTogglePinValue>
    46e4:	09 c0       	rjmp	.+18     	; 0x46f8 <LED_voidLedToggle+0x74>
	case PORTC : DIO_voidTogglePinValue(PORTC,Copy_u8PIN);break;
    46e6:	82 e0       	ldi	r24, 0x02	; 2
    46e8:	6a 81       	ldd	r22, Y+2	; 0x02
    46ea:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidTogglePinValue>
    46ee:	04 c0       	rjmp	.+8      	; 0x46f8 <LED_voidLedToggle+0x74>
	case PORTD : DIO_voidTogglePinValue(PORTD,Copy_u8PIN);break;
    46f0:	83 e0       	ldi	r24, 0x03	; 3
    46f2:	6a 81       	ldd	r22, Y+2	; 0x02
    46f4:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidTogglePinValue>
	}
}
    46f8:	0f 90       	pop	r0
    46fa:	0f 90       	pop	r0
    46fc:	0f 90       	pop	r0
    46fe:	0f 90       	pop	r0
    4700:	cf 91       	pop	r28
    4702:	df 91       	pop	r29
    4704:	08 95       	ret

00004706 <LED_voidPortLedToggle>:

void LED_voidPortLedToggle 	 (u8 Copy_u8PORT )
{
    4706:	df 93       	push	r29
    4708:	cf 93       	push	r28
    470a:	00 d0       	rcall	.+0      	; 0x470c <LED_voidPortLedToggle+0x6>
    470c:	0f 92       	push	r0
    470e:	cd b7       	in	r28, 0x3d	; 61
    4710:	de b7       	in	r29, 0x3e	; 62
    4712:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PORT)
    4714:	89 81       	ldd	r24, Y+1	; 0x01
    4716:	28 2f       	mov	r18, r24
    4718:	30 e0       	ldi	r19, 0x00	; 0
    471a:	3b 83       	std	Y+3, r19	; 0x03
    471c:	2a 83       	std	Y+2, r18	; 0x02
    471e:	8a 81       	ldd	r24, Y+2	; 0x02
    4720:	9b 81       	ldd	r25, Y+3	; 0x03
    4722:	81 30       	cpi	r24, 0x01	; 1
    4724:	91 05       	cpc	r25, r1
    4726:	c9 f0       	breq	.+50     	; 0x475a <LED_voidPortLedToggle+0x54>
    4728:	2a 81       	ldd	r18, Y+2	; 0x02
    472a:	3b 81       	ldd	r19, Y+3	; 0x03
    472c:	22 30       	cpi	r18, 0x02	; 2
    472e:	31 05       	cpc	r19, r1
    4730:	2c f4       	brge	.+10     	; 0x473c <LED_voidPortLedToggle+0x36>
    4732:	8a 81       	ldd	r24, Y+2	; 0x02
    4734:	9b 81       	ldd	r25, Y+3	; 0x03
    4736:	00 97       	sbiw	r24, 0x00	; 0
    4738:	61 f0       	breq	.+24     	; 0x4752 <LED_voidPortLedToggle+0x4c>
    473a:	1a c0       	rjmp	.+52     	; 0x4770 <LED_voidPortLedToggle+0x6a>
    473c:	2a 81       	ldd	r18, Y+2	; 0x02
    473e:	3b 81       	ldd	r19, Y+3	; 0x03
    4740:	22 30       	cpi	r18, 0x02	; 2
    4742:	31 05       	cpc	r19, r1
    4744:	71 f0       	breq	.+28     	; 0x4762 <LED_voidPortLedToggle+0x5c>
    4746:	8a 81       	ldd	r24, Y+2	; 0x02
    4748:	9b 81       	ldd	r25, Y+3	; 0x03
    474a:	83 30       	cpi	r24, 0x03	; 3
    474c:	91 05       	cpc	r25, r1
    474e:	69 f0       	breq	.+26     	; 0x476a <LED_voidPortLedToggle+0x64>
    4750:	0f c0       	rjmp	.+30     	; 0x4770 <LED_voidPortLedToggle+0x6a>
	{
	case PORTA : DIO_voidTogglePortValue(PORTA);break;
    4752:	80 e0       	ldi	r24, 0x00	; 0
    4754:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_voidTogglePortValue>
    4758:	0b c0       	rjmp	.+22     	; 0x4770 <LED_voidPortLedToggle+0x6a>
	case PORTB : DIO_voidTogglePortValue(PORTB);break;
    475a:	81 e0       	ldi	r24, 0x01	; 1
    475c:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_voidTogglePortValue>
    4760:	07 c0       	rjmp	.+14     	; 0x4770 <LED_voidPortLedToggle+0x6a>
	case PORTC : DIO_voidTogglePortValue(PORTC);break;
    4762:	82 e0       	ldi	r24, 0x02	; 2
    4764:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_voidTogglePortValue>
    4768:	03 c0       	rjmp	.+6      	; 0x4770 <LED_voidPortLedToggle+0x6a>
	case PORTD : DIO_voidTogglePortValue(PORTD);break;
    476a:	83 e0       	ldi	r24, 0x03	; 3
    476c:	0e 94 a1 10 	call	0x2142	; 0x2142 <DIO_voidTogglePortValue>
	}
}
    4770:	0f 90       	pop	r0
    4772:	0f 90       	pop	r0
    4774:	0f 90       	pop	r0
    4776:	cf 91       	pop	r28
    4778:	df 91       	pop	r29
    477a:	08 95       	ret

0000477c <LCD_voidInit>:
 |        PA0|---------------->|RS        |
 -----------                   ----------
 */

void LCD_voidInit(void)
{
    477c:	0f 93       	push	r16
    477e:	1f 93       	push	r17
    4780:	df 93       	push	r29
    4782:	cf 93       	push	r28
    4784:	cd b7       	in	r28, 0x3d	; 61
    4786:	de b7       	in	r29, 0x3e	; 62
    4788:	c4 55       	subi	r28, 0x54	; 84
    478a:	d0 40       	sbci	r29, 0x00	; 0
    478c:	0f b6       	in	r0, 0x3f	; 63
    478e:	f8 94       	cli
    4790:	de bf       	out	0x3e, r29	; 62
    4792:	0f be       	out	0x3f, r0	; 63
    4794:	cd bf       	out	0x3d, r28	; 61
	//Set direction of control pins -> RS , RW , EN to be output

	DIO_voidSetPinDirection(RS_PORT , RS_PIN , OUTPUT);
    4796:	80 e0       	ldi	r24, 0x00	; 0
    4798:	67 e0       	ldi	r22, 0x07	; 7
    479a:	41 e0       	ldi	r20, 0x01	; 1
    479c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(RW_PORT , RW_PIN , OUTPUT);
    47a0:	80 e0       	ldi	r24, 0x00	; 0
    47a2:	66 e0       	ldi	r22, 0x06	; 6
    47a4:	41 e0       	ldi	r20, 0x01	; 1
    47a6:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(EN_PORT , EN_PIN , OUTPUT);
    47aa:	80 e0       	ldi	r24, 0x00	; 0
    47ac:	65 e0       	ldi	r22, 0x05	; 5
    47ae:	41 e0       	ldi	r20, 0x01	; 1
    47b0:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>

	//Set direction of data port to be output
	DIO_voidSetPortDirection(DATA_PORT , PORT_OUTPUT);
    47b4:	82 e0       	ldi	r24, 0x02	; 2
    47b6:	6f ef       	ldi	r22, 0xFF	; 255
    47b8:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <DIO_voidSetPortDirection>
    47bc:	fe 01       	movw	r30, r28
    47be:	ef 5a       	subi	r30, 0xAF	; 175
    47c0:	ff 4f       	sbci	r31, 0xFF	; 255
    47c2:	80 e0       	ldi	r24, 0x00	; 0
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	a0 ef       	ldi	r26, 0xF0	; 240
    47c8:	b1 e4       	ldi	r27, 0x41	; 65
    47ca:	80 83       	st	Z, r24
    47cc:	91 83       	std	Z+1, r25	; 0x01
    47ce:	a2 83       	std	Z+2, r26	; 0x02
    47d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47d2:	8e 01       	movw	r16, r28
    47d4:	03 5b       	subi	r16, 0xB3	; 179
    47d6:	1f 4f       	sbci	r17, 0xFF	; 255
    47d8:	fe 01       	movw	r30, r28
    47da:	ef 5a       	subi	r30, 0xAF	; 175
    47dc:	ff 4f       	sbci	r31, 0xFF	; 255
    47de:	60 81       	ld	r22, Z
    47e0:	71 81       	ldd	r23, Z+1	; 0x01
    47e2:	82 81       	ldd	r24, Z+2	; 0x02
    47e4:	93 81       	ldd	r25, Z+3	; 0x03
    47e6:	20 e0       	ldi	r18, 0x00	; 0
    47e8:	30 e0       	ldi	r19, 0x00	; 0
    47ea:	4a ef       	ldi	r20, 0xFA	; 250
    47ec:	54 e4       	ldi	r21, 0x44	; 68
    47ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47f2:	dc 01       	movw	r26, r24
    47f4:	cb 01       	movw	r24, r22
    47f6:	f8 01       	movw	r30, r16
    47f8:	80 83       	st	Z, r24
    47fa:	91 83       	std	Z+1, r25	; 0x01
    47fc:	a2 83       	std	Z+2, r26	; 0x02
    47fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4800:	fe 01       	movw	r30, r28
    4802:	e3 5b       	subi	r30, 0xB3	; 179
    4804:	ff 4f       	sbci	r31, 0xFF	; 255
    4806:	60 81       	ld	r22, Z
    4808:	71 81       	ldd	r23, Z+1	; 0x01
    480a:	82 81       	ldd	r24, Z+2	; 0x02
    480c:	93 81       	ldd	r25, Z+3	; 0x03
    480e:	20 e0       	ldi	r18, 0x00	; 0
    4810:	30 e0       	ldi	r19, 0x00	; 0
    4812:	40 e8       	ldi	r20, 0x80	; 128
    4814:	5f e3       	ldi	r21, 0x3F	; 63
    4816:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    481a:	88 23       	and	r24, r24
    481c:	44 f4       	brge	.+16     	; 0x482e <LCD_voidInit+0xb2>
		__ticks = 1;
    481e:	fe 01       	movw	r30, r28
    4820:	e5 5b       	subi	r30, 0xB5	; 181
    4822:	ff 4f       	sbci	r31, 0xFF	; 255
    4824:	81 e0       	ldi	r24, 0x01	; 1
    4826:	90 e0       	ldi	r25, 0x00	; 0
    4828:	91 83       	std	Z+1, r25	; 0x01
    482a:	80 83       	st	Z, r24
    482c:	64 c0       	rjmp	.+200    	; 0x48f6 <LCD_voidInit+0x17a>
	else if (__tmp > 65535)
    482e:	fe 01       	movw	r30, r28
    4830:	e3 5b       	subi	r30, 0xB3	; 179
    4832:	ff 4f       	sbci	r31, 0xFF	; 255
    4834:	60 81       	ld	r22, Z
    4836:	71 81       	ldd	r23, Z+1	; 0x01
    4838:	82 81       	ldd	r24, Z+2	; 0x02
    483a:	93 81       	ldd	r25, Z+3	; 0x03
    483c:	20 e0       	ldi	r18, 0x00	; 0
    483e:	3f ef       	ldi	r19, 0xFF	; 255
    4840:	4f e7       	ldi	r20, 0x7F	; 127
    4842:	57 e4       	ldi	r21, 0x47	; 71
    4844:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4848:	18 16       	cp	r1, r24
    484a:	0c f0       	brlt	.+2      	; 0x484e <LCD_voidInit+0xd2>
    484c:	43 c0       	rjmp	.+134    	; 0x48d4 <LCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    484e:	fe 01       	movw	r30, r28
    4850:	ef 5a       	subi	r30, 0xAF	; 175
    4852:	ff 4f       	sbci	r31, 0xFF	; 255
    4854:	60 81       	ld	r22, Z
    4856:	71 81       	ldd	r23, Z+1	; 0x01
    4858:	82 81       	ldd	r24, Z+2	; 0x02
    485a:	93 81       	ldd	r25, Z+3	; 0x03
    485c:	20 e0       	ldi	r18, 0x00	; 0
    485e:	30 e0       	ldi	r19, 0x00	; 0
    4860:	40 e2       	ldi	r20, 0x20	; 32
    4862:	51 e4       	ldi	r21, 0x41	; 65
    4864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4868:	dc 01       	movw	r26, r24
    486a:	cb 01       	movw	r24, r22
    486c:	8e 01       	movw	r16, r28
    486e:	05 5b       	subi	r16, 0xB5	; 181
    4870:	1f 4f       	sbci	r17, 0xFF	; 255
    4872:	bc 01       	movw	r22, r24
    4874:	cd 01       	movw	r24, r26
    4876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    487a:	dc 01       	movw	r26, r24
    487c:	cb 01       	movw	r24, r22
    487e:	f8 01       	movw	r30, r16
    4880:	91 83       	std	Z+1, r25	; 0x01
    4882:	80 83       	st	Z, r24
    4884:	1f c0       	rjmp	.+62     	; 0x48c4 <LCD_voidInit+0x148>
    4886:	fe 01       	movw	r30, r28
    4888:	e7 5b       	subi	r30, 0xB7	; 183
    488a:	ff 4f       	sbci	r31, 0xFF	; 255
    488c:	88 ec       	ldi	r24, 0xC8	; 200
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	91 83       	std	Z+1, r25	; 0x01
    4892:	80 83       	st	Z, r24
    4894:	fe 01       	movw	r30, r28
    4896:	e7 5b       	subi	r30, 0xB7	; 183
    4898:	ff 4f       	sbci	r31, 0xFF	; 255
    489a:	80 81       	ld	r24, Z
    489c:	91 81       	ldd	r25, Z+1	; 0x01
    489e:	01 97       	sbiw	r24, 0x01	; 1
    48a0:	f1 f7       	brne	.-4      	; 0x489e <LCD_voidInit+0x122>
    48a2:	fe 01       	movw	r30, r28
    48a4:	e7 5b       	subi	r30, 0xB7	; 183
    48a6:	ff 4f       	sbci	r31, 0xFF	; 255
    48a8:	91 83       	std	Z+1, r25	; 0x01
    48aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48ac:	de 01       	movw	r26, r28
    48ae:	a5 5b       	subi	r26, 0xB5	; 181
    48b0:	bf 4f       	sbci	r27, 0xFF	; 255
    48b2:	fe 01       	movw	r30, r28
    48b4:	e5 5b       	subi	r30, 0xB5	; 181
    48b6:	ff 4f       	sbci	r31, 0xFF	; 255
    48b8:	80 81       	ld	r24, Z
    48ba:	91 81       	ldd	r25, Z+1	; 0x01
    48bc:	01 97       	sbiw	r24, 0x01	; 1
    48be:	11 96       	adiw	r26, 0x01	; 1
    48c0:	9c 93       	st	X, r25
    48c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48c4:	fe 01       	movw	r30, r28
    48c6:	e5 5b       	subi	r30, 0xB5	; 181
    48c8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ca:	80 81       	ld	r24, Z
    48cc:	91 81       	ldd	r25, Z+1	; 0x01
    48ce:	00 97       	sbiw	r24, 0x00	; 0
    48d0:	d1 f6       	brne	.-76     	; 0x4886 <LCD_voidInit+0x10a>
    48d2:	27 c0       	rjmp	.+78     	; 0x4922 <LCD_voidInit+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48d4:	8e 01       	movw	r16, r28
    48d6:	05 5b       	subi	r16, 0xB5	; 181
    48d8:	1f 4f       	sbci	r17, 0xFF	; 255
    48da:	fe 01       	movw	r30, r28
    48dc:	e3 5b       	subi	r30, 0xB3	; 179
    48de:	ff 4f       	sbci	r31, 0xFF	; 255
    48e0:	60 81       	ld	r22, Z
    48e2:	71 81       	ldd	r23, Z+1	; 0x01
    48e4:	82 81       	ldd	r24, Z+2	; 0x02
    48e6:	93 81       	ldd	r25, Z+3	; 0x03
    48e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48ec:	dc 01       	movw	r26, r24
    48ee:	cb 01       	movw	r24, r22
    48f0:	f8 01       	movw	r30, r16
    48f2:	91 83       	std	Z+1, r25	; 0x01
    48f4:	80 83       	st	Z, r24
    48f6:	de 01       	movw	r26, r28
    48f8:	a9 5b       	subi	r26, 0xB9	; 185
    48fa:	bf 4f       	sbci	r27, 0xFF	; 255
    48fc:	fe 01       	movw	r30, r28
    48fe:	e5 5b       	subi	r30, 0xB5	; 181
    4900:	ff 4f       	sbci	r31, 0xFF	; 255
    4902:	80 81       	ld	r24, Z
    4904:	91 81       	ldd	r25, Z+1	; 0x01
    4906:	8d 93       	st	X+, r24
    4908:	9c 93       	st	X, r25
    490a:	fe 01       	movw	r30, r28
    490c:	e9 5b       	subi	r30, 0xB9	; 185
    490e:	ff 4f       	sbci	r31, 0xFF	; 255
    4910:	80 81       	ld	r24, Z
    4912:	91 81       	ldd	r25, Z+1	; 0x01
    4914:	01 97       	sbiw	r24, 0x01	; 1
    4916:	f1 f7       	brne	.-4      	; 0x4914 <LCD_voidInit+0x198>
    4918:	fe 01       	movw	r30, r28
    491a:	e9 5b       	subi	r30, 0xB9	; 185
    491c:	ff 4f       	sbci	r31, 0xFF	; 255
    491e:	91 83       	std	Z+1, r25	; 0x01
    4920:	80 83       	st	Z, r24

	_delay_ms(30);

	LCD_voidWriteCommand(Lcd_Home);
    4922:	82 e0       	ldi	r24, 0x02	; 2
    4924:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <LCD_voidWriteCommand>
    4928:	fe 01       	movw	r30, r28
    492a:	ed 5b       	subi	r30, 0xBD	; 189
    492c:	ff 4f       	sbci	r31, 0xFF	; 255
    492e:	80 e0       	ldi	r24, 0x00	; 0
    4930:	90 e0       	ldi	r25, 0x00	; 0
    4932:	a0 e7       	ldi	r26, 0x70	; 112
    4934:	b1 e4       	ldi	r27, 0x41	; 65
    4936:	80 83       	st	Z, r24
    4938:	91 83       	std	Z+1, r25	; 0x01
    493a:	a2 83       	std	Z+2, r26	; 0x02
    493c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    493e:	8e 01       	movw	r16, r28
    4940:	01 5c       	subi	r16, 0xC1	; 193
    4942:	1f 4f       	sbci	r17, 0xFF	; 255
    4944:	fe 01       	movw	r30, r28
    4946:	ed 5b       	subi	r30, 0xBD	; 189
    4948:	ff 4f       	sbci	r31, 0xFF	; 255
    494a:	60 81       	ld	r22, Z
    494c:	71 81       	ldd	r23, Z+1	; 0x01
    494e:	82 81       	ldd	r24, Z+2	; 0x02
    4950:	93 81       	ldd	r25, Z+3	; 0x03
    4952:	20 e0       	ldi	r18, 0x00	; 0
    4954:	30 e0       	ldi	r19, 0x00	; 0
    4956:	4a ef       	ldi	r20, 0xFA	; 250
    4958:	54 e4       	ldi	r21, 0x44	; 68
    495a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    495e:	dc 01       	movw	r26, r24
    4960:	cb 01       	movw	r24, r22
    4962:	f8 01       	movw	r30, r16
    4964:	80 83       	st	Z, r24
    4966:	91 83       	std	Z+1, r25	; 0x01
    4968:	a2 83       	std	Z+2, r26	; 0x02
    496a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    496c:	fe 01       	movw	r30, r28
    496e:	ff 96       	adiw	r30, 0x3f	; 63
    4970:	60 81       	ld	r22, Z
    4972:	71 81       	ldd	r23, Z+1	; 0x01
    4974:	82 81       	ldd	r24, Z+2	; 0x02
    4976:	93 81       	ldd	r25, Z+3	; 0x03
    4978:	20 e0       	ldi	r18, 0x00	; 0
    497a:	30 e0       	ldi	r19, 0x00	; 0
    497c:	40 e8       	ldi	r20, 0x80	; 128
    497e:	5f e3       	ldi	r21, 0x3F	; 63
    4980:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4984:	88 23       	and	r24, r24
    4986:	2c f4       	brge	.+10     	; 0x4992 <LCD_voidInit+0x216>
		__ticks = 1;
    4988:	81 e0       	ldi	r24, 0x01	; 1
    498a:	90 e0       	ldi	r25, 0x00	; 0
    498c:	9e af       	std	Y+62, r25	; 0x3e
    498e:	8d af       	std	Y+61, r24	; 0x3d
    4990:	46 c0       	rjmp	.+140    	; 0x4a1e <LCD_voidInit+0x2a2>
	else if (__tmp > 65535)
    4992:	fe 01       	movw	r30, r28
    4994:	ff 96       	adiw	r30, 0x3f	; 63
    4996:	60 81       	ld	r22, Z
    4998:	71 81       	ldd	r23, Z+1	; 0x01
    499a:	82 81       	ldd	r24, Z+2	; 0x02
    499c:	93 81       	ldd	r25, Z+3	; 0x03
    499e:	20 e0       	ldi	r18, 0x00	; 0
    49a0:	3f ef       	ldi	r19, 0xFF	; 255
    49a2:	4f e7       	ldi	r20, 0x7F	; 127
    49a4:	57 e4       	ldi	r21, 0x47	; 71
    49a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    49aa:	18 16       	cp	r1, r24
    49ac:	64 f5       	brge	.+88     	; 0x4a06 <LCD_voidInit+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49ae:	fe 01       	movw	r30, r28
    49b0:	ed 5b       	subi	r30, 0xBD	; 189
    49b2:	ff 4f       	sbci	r31, 0xFF	; 255
    49b4:	60 81       	ld	r22, Z
    49b6:	71 81       	ldd	r23, Z+1	; 0x01
    49b8:	82 81       	ldd	r24, Z+2	; 0x02
    49ba:	93 81       	ldd	r25, Z+3	; 0x03
    49bc:	20 e0       	ldi	r18, 0x00	; 0
    49be:	30 e0       	ldi	r19, 0x00	; 0
    49c0:	40 e2       	ldi	r20, 0x20	; 32
    49c2:	51 e4       	ldi	r21, 0x41	; 65
    49c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49c8:	dc 01       	movw	r26, r24
    49ca:	cb 01       	movw	r24, r22
    49cc:	bc 01       	movw	r22, r24
    49ce:	cd 01       	movw	r24, r26
    49d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d4:	dc 01       	movw	r26, r24
    49d6:	cb 01       	movw	r24, r22
    49d8:	9e af       	std	Y+62, r25	; 0x3e
    49da:	8d af       	std	Y+61, r24	; 0x3d
    49dc:	0f c0       	rjmp	.+30     	; 0x49fc <LCD_voidInit+0x280>
    49de:	88 ec       	ldi	r24, 0xC8	; 200
    49e0:	90 e0       	ldi	r25, 0x00	; 0
    49e2:	9c af       	std	Y+60, r25	; 0x3c
    49e4:	8b af       	std	Y+59, r24	; 0x3b
    49e6:	8b ad       	ldd	r24, Y+59	; 0x3b
    49e8:	9c ad       	ldd	r25, Y+60	; 0x3c
    49ea:	01 97       	sbiw	r24, 0x01	; 1
    49ec:	f1 f7       	brne	.-4      	; 0x49ea <LCD_voidInit+0x26e>
    49ee:	9c af       	std	Y+60, r25	; 0x3c
    49f0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    49f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    49f6:	01 97       	sbiw	r24, 0x01	; 1
    49f8:	9e af       	std	Y+62, r25	; 0x3e
    49fa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    49fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a00:	00 97       	sbiw	r24, 0x00	; 0
    4a02:	69 f7       	brne	.-38     	; 0x49de <LCD_voidInit+0x262>
    4a04:	16 c0       	rjmp	.+44     	; 0x4a32 <LCD_voidInit+0x2b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a06:	fe 01       	movw	r30, r28
    4a08:	ff 96       	adiw	r30, 0x3f	; 63
    4a0a:	60 81       	ld	r22, Z
    4a0c:	71 81       	ldd	r23, Z+1	; 0x01
    4a0e:	82 81       	ldd	r24, Z+2	; 0x02
    4a10:	93 81       	ldd	r25, Z+3	; 0x03
    4a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a16:	dc 01       	movw	r26, r24
    4a18:	cb 01       	movw	r24, r22
    4a1a:	9e af       	std	Y+62, r25	; 0x3e
    4a1c:	8d af       	std	Y+61, r24	; 0x3d
    4a1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4a20:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a22:	9a af       	std	Y+58, r25	; 0x3a
    4a24:	89 af       	std	Y+57, r24	; 0x39
    4a26:	89 ad       	ldd	r24, Y+57	; 0x39
    4a28:	9a ad       	ldd	r25, Y+58	; 0x3a
    4a2a:	01 97       	sbiw	r24, 0x01	; 1
    4a2c:	f1 f7       	brne	.-4      	; 0x4a2a <LCD_voidInit+0x2ae>
    4a2e:	9a af       	std	Y+58, r25	; 0x3a
    4a30:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);

	LCD_voidWriteCommand(Lcd_FunctionSet8bit);
    4a32:	88 e3       	ldi	r24, 0x38	; 56
    4a34:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <LCD_voidWriteCommand>
    4a38:	80 e0       	ldi	r24, 0x00	; 0
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
    4a3c:	a0 e8       	ldi	r26, 0x80	; 128
    4a3e:	bf e3       	ldi	r27, 0x3F	; 63
    4a40:	8d ab       	std	Y+53, r24	; 0x35
    4a42:	9e ab       	std	Y+54, r25	; 0x36
    4a44:	af ab       	std	Y+55, r26	; 0x37
    4a46:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a48:	6d a9       	ldd	r22, Y+53	; 0x35
    4a4a:	7e a9       	ldd	r23, Y+54	; 0x36
    4a4c:	8f a9       	ldd	r24, Y+55	; 0x37
    4a4e:	98 ad       	ldd	r25, Y+56	; 0x38
    4a50:	20 e0       	ldi	r18, 0x00	; 0
    4a52:	30 e0       	ldi	r19, 0x00	; 0
    4a54:	4a ef       	ldi	r20, 0xFA	; 250
    4a56:	54 e4       	ldi	r21, 0x44	; 68
    4a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a5c:	dc 01       	movw	r26, r24
    4a5e:	cb 01       	movw	r24, r22
    4a60:	89 ab       	std	Y+49, r24	; 0x31
    4a62:	9a ab       	std	Y+50, r25	; 0x32
    4a64:	ab ab       	std	Y+51, r26	; 0x33
    4a66:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4a68:	69 a9       	ldd	r22, Y+49	; 0x31
    4a6a:	7a a9       	ldd	r23, Y+50	; 0x32
    4a6c:	8b a9       	ldd	r24, Y+51	; 0x33
    4a6e:	9c a9       	ldd	r25, Y+52	; 0x34
    4a70:	20 e0       	ldi	r18, 0x00	; 0
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	40 e8       	ldi	r20, 0x80	; 128
    4a76:	5f e3       	ldi	r21, 0x3F	; 63
    4a78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a7c:	88 23       	and	r24, r24
    4a7e:	2c f4       	brge	.+10     	; 0x4a8a <LCD_voidInit+0x30e>
		__ticks = 1;
    4a80:	81 e0       	ldi	r24, 0x01	; 1
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	98 ab       	std	Y+48, r25	; 0x30
    4a86:	8f a7       	std	Y+47, r24	; 0x2f
    4a88:	3f c0       	rjmp	.+126    	; 0x4b08 <LCD_voidInit+0x38c>
	else if (__tmp > 65535)
    4a8a:	69 a9       	ldd	r22, Y+49	; 0x31
    4a8c:	7a a9       	ldd	r23, Y+50	; 0x32
    4a8e:	8b a9       	ldd	r24, Y+51	; 0x33
    4a90:	9c a9       	ldd	r25, Y+52	; 0x34
    4a92:	20 e0       	ldi	r18, 0x00	; 0
    4a94:	3f ef       	ldi	r19, 0xFF	; 255
    4a96:	4f e7       	ldi	r20, 0x7F	; 127
    4a98:	57 e4       	ldi	r21, 0x47	; 71
    4a9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a9e:	18 16       	cp	r1, r24
    4aa0:	4c f5       	brge	.+82     	; 0x4af4 <LCD_voidInit+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aa2:	6d a9       	ldd	r22, Y+53	; 0x35
    4aa4:	7e a9       	ldd	r23, Y+54	; 0x36
    4aa6:	8f a9       	ldd	r24, Y+55	; 0x37
    4aa8:	98 ad       	ldd	r25, Y+56	; 0x38
    4aaa:	20 e0       	ldi	r18, 0x00	; 0
    4aac:	30 e0       	ldi	r19, 0x00	; 0
    4aae:	40 e2       	ldi	r20, 0x20	; 32
    4ab0:	51 e4       	ldi	r21, 0x41	; 65
    4ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	cb 01       	movw	r24, r22
    4aba:	bc 01       	movw	r22, r24
    4abc:	cd 01       	movw	r24, r26
    4abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ac2:	dc 01       	movw	r26, r24
    4ac4:	cb 01       	movw	r24, r22
    4ac6:	98 ab       	std	Y+48, r25	; 0x30
    4ac8:	8f a7       	std	Y+47, r24	; 0x2f
    4aca:	0f c0       	rjmp	.+30     	; 0x4aea <LCD_voidInit+0x36e>
    4acc:	88 ec       	ldi	r24, 0xC8	; 200
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	9e a7       	std	Y+46, r25	; 0x2e
    4ad2:	8d a7       	std	Y+45, r24	; 0x2d
    4ad4:	8d a5       	ldd	r24, Y+45	; 0x2d
    4ad6:	9e a5       	ldd	r25, Y+46	; 0x2e
    4ad8:	01 97       	sbiw	r24, 0x01	; 1
    4ada:	f1 f7       	brne	.-4      	; 0x4ad8 <LCD_voidInit+0x35c>
    4adc:	9e a7       	std	Y+46, r25	; 0x2e
    4ade:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ae0:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ae2:	98 a9       	ldd	r25, Y+48	; 0x30
    4ae4:	01 97       	sbiw	r24, 0x01	; 1
    4ae6:	98 ab       	std	Y+48, r25	; 0x30
    4ae8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aea:	8f a5       	ldd	r24, Y+47	; 0x2f
    4aec:	98 a9       	ldd	r25, Y+48	; 0x30
    4aee:	00 97       	sbiw	r24, 0x00	; 0
    4af0:	69 f7       	brne	.-38     	; 0x4acc <LCD_voidInit+0x350>
    4af2:	14 c0       	rjmp	.+40     	; 0x4b1c <LCD_voidInit+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4af4:	69 a9       	ldd	r22, Y+49	; 0x31
    4af6:	7a a9       	ldd	r23, Y+50	; 0x32
    4af8:	8b a9       	ldd	r24, Y+51	; 0x33
    4afa:	9c a9       	ldd	r25, Y+52	; 0x34
    4afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b00:	dc 01       	movw	r26, r24
    4b02:	cb 01       	movw	r24, r22
    4b04:	98 ab       	std	Y+48, r25	; 0x30
    4b06:	8f a7       	std	Y+47, r24	; 0x2f
    4b08:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b0a:	98 a9       	ldd	r25, Y+48	; 0x30
    4b0c:	9c a7       	std	Y+44, r25	; 0x2c
    4b0e:	8b a7       	std	Y+43, r24	; 0x2b
    4b10:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b12:	9c a5       	ldd	r25, Y+44	; 0x2c
    4b14:	01 97       	sbiw	r24, 0x01	; 1
    4b16:	f1 f7       	brne	.-4      	; 0x4b14 <LCD_voidInit+0x398>
    4b18:	9c a7       	std	Y+44, r25	; 0x2c
    4b1a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	LCD_voidWriteCommand(Lcd_DisplayOn);
    4b1c:	8c e0       	ldi	r24, 0x0C	; 12
    4b1e:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <LCD_voidWriteCommand>
    4b22:	80 e0       	ldi	r24, 0x00	; 0
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	a0 e8       	ldi	r26, 0x80	; 128
    4b28:	bf e3       	ldi	r27, 0x3F	; 63
    4b2a:	8f a3       	std	Y+39, r24	; 0x27
    4b2c:	98 a7       	std	Y+40, r25	; 0x28
    4b2e:	a9 a7       	std	Y+41, r26	; 0x29
    4b30:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b32:	6f a1       	ldd	r22, Y+39	; 0x27
    4b34:	78 a5       	ldd	r23, Y+40	; 0x28
    4b36:	89 a5       	ldd	r24, Y+41	; 0x29
    4b38:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b3a:	20 e0       	ldi	r18, 0x00	; 0
    4b3c:	30 e0       	ldi	r19, 0x00	; 0
    4b3e:	4a ef       	ldi	r20, 0xFA	; 250
    4b40:	54 e4       	ldi	r21, 0x44	; 68
    4b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b46:	dc 01       	movw	r26, r24
    4b48:	cb 01       	movw	r24, r22
    4b4a:	8b a3       	std	Y+35, r24	; 0x23
    4b4c:	9c a3       	std	Y+36, r25	; 0x24
    4b4e:	ad a3       	std	Y+37, r26	; 0x25
    4b50:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4b52:	6b a1       	ldd	r22, Y+35	; 0x23
    4b54:	7c a1       	ldd	r23, Y+36	; 0x24
    4b56:	8d a1       	ldd	r24, Y+37	; 0x25
    4b58:	9e a1       	ldd	r25, Y+38	; 0x26
    4b5a:	20 e0       	ldi	r18, 0x00	; 0
    4b5c:	30 e0       	ldi	r19, 0x00	; 0
    4b5e:	40 e8       	ldi	r20, 0x80	; 128
    4b60:	5f e3       	ldi	r21, 0x3F	; 63
    4b62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b66:	88 23       	and	r24, r24
    4b68:	2c f4       	brge	.+10     	; 0x4b74 <LCD_voidInit+0x3f8>
		__ticks = 1;
    4b6a:	81 e0       	ldi	r24, 0x01	; 1
    4b6c:	90 e0       	ldi	r25, 0x00	; 0
    4b6e:	9a a3       	std	Y+34, r25	; 0x22
    4b70:	89 a3       	std	Y+33, r24	; 0x21
    4b72:	3f c0       	rjmp	.+126    	; 0x4bf2 <LCD_voidInit+0x476>
	else if (__tmp > 65535)
    4b74:	6b a1       	ldd	r22, Y+35	; 0x23
    4b76:	7c a1       	ldd	r23, Y+36	; 0x24
    4b78:	8d a1       	ldd	r24, Y+37	; 0x25
    4b7a:	9e a1       	ldd	r25, Y+38	; 0x26
    4b7c:	20 e0       	ldi	r18, 0x00	; 0
    4b7e:	3f ef       	ldi	r19, 0xFF	; 255
    4b80:	4f e7       	ldi	r20, 0x7F	; 127
    4b82:	57 e4       	ldi	r21, 0x47	; 71
    4b84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b88:	18 16       	cp	r1, r24
    4b8a:	4c f5       	brge	.+82     	; 0x4bde <LCD_voidInit+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b8c:	6f a1       	ldd	r22, Y+39	; 0x27
    4b8e:	78 a5       	ldd	r23, Y+40	; 0x28
    4b90:	89 a5       	ldd	r24, Y+41	; 0x29
    4b92:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b94:	20 e0       	ldi	r18, 0x00	; 0
    4b96:	30 e0       	ldi	r19, 0x00	; 0
    4b98:	40 e2       	ldi	r20, 0x20	; 32
    4b9a:	51 e4       	ldi	r21, 0x41	; 65
    4b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba0:	dc 01       	movw	r26, r24
    4ba2:	cb 01       	movw	r24, r22
    4ba4:	bc 01       	movw	r22, r24
    4ba6:	cd 01       	movw	r24, r26
    4ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bac:	dc 01       	movw	r26, r24
    4bae:	cb 01       	movw	r24, r22
    4bb0:	9a a3       	std	Y+34, r25	; 0x22
    4bb2:	89 a3       	std	Y+33, r24	; 0x21
    4bb4:	0f c0       	rjmp	.+30     	; 0x4bd4 <LCD_voidInit+0x458>
    4bb6:	88 ec       	ldi	r24, 0xC8	; 200
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	98 a3       	std	Y+32, r25	; 0x20
    4bbc:	8f 8f       	std	Y+31, r24	; 0x1f
    4bbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4bc0:	98 a1       	ldd	r25, Y+32	; 0x20
    4bc2:	01 97       	sbiw	r24, 0x01	; 1
    4bc4:	f1 f7       	brne	.-4      	; 0x4bc2 <LCD_voidInit+0x446>
    4bc6:	98 a3       	std	Y+32, r25	; 0x20
    4bc8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bca:	89 a1       	ldd	r24, Y+33	; 0x21
    4bcc:	9a a1       	ldd	r25, Y+34	; 0x22
    4bce:	01 97       	sbiw	r24, 0x01	; 1
    4bd0:	9a a3       	std	Y+34, r25	; 0x22
    4bd2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    4bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    4bd8:	00 97       	sbiw	r24, 0x00	; 0
    4bda:	69 f7       	brne	.-38     	; 0x4bb6 <LCD_voidInit+0x43a>
    4bdc:	14 c0       	rjmp	.+40     	; 0x4c06 <LCD_voidInit+0x48a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bde:	6b a1       	ldd	r22, Y+35	; 0x23
    4be0:	7c a1       	ldd	r23, Y+36	; 0x24
    4be2:	8d a1       	ldd	r24, Y+37	; 0x25
    4be4:	9e a1       	ldd	r25, Y+38	; 0x26
    4be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bea:	dc 01       	movw	r26, r24
    4bec:	cb 01       	movw	r24, r22
    4bee:	9a a3       	std	Y+34, r25	; 0x22
    4bf0:	89 a3       	std	Y+33, r24	; 0x21
    4bf2:	89 a1       	ldd	r24, Y+33	; 0x21
    4bf4:	9a a1       	ldd	r25, Y+34	; 0x22
    4bf6:	9e 8f       	std	Y+30, r25	; 0x1e
    4bf8:	8d 8f       	std	Y+29, r24	; 0x1d
    4bfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4bfc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4bfe:	01 97       	sbiw	r24, 0x01	; 1
    4c00:	f1 f7       	brne	.-4      	; 0x4bfe <LCD_voidInit+0x482>
    4c02:	9e 8f       	std	Y+30, r25	; 0x1e
    4c04:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_voidWriteCommand(Lcd_Clear);
    4c06:	81 e0       	ldi	r24, 0x01	; 1
    4c08:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <LCD_voidWriteCommand>
    4c0c:	80 e0       	ldi	r24, 0x00	; 0
    4c0e:	90 e0       	ldi	r25, 0x00	; 0
    4c10:	a0 e0       	ldi	r26, 0x00	; 0
    4c12:	b0 e4       	ldi	r27, 0x40	; 64
    4c14:	89 8f       	std	Y+25, r24	; 0x19
    4c16:	9a 8f       	std	Y+26, r25	; 0x1a
    4c18:	ab 8f       	std	Y+27, r26	; 0x1b
    4c1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c1c:	69 8d       	ldd	r22, Y+25	; 0x19
    4c1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c24:	20 e0       	ldi	r18, 0x00	; 0
    4c26:	30 e0       	ldi	r19, 0x00	; 0
    4c28:	4a ef       	ldi	r20, 0xFA	; 250
    4c2a:	54 e4       	ldi	r21, 0x44	; 68
    4c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c30:	dc 01       	movw	r26, r24
    4c32:	cb 01       	movw	r24, r22
    4c34:	8d 8b       	std	Y+21, r24	; 0x15
    4c36:	9e 8b       	std	Y+22, r25	; 0x16
    4c38:	af 8b       	std	Y+23, r26	; 0x17
    4c3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4c3c:	6d 89       	ldd	r22, Y+21	; 0x15
    4c3e:	7e 89       	ldd	r23, Y+22	; 0x16
    4c40:	8f 89       	ldd	r24, Y+23	; 0x17
    4c42:	98 8d       	ldd	r25, Y+24	; 0x18
    4c44:	20 e0       	ldi	r18, 0x00	; 0
    4c46:	30 e0       	ldi	r19, 0x00	; 0
    4c48:	40 e8       	ldi	r20, 0x80	; 128
    4c4a:	5f e3       	ldi	r21, 0x3F	; 63
    4c4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4c50:	88 23       	and	r24, r24
    4c52:	2c f4       	brge	.+10     	; 0x4c5e <LCD_voidInit+0x4e2>
		__ticks = 1;
    4c54:	81 e0       	ldi	r24, 0x01	; 1
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	9c 8b       	std	Y+20, r25	; 0x14
    4c5a:	8b 8b       	std	Y+19, r24	; 0x13
    4c5c:	3f c0       	rjmp	.+126    	; 0x4cdc <LCD_voidInit+0x560>
	else if (__tmp > 65535)
    4c5e:	6d 89       	ldd	r22, Y+21	; 0x15
    4c60:	7e 89       	ldd	r23, Y+22	; 0x16
    4c62:	8f 89       	ldd	r24, Y+23	; 0x17
    4c64:	98 8d       	ldd	r25, Y+24	; 0x18
    4c66:	20 e0       	ldi	r18, 0x00	; 0
    4c68:	3f ef       	ldi	r19, 0xFF	; 255
    4c6a:	4f e7       	ldi	r20, 0x7F	; 127
    4c6c:	57 e4       	ldi	r21, 0x47	; 71
    4c6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c72:	18 16       	cp	r1, r24
    4c74:	4c f5       	brge	.+82     	; 0x4cc8 <LCD_voidInit+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c76:	69 8d       	ldd	r22, Y+25	; 0x19
    4c78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c7e:	20 e0       	ldi	r18, 0x00	; 0
    4c80:	30 e0       	ldi	r19, 0x00	; 0
    4c82:	40 e2       	ldi	r20, 0x20	; 32
    4c84:	51 e4       	ldi	r21, 0x41	; 65
    4c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c8a:	dc 01       	movw	r26, r24
    4c8c:	cb 01       	movw	r24, r22
    4c8e:	bc 01       	movw	r22, r24
    4c90:	cd 01       	movw	r24, r26
    4c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c96:	dc 01       	movw	r26, r24
    4c98:	cb 01       	movw	r24, r22
    4c9a:	9c 8b       	std	Y+20, r25	; 0x14
    4c9c:	8b 8b       	std	Y+19, r24	; 0x13
    4c9e:	0f c0       	rjmp	.+30     	; 0x4cbe <LCD_voidInit+0x542>
    4ca0:	88 ec       	ldi	r24, 0xC8	; 200
    4ca2:	90 e0       	ldi	r25, 0x00	; 0
    4ca4:	9a 8b       	std	Y+18, r25	; 0x12
    4ca6:	89 8b       	std	Y+17, r24	; 0x11
    4ca8:	89 89       	ldd	r24, Y+17	; 0x11
    4caa:	9a 89       	ldd	r25, Y+18	; 0x12
    4cac:	01 97       	sbiw	r24, 0x01	; 1
    4cae:	f1 f7       	brne	.-4      	; 0x4cac <LCD_voidInit+0x530>
    4cb0:	9a 8b       	std	Y+18, r25	; 0x12
    4cb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cb4:	8b 89       	ldd	r24, Y+19	; 0x13
    4cb6:	9c 89       	ldd	r25, Y+20	; 0x14
    4cb8:	01 97       	sbiw	r24, 0x01	; 1
    4cba:	9c 8b       	std	Y+20, r25	; 0x14
    4cbc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cbe:	8b 89       	ldd	r24, Y+19	; 0x13
    4cc0:	9c 89       	ldd	r25, Y+20	; 0x14
    4cc2:	00 97       	sbiw	r24, 0x00	; 0
    4cc4:	69 f7       	brne	.-38     	; 0x4ca0 <LCD_voidInit+0x524>
    4cc6:	14 c0       	rjmp	.+40     	; 0x4cf0 <LCD_voidInit+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cc8:	6d 89       	ldd	r22, Y+21	; 0x15
    4cca:	7e 89       	ldd	r23, Y+22	; 0x16
    4ccc:	8f 89       	ldd	r24, Y+23	; 0x17
    4cce:	98 8d       	ldd	r25, Y+24	; 0x18
    4cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cd4:	dc 01       	movw	r26, r24
    4cd6:	cb 01       	movw	r24, r22
    4cd8:	9c 8b       	std	Y+20, r25	; 0x14
    4cda:	8b 8b       	std	Y+19, r24	; 0x13
    4cdc:	8b 89       	ldd	r24, Y+19	; 0x13
    4cde:	9c 89       	ldd	r25, Y+20	; 0x14
    4ce0:	98 8b       	std	Y+16, r25	; 0x10
    4ce2:	8f 87       	std	Y+15, r24	; 0x0f
    4ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ce6:	98 89       	ldd	r25, Y+16	; 0x10
    4ce8:	01 97       	sbiw	r24, 0x01	; 1
    4cea:	f1 f7       	brne	.-4      	; 0x4ce8 <LCD_voidInit+0x56c>
    4cec:	98 8b       	std	Y+16, r25	; 0x10
    4cee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	LCD_voidWriteCommand(Lcd_EntryMode);
    4cf0:	86 e0       	ldi	r24, 0x06	; 6
    4cf2:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <LCD_voidWriteCommand>
    4cf6:	80 e0       	ldi	r24, 0x00	; 0
    4cf8:	90 e0       	ldi	r25, 0x00	; 0
    4cfa:	a0 e0       	ldi	r26, 0x00	; 0
    4cfc:	b0 e4       	ldi	r27, 0x40	; 64
    4cfe:	8b 87       	std	Y+11, r24	; 0x0b
    4d00:	9c 87       	std	Y+12, r25	; 0x0c
    4d02:	ad 87       	std	Y+13, r26	; 0x0d
    4d04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d06:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d08:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d0e:	20 e0       	ldi	r18, 0x00	; 0
    4d10:	30 e0       	ldi	r19, 0x00	; 0
    4d12:	4a ef       	ldi	r20, 0xFA	; 250
    4d14:	54 e4       	ldi	r21, 0x44	; 68
    4d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d1a:	dc 01       	movw	r26, r24
    4d1c:	cb 01       	movw	r24, r22
    4d1e:	8f 83       	std	Y+7, r24	; 0x07
    4d20:	98 87       	std	Y+8, r25	; 0x08
    4d22:	a9 87       	std	Y+9, r26	; 0x09
    4d24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4d26:	6f 81       	ldd	r22, Y+7	; 0x07
    4d28:	78 85       	ldd	r23, Y+8	; 0x08
    4d2a:	89 85       	ldd	r24, Y+9	; 0x09
    4d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d2e:	20 e0       	ldi	r18, 0x00	; 0
    4d30:	30 e0       	ldi	r19, 0x00	; 0
    4d32:	40 e8       	ldi	r20, 0x80	; 128
    4d34:	5f e3       	ldi	r21, 0x3F	; 63
    4d36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d3a:	88 23       	and	r24, r24
    4d3c:	2c f4       	brge	.+10     	; 0x4d48 <LCD_voidInit+0x5cc>
		__ticks = 1;
    4d3e:	81 e0       	ldi	r24, 0x01	; 1
    4d40:	90 e0       	ldi	r25, 0x00	; 0
    4d42:	9e 83       	std	Y+6, r25	; 0x06
    4d44:	8d 83       	std	Y+5, r24	; 0x05
    4d46:	3f c0       	rjmp	.+126    	; 0x4dc6 <LCD_voidInit+0x64a>
	else if (__tmp > 65535)
    4d48:	6f 81       	ldd	r22, Y+7	; 0x07
    4d4a:	78 85       	ldd	r23, Y+8	; 0x08
    4d4c:	89 85       	ldd	r24, Y+9	; 0x09
    4d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d50:	20 e0       	ldi	r18, 0x00	; 0
    4d52:	3f ef       	ldi	r19, 0xFF	; 255
    4d54:	4f e7       	ldi	r20, 0x7F	; 127
    4d56:	57 e4       	ldi	r21, 0x47	; 71
    4d58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d5c:	18 16       	cp	r1, r24
    4d5e:	4c f5       	brge	.+82     	; 0x4db2 <LCD_voidInit+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d60:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d62:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d64:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d66:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d68:	20 e0       	ldi	r18, 0x00	; 0
    4d6a:	30 e0       	ldi	r19, 0x00	; 0
    4d6c:	40 e2       	ldi	r20, 0x20	; 32
    4d6e:	51 e4       	ldi	r21, 0x41	; 65
    4d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d74:	dc 01       	movw	r26, r24
    4d76:	cb 01       	movw	r24, r22
    4d78:	bc 01       	movw	r22, r24
    4d7a:	cd 01       	movw	r24, r26
    4d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d80:	dc 01       	movw	r26, r24
    4d82:	cb 01       	movw	r24, r22
    4d84:	9e 83       	std	Y+6, r25	; 0x06
    4d86:	8d 83       	std	Y+5, r24	; 0x05
    4d88:	0f c0       	rjmp	.+30     	; 0x4da8 <LCD_voidInit+0x62c>
    4d8a:	88 ec       	ldi	r24, 0xC8	; 200
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	9c 83       	std	Y+4, r25	; 0x04
    4d90:	8b 83       	std	Y+3, r24	; 0x03
    4d92:	8b 81       	ldd	r24, Y+3	; 0x03
    4d94:	9c 81       	ldd	r25, Y+4	; 0x04
    4d96:	01 97       	sbiw	r24, 0x01	; 1
    4d98:	f1 f7       	brne	.-4      	; 0x4d96 <LCD_voidInit+0x61a>
    4d9a:	9c 83       	std	Y+4, r25	; 0x04
    4d9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    4da0:	9e 81       	ldd	r25, Y+6	; 0x06
    4da2:	01 97       	sbiw	r24, 0x01	; 1
    4da4:	9e 83       	std	Y+6, r25	; 0x06
    4da6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4da8:	8d 81       	ldd	r24, Y+5	; 0x05
    4daa:	9e 81       	ldd	r25, Y+6	; 0x06
    4dac:	00 97       	sbiw	r24, 0x00	; 0
    4dae:	69 f7       	brne	.-38     	; 0x4d8a <LCD_voidInit+0x60e>
    4db0:	14 c0       	rjmp	.+40     	; 0x4dda <LCD_voidInit+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4db2:	6f 81       	ldd	r22, Y+7	; 0x07
    4db4:	78 85       	ldd	r23, Y+8	; 0x08
    4db6:	89 85       	ldd	r24, Y+9	; 0x09
    4db8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dbe:	dc 01       	movw	r26, r24
    4dc0:	cb 01       	movw	r24, r22
    4dc2:	9e 83       	std	Y+6, r25	; 0x06
    4dc4:	8d 83       	std	Y+5, r24	; 0x05
    4dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    4dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    4dca:	9a 83       	std	Y+2, r25	; 0x02
    4dcc:	89 83       	std	Y+1, r24	; 0x01
    4dce:	89 81       	ldd	r24, Y+1	; 0x01
    4dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    4dd2:	01 97       	sbiw	r24, 0x01	; 1
    4dd4:	f1 f7       	brne	.-4      	; 0x4dd2 <LCD_voidInit+0x656>
    4dd6:	9a 83       	std	Y+2, r25	; 0x02
    4dd8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    4dda:	cc 5a       	subi	r28, 0xAC	; 172
    4ddc:	df 4f       	sbci	r29, 0xFF	; 255
    4dde:	0f b6       	in	r0, 0x3f	; 63
    4de0:	f8 94       	cli
    4de2:	de bf       	out	0x3e, r29	; 62
    4de4:	0f be       	out	0x3f, r0	; 63
    4de6:	cd bf       	out	0x3d, r28	; 61
    4de8:	cf 91       	pop	r28
    4dea:	df 91       	pop	r29
    4dec:	1f 91       	pop	r17
    4dee:	0f 91       	pop	r16
    4df0:	08 95       	ret

00004df2 <LCD_voidWriteCommand>:

void LCD_voidWriteCommand (u8 Copy_u8Command)
{
    4df2:	df 93       	push	r29
    4df4:	cf 93       	push	r28
    4df6:	cd b7       	in	r28, 0x3d	; 61
    4df8:	de b7       	in	r29, 0x3e	; 62
    4dfa:	2f 97       	sbiw	r28, 0x0f	; 15
    4dfc:	0f b6       	in	r0, 0x3f	; 63
    4dfe:	f8 94       	cli
    4e00:	de bf       	out	0x3e, r29	; 62
    4e02:	0f be       	out	0x3f, r0	; 63
    4e04:	cd bf       	out	0x3d, r28	; 61
    4e06:	8f 87       	std	Y+15, r24	; 0x0f

	//1- Set RW pin to be write -> 0
	DIO_voidSetPinValue(RW_PORT, RW_PIN , LOW);
    4e08:	80 e0       	ldi	r24, 0x00	; 0
    4e0a:	66 e0       	ldi	r22, 0x06	; 6
    4e0c:	40 e0       	ldi	r20, 0x00	; 0
    4e0e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>

	//2- Set RS pin to send command -> 0
	DIO_voidSetPinValue(RS_PORT , RS_PIN , LOW);
    4e12:	80 e0       	ldi	r24, 0x00	; 0
    4e14:	67 e0       	ldi	r22, 0x07	; 7
    4e16:	40 e0       	ldi	r20, 0x00	; 0
    4e18:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>

	//3- Set the Cmd over data port
	DIO_voidSetPortValue(DATA_PORT , Copy_u8Command);
    4e1c:	82 e0       	ldi	r24, 0x02	; 2
    4e1e:	6f 85       	ldd	r22, Y+15	; 0x0f
    4e20:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_voidSetPortValue>

	//4- Set enable pin to be high for 2ms
	DIO_voidSetPinValue(EN_PORT , EN_PIN , HIGH);
    4e24:	80 e0       	ldi	r24, 0x00	; 0
    4e26:	65 e0       	ldi	r22, 0x05	; 5
    4e28:	41 e0       	ldi	r20, 0x01	; 1
    4e2a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    4e2e:	80 e0       	ldi	r24, 0x00	; 0
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	a0 e0       	ldi	r26, 0x00	; 0
    4e34:	b0 e4       	ldi	r27, 0x40	; 64
    4e36:	8b 87       	std	Y+11, r24	; 0x0b
    4e38:	9c 87       	std	Y+12, r25	; 0x0c
    4e3a:	ad 87       	std	Y+13, r26	; 0x0d
    4e3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e40:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e42:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e44:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e46:	20 e0       	ldi	r18, 0x00	; 0
    4e48:	30 e0       	ldi	r19, 0x00	; 0
    4e4a:	4a ef       	ldi	r20, 0xFA	; 250
    4e4c:	54 e4       	ldi	r21, 0x44	; 68
    4e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e52:	dc 01       	movw	r26, r24
    4e54:	cb 01       	movw	r24, r22
    4e56:	8f 83       	std	Y+7, r24	; 0x07
    4e58:	98 87       	std	Y+8, r25	; 0x08
    4e5a:	a9 87       	std	Y+9, r26	; 0x09
    4e5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    4e60:	78 85       	ldd	r23, Y+8	; 0x08
    4e62:	89 85       	ldd	r24, Y+9	; 0x09
    4e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e66:	20 e0       	ldi	r18, 0x00	; 0
    4e68:	30 e0       	ldi	r19, 0x00	; 0
    4e6a:	40 e8       	ldi	r20, 0x80	; 128
    4e6c:	5f e3       	ldi	r21, 0x3F	; 63
    4e6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e72:	88 23       	and	r24, r24
    4e74:	2c f4       	brge	.+10     	; 0x4e80 <LCD_voidWriteCommand+0x8e>
		__ticks = 1;
    4e76:	81 e0       	ldi	r24, 0x01	; 1
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	9e 83       	std	Y+6, r25	; 0x06
    4e7c:	8d 83       	std	Y+5, r24	; 0x05
    4e7e:	3f c0       	rjmp	.+126    	; 0x4efe <LCD_voidWriteCommand+0x10c>
	else if (__tmp > 65535)
    4e80:	6f 81       	ldd	r22, Y+7	; 0x07
    4e82:	78 85       	ldd	r23, Y+8	; 0x08
    4e84:	89 85       	ldd	r24, Y+9	; 0x09
    4e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e88:	20 e0       	ldi	r18, 0x00	; 0
    4e8a:	3f ef       	ldi	r19, 0xFF	; 255
    4e8c:	4f e7       	ldi	r20, 0x7F	; 127
    4e8e:	57 e4       	ldi	r21, 0x47	; 71
    4e90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e94:	18 16       	cp	r1, r24
    4e96:	4c f5       	brge	.+82     	; 0x4eea <LCD_voidWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e98:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ea0:	20 e0       	ldi	r18, 0x00	; 0
    4ea2:	30 e0       	ldi	r19, 0x00	; 0
    4ea4:	40 e2       	ldi	r20, 0x20	; 32
    4ea6:	51 e4       	ldi	r21, 0x41	; 65
    4ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eac:	dc 01       	movw	r26, r24
    4eae:	cb 01       	movw	r24, r22
    4eb0:	bc 01       	movw	r22, r24
    4eb2:	cd 01       	movw	r24, r26
    4eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eb8:	dc 01       	movw	r26, r24
    4eba:	cb 01       	movw	r24, r22
    4ebc:	9e 83       	std	Y+6, r25	; 0x06
    4ebe:	8d 83       	std	Y+5, r24	; 0x05
    4ec0:	0f c0       	rjmp	.+30     	; 0x4ee0 <LCD_voidWriteCommand+0xee>
    4ec2:	88 ec       	ldi	r24, 0xC8	; 200
    4ec4:	90 e0       	ldi	r25, 0x00	; 0
    4ec6:	9c 83       	std	Y+4, r25	; 0x04
    4ec8:	8b 83       	std	Y+3, r24	; 0x03
    4eca:	8b 81       	ldd	r24, Y+3	; 0x03
    4ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    4ece:	01 97       	sbiw	r24, 0x01	; 1
    4ed0:	f1 f7       	brne	.-4      	; 0x4ece <LCD_voidWriteCommand+0xdc>
    4ed2:	9c 83       	std	Y+4, r25	; 0x04
    4ed4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    4eda:	01 97       	sbiw	r24, 0x01	; 1
    4edc:	9e 83       	std	Y+6, r25	; 0x06
    4ede:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ee4:	00 97       	sbiw	r24, 0x00	; 0
    4ee6:	69 f7       	brne	.-38     	; 0x4ec2 <LCD_voidWriteCommand+0xd0>
    4ee8:	14 c0       	rjmp	.+40     	; 0x4f12 <LCD_voidWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eea:	6f 81       	ldd	r22, Y+7	; 0x07
    4eec:	78 85       	ldd	r23, Y+8	; 0x08
    4eee:	89 85       	ldd	r24, Y+9	; 0x09
    4ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ef6:	dc 01       	movw	r26, r24
    4ef8:	cb 01       	movw	r24, r22
    4efa:	9e 83       	std	Y+6, r25	; 0x06
    4efc:	8d 83       	std	Y+5, r24	; 0x05
    4efe:	8d 81       	ldd	r24, Y+5	; 0x05
    4f00:	9e 81       	ldd	r25, Y+6	; 0x06
    4f02:	9a 83       	std	Y+2, r25	; 0x02
    4f04:	89 83       	std	Y+1, r24	; 0x01
    4f06:	89 81       	ldd	r24, Y+1	; 0x01
    4f08:	9a 81       	ldd	r25, Y+2	; 0x02
    4f0a:	01 97       	sbiw	r24, 0x01	; 1
    4f0c:	f1 f7       	brne	.-4      	; 0x4f0a <LCD_voidWriteCommand+0x118>
    4f0e:	9a 83       	std	Y+2, r25	; 0x02
    4f10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	//5- Set enable pin to be low again
	DIO_voidSetPinValue(EN_PORT , EN_PIN , LOW);
    4f12:	80 e0       	ldi	r24, 0x00	; 0
    4f14:	65 e0       	ldi	r22, 0x05	; 5
    4f16:	40 e0       	ldi	r20, 0x00	; 0
    4f18:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
}
    4f1c:	2f 96       	adiw	r28, 0x0f	; 15
    4f1e:	0f b6       	in	r0, 0x3f	; 63
    4f20:	f8 94       	cli
    4f22:	de bf       	out	0x3e, r29	; 62
    4f24:	0f be       	out	0x3f, r0	; 63
    4f26:	cd bf       	out	0x3d, r28	; 61
    4f28:	cf 91       	pop	r28
    4f2a:	df 91       	pop	r29
    4f2c:	08 95       	ret

00004f2e <LCD_voidWriteData>:

void LCD_voidWriteData (u8 Copy_u8Data)
{
    4f2e:	df 93       	push	r29
    4f30:	cf 93       	push	r28
    4f32:	cd b7       	in	r28, 0x3d	; 61
    4f34:	de b7       	in	r29, 0x3e	; 62
    4f36:	2f 97       	sbiw	r28, 0x0f	; 15
    4f38:	0f b6       	in	r0, 0x3f	; 63
    4f3a:	f8 94       	cli
    4f3c:	de bf       	out	0x3e, r29	; 62
    4f3e:	0f be       	out	0x3f, r0	; 63
    4f40:	cd bf       	out	0x3d, r28	; 61
    4f42:	8f 87       	std	Y+15, r24	; 0x0f
	//1- Set RW pin to be write -> 0
	DIO_voidSetPinValue(RW_PORT, RW_PIN , LOW);
    4f44:	80 e0       	ldi	r24, 0x00	; 0
    4f46:	66 e0       	ldi	r22, 0x06	; 6
    4f48:	40 e0       	ldi	r20, 0x00	; 0
    4f4a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>

	//2- Set RS pin to send data -> 1
	DIO_voidSetPinValue(RS_PORT , RS_PIN , HIGH);
    4f4e:	80 e0       	ldi	r24, 0x00	; 0
    4f50:	67 e0       	ldi	r22, 0x07	; 7
    4f52:	41 e0       	ldi	r20, 0x01	; 1
    4f54:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>

	//3- Set the data over data port
	DIO_voidSetPortValue(DATA_PORT , Copy_u8Data);
    4f58:	82 e0       	ldi	r24, 0x02	; 2
    4f5a:	6f 85       	ldd	r22, Y+15	; 0x0f
    4f5c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <DIO_voidSetPortValue>

	//4- Set enable pin to be high for 2ms
	DIO_voidSetPinValue(EN_PORT , EN_PIN , HIGH);
    4f60:	80 e0       	ldi	r24, 0x00	; 0
    4f62:	65 e0       	ldi	r22, 0x05	; 5
    4f64:	41 e0       	ldi	r20, 0x01	; 1
    4f66:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
    4f6a:	80 e0       	ldi	r24, 0x00	; 0
    4f6c:	90 e0       	ldi	r25, 0x00	; 0
    4f6e:	a0 e0       	ldi	r26, 0x00	; 0
    4f70:	b0 e4       	ldi	r27, 0x40	; 64
    4f72:	8b 87       	std	Y+11, r24	; 0x0b
    4f74:	9c 87       	std	Y+12, r25	; 0x0c
    4f76:	ad 87       	std	Y+13, r26	; 0x0d
    4f78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f80:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f82:	20 e0       	ldi	r18, 0x00	; 0
    4f84:	30 e0       	ldi	r19, 0x00	; 0
    4f86:	4a ef       	ldi	r20, 0xFA	; 250
    4f88:	54 e4       	ldi	r21, 0x44	; 68
    4f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f8e:	dc 01       	movw	r26, r24
    4f90:	cb 01       	movw	r24, r22
    4f92:	8f 83       	std	Y+7, r24	; 0x07
    4f94:	98 87       	std	Y+8, r25	; 0x08
    4f96:	a9 87       	std	Y+9, r26	; 0x09
    4f98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f9a:	6f 81       	ldd	r22, Y+7	; 0x07
    4f9c:	78 85       	ldd	r23, Y+8	; 0x08
    4f9e:	89 85       	ldd	r24, Y+9	; 0x09
    4fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fa2:	20 e0       	ldi	r18, 0x00	; 0
    4fa4:	30 e0       	ldi	r19, 0x00	; 0
    4fa6:	40 e8       	ldi	r20, 0x80	; 128
    4fa8:	5f e3       	ldi	r21, 0x3F	; 63
    4faa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4fae:	88 23       	and	r24, r24
    4fb0:	2c f4       	brge	.+10     	; 0x4fbc <LCD_voidWriteData+0x8e>
		__ticks = 1;
    4fb2:	81 e0       	ldi	r24, 0x01	; 1
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
    4fb6:	9e 83       	std	Y+6, r25	; 0x06
    4fb8:	8d 83       	std	Y+5, r24	; 0x05
    4fba:	3f c0       	rjmp	.+126    	; 0x503a <LCD_voidWriteData+0x10c>
	else if (__tmp > 65535)
    4fbc:	6f 81       	ldd	r22, Y+7	; 0x07
    4fbe:	78 85       	ldd	r23, Y+8	; 0x08
    4fc0:	89 85       	ldd	r24, Y+9	; 0x09
    4fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fc4:	20 e0       	ldi	r18, 0x00	; 0
    4fc6:	3f ef       	ldi	r19, 0xFF	; 255
    4fc8:	4f e7       	ldi	r20, 0x7F	; 127
    4fca:	57 e4       	ldi	r21, 0x47	; 71
    4fcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4fd0:	18 16       	cp	r1, r24
    4fd2:	4c f5       	brge	.+82     	; 0x5026 <LCD_voidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fda:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fdc:	20 e0       	ldi	r18, 0x00	; 0
    4fde:	30 e0       	ldi	r19, 0x00	; 0
    4fe0:	40 e2       	ldi	r20, 0x20	; 32
    4fe2:	51 e4       	ldi	r21, 0x41	; 65
    4fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fe8:	dc 01       	movw	r26, r24
    4fea:	cb 01       	movw	r24, r22
    4fec:	bc 01       	movw	r22, r24
    4fee:	cd 01       	movw	r24, r26
    4ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ff4:	dc 01       	movw	r26, r24
    4ff6:	cb 01       	movw	r24, r22
    4ff8:	9e 83       	std	Y+6, r25	; 0x06
    4ffa:	8d 83       	std	Y+5, r24	; 0x05
    4ffc:	0f c0       	rjmp	.+30     	; 0x501c <LCD_voidWriteData+0xee>
    4ffe:	88 ec       	ldi	r24, 0xC8	; 200
    5000:	90 e0       	ldi	r25, 0x00	; 0
    5002:	9c 83       	std	Y+4, r25	; 0x04
    5004:	8b 83       	std	Y+3, r24	; 0x03
    5006:	8b 81       	ldd	r24, Y+3	; 0x03
    5008:	9c 81       	ldd	r25, Y+4	; 0x04
    500a:	01 97       	sbiw	r24, 0x01	; 1
    500c:	f1 f7       	brne	.-4      	; 0x500a <LCD_voidWriteData+0xdc>
    500e:	9c 83       	std	Y+4, r25	; 0x04
    5010:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5012:	8d 81       	ldd	r24, Y+5	; 0x05
    5014:	9e 81       	ldd	r25, Y+6	; 0x06
    5016:	01 97       	sbiw	r24, 0x01	; 1
    5018:	9e 83       	std	Y+6, r25	; 0x06
    501a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    501c:	8d 81       	ldd	r24, Y+5	; 0x05
    501e:	9e 81       	ldd	r25, Y+6	; 0x06
    5020:	00 97       	sbiw	r24, 0x00	; 0
    5022:	69 f7       	brne	.-38     	; 0x4ffe <LCD_voidWriteData+0xd0>
    5024:	14 c0       	rjmp	.+40     	; 0x504e <LCD_voidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5026:	6f 81       	ldd	r22, Y+7	; 0x07
    5028:	78 85       	ldd	r23, Y+8	; 0x08
    502a:	89 85       	ldd	r24, Y+9	; 0x09
    502c:	9a 85       	ldd	r25, Y+10	; 0x0a
    502e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5032:	dc 01       	movw	r26, r24
    5034:	cb 01       	movw	r24, r22
    5036:	9e 83       	std	Y+6, r25	; 0x06
    5038:	8d 83       	std	Y+5, r24	; 0x05
    503a:	8d 81       	ldd	r24, Y+5	; 0x05
    503c:	9e 81       	ldd	r25, Y+6	; 0x06
    503e:	9a 83       	std	Y+2, r25	; 0x02
    5040:	89 83       	std	Y+1, r24	; 0x01
    5042:	89 81       	ldd	r24, Y+1	; 0x01
    5044:	9a 81       	ldd	r25, Y+2	; 0x02
    5046:	01 97       	sbiw	r24, 0x01	; 1
    5048:	f1 f7       	brne	.-4      	; 0x5046 <LCD_voidWriteData+0x118>
    504a:	9a 83       	std	Y+2, r25	; 0x02
    504c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	//5- Set enable pin to be low again
	DIO_voidSetPinValue(EN_PORT , EN_PIN , LOW);
    504e:	80 e0       	ldi	r24, 0x00	; 0
    5050:	65 e0       	ldi	r22, 0x05	; 5
    5052:	40 e0       	ldi	r20, 0x00	; 0
    5054:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
}
    5058:	2f 96       	adiw	r28, 0x0f	; 15
    505a:	0f b6       	in	r0, 0x3f	; 63
    505c:	f8 94       	cli
    505e:	de bf       	out	0x3e, r29	; 62
    5060:	0f be       	out	0x3f, r0	; 63
    5062:	cd bf       	out	0x3d, r28	; 61
    5064:	cf 91       	pop	r28
    5066:	df 91       	pop	r29
    5068:	08 95       	ret

0000506a <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Copy_pu8String )
{
    506a:	df 93       	push	r29
    506c:	cf 93       	push	r28
    506e:	00 d0       	rcall	.+0      	; 0x5070 <LCD_voidWriteString+0x6>
    5070:	0f 92       	push	r0
    5072:	cd b7       	in	r28, 0x3d	; 61
    5074:	de b7       	in	r29, 0x3e	; 62
    5076:	9b 83       	std	Y+3, r25	; 0x03
    5078:	8a 83       	std	Y+2, r24	; 0x02
	//local variable to iterate over string characters
	u8 Local_u8CharIterator = 0 ;
    507a:	19 82       	std	Y+1, r1	; 0x01
    507c:	0e c0       	rjmp	.+28     	; 0x509a <LCD_voidWriteString+0x30>

	//loop till getting to \0 character -> end of string
	while(Copy_pu8String[Local_u8CharIterator] != '\0')
	{
		//send the character to get displayed
		LCD_voidWriteData(Copy_pu8String[Local_u8CharIterator]) ;
    507e:	89 81       	ldd	r24, Y+1	; 0x01
    5080:	28 2f       	mov	r18, r24
    5082:	30 e0       	ldi	r19, 0x00	; 0
    5084:	8a 81       	ldd	r24, Y+2	; 0x02
    5086:	9b 81       	ldd	r25, Y+3	; 0x03
    5088:	fc 01       	movw	r30, r24
    508a:	e2 0f       	add	r30, r18
    508c:	f3 1f       	adc	r31, r19
    508e:	80 81       	ld	r24, Z
    5090:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <LCD_voidWriteData>

		//move to the next character
		Local_u8CharIterator ++ ;
    5094:	89 81       	ldd	r24, Y+1	; 0x01
    5096:	8f 5f       	subi	r24, 0xFF	; 255
    5098:	89 83       	std	Y+1, r24	; 0x01
{
	//local variable to iterate over string characters
	u8 Local_u8CharIterator = 0 ;

	//loop till getting to \0 character -> end of string
	while(Copy_pu8String[Local_u8CharIterator] != '\0')
    509a:	89 81       	ldd	r24, Y+1	; 0x01
    509c:	28 2f       	mov	r18, r24
    509e:	30 e0       	ldi	r19, 0x00	; 0
    50a0:	8a 81       	ldd	r24, Y+2	; 0x02
    50a2:	9b 81       	ldd	r25, Y+3	; 0x03
    50a4:	fc 01       	movw	r30, r24
    50a6:	e2 0f       	add	r30, r18
    50a8:	f3 1f       	adc	r31, r19
    50aa:	80 81       	ld	r24, Z
    50ac:	88 23       	and	r24, r24
    50ae:	39 f7       	brne	.-50     	; 0x507e <LCD_voidWriteString+0x14>
		Local_u8CharIterator ++ ;


	}

}
    50b0:	0f 90       	pop	r0
    50b2:	0f 90       	pop	r0
    50b4:	0f 90       	pop	r0
    50b6:	cf 91       	pop	r28
    50b8:	df 91       	pop	r29
    50ba:	08 95       	ret

000050bc <LCD_voidWriteStringTwoLine>:

void LCD_voidWriteStringTwoLine(u8* Copy_pu8String )
{
    50bc:	df 93       	push	r29
    50be:	cf 93       	push	r28
    50c0:	00 d0       	rcall	.+0      	; 0x50c2 <LCD_voidWriteStringTwoLine+0x6>
    50c2:	00 d0       	rcall	.+0      	; 0x50c4 <LCD_voidWriteStringTwoLine+0x8>
    50c4:	0f 92       	push	r0
    50c6:	cd b7       	in	r28, 0x3d	; 61
    50c8:	de b7       	in	r29, 0x3e	; 62
    50ca:	9d 83       	std	Y+5, r25	; 0x05
    50cc:	8c 83       	std	Y+4, r24	; 0x04
	//local variable to iterate over string characters
	u8 Local_u8CharIterator = 0 ;
    50ce:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8Pos = 1 ;
    50d0:	81 e0       	ldi	r24, 0x01	; 1
    50d2:	8a 83       	std	Y+2, r24	; 0x02
    u8 pos =0 ;
    50d4:	19 82       	std	Y+1, r1	; 0x01
    50d6:	35 c0       	rjmp	.+106    	; 0x5142 <LCD_voidWriteStringTwoLine+0x86>
	//loop till getting to \0 character -> end of string
	while(Copy_pu8String[Local_u8CharIterator] != '\0')
	{
		//send the character to get displayed
		LCD_voidWriteData(Copy_pu8String[Local_u8CharIterator]) ;
    50d8:	8b 81       	ldd	r24, Y+3	; 0x03
    50da:	28 2f       	mov	r18, r24
    50dc:	30 e0       	ldi	r19, 0x00	; 0
    50de:	8c 81       	ldd	r24, Y+4	; 0x04
    50e0:	9d 81       	ldd	r25, Y+5	; 0x05
    50e2:	fc 01       	movw	r30, r24
    50e4:	e2 0f       	add	r30, r18
    50e6:	f3 1f       	adc	r31, r19
    50e8:	80 81       	ld	r24, Z
    50ea:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <LCD_voidWriteData>

		//move to the next character
		Local_u8CharIterator ++ ;
    50ee:	8b 81       	ldd	r24, Y+3	; 0x03
    50f0:	8f 5f       	subi	r24, 0xFF	; 255
    50f2:	8b 83       	std	Y+3, r24	; 0x03
		Local_u8Pos++;
    50f4:	8a 81       	ldd	r24, Y+2	; 0x02
    50f6:	8f 5f       	subi	r24, 0xFF	; 255
    50f8:	8a 83       	std	Y+2, r24	; 0x02
		if(Local_u8Pos > 16)
    50fa:	8a 81       	ldd	r24, Y+2	; 0x02
    50fc:	81 31       	cpi	r24, 0x11	; 17
    50fe:	08 f1       	brcs	.+66     	; 0x5142 <LCD_voidWriteStringTwoLine+0x86>
    5100:	15 c0       	rjmp	.+42     	; 0x512c <LCD_voidWriteStringTwoLine+0x70>
		{

			while(Copy_pu8String[Local_u8CharIterator] != '\0')
			{
			LCD_voidGOToXY(2,pos);
    5102:	82 e0       	ldi	r24, 0x02	; 2
    5104:	69 81       	ldd	r22, Y+1	; 0x01
    5106:	0e 94 b5 28 	call	0x516a	; 0x516a <LCD_voidGOToXY>
			LCD_voidWriteData(Copy_pu8String[Local_u8CharIterator]);
    510a:	8b 81       	ldd	r24, Y+3	; 0x03
    510c:	28 2f       	mov	r18, r24
    510e:	30 e0       	ldi	r19, 0x00	; 0
    5110:	8c 81       	ldd	r24, Y+4	; 0x04
    5112:	9d 81       	ldd	r25, Y+5	; 0x05
    5114:	fc 01       	movw	r30, r24
    5116:	e2 0f       	add	r30, r18
    5118:	f3 1f       	adc	r31, r19
    511a:	80 81       	ld	r24, Z
    511c:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <LCD_voidWriteData>
			Local_u8CharIterator ++ ;
    5120:	8b 81       	ldd	r24, Y+3	; 0x03
    5122:	8f 5f       	subi	r24, 0xFF	; 255
    5124:	8b 83       	std	Y+3, r24	; 0x03
			pos++;
    5126:	89 81       	ldd	r24, Y+1	; 0x01
    5128:	8f 5f       	subi	r24, 0xFF	; 255
    512a:	89 83       	std	Y+1, r24	; 0x01
		Local_u8CharIterator ++ ;
		Local_u8Pos++;
		if(Local_u8Pos > 16)
		{

			while(Copy_pu8String[Local_u8CharIterator] != '\0')
    512c:	8b 81       	ldd	r24, Y+3	; 0x03
    512e:	28 2f       	mov	r18, r24
    5130:	30 e0       	ldi	r19, 0x00	; 0
    5132:	8c 81       	ldd	r24, Y+4	; 0x04
    5134:	9d 81       	ldd	r25, Y+5	; 0x05
    5136:	fc 01       	movw	r30, r24
    5138:	e2 0f       	add	r30, r18
    513a:	f3 1f       	adc	r31, r19
    513c:	80 81       	ld	r24, Z
    513e:	88 23       	and	r24, r24
    5140:	01 f7       	brne	.-64     	; 0x5102 <LCD_voidWriteStringTwoLine+0x46>
	//local variable to iterate over string characters
	u8 Local_u8CharIterator = 0 ;
    u8 Local_u8Pos = 1 ;
    u8 pos =0 ;
	//loop till getting to \0 character -> end of string
	while(Copy_pu8String[Local_u8CharIterator] != '\0')
    5142:	8b 81       	ldd	r24, Y+3	; 0x03
    5144:	28 2f       	mov	r18, r24
    5146:	30 e0       	ldi	r19, 0x00	; 0
    5148:	8c 81       	ldd	r24, Y+4	; 0x04
    514a:	9d 81       	ldd	r25, Y+5	; 0x05
    514c:	fc 01       	movw	r30, r24
    514e:	e2 0f       	add	r30, r18
    5150:	f3 1f       	adc	r31, r19
    5152:	80 81       	ld	r24, Z
    5154:	88 23       	and	r24, r24
    5156:	09 f0       	breq	.+2      	; 0x515a <LCD_voidWriteStringTwoLine+0x9e>
    5158:	bf cf       	rjmp	.-130    	; 0x50d8 <LCD_voidWriteStringTwoLine+0x1c>
			pos++;
			}
		}

	}
}
    515a:	0f 90       	pop	r0
    515c:	0f 90       	pop	r0
    515e:	0f 90       	pop	r0
    5160:	0f 90       	pop	r0
    5162:	0f 90       	pop	r0
    5164:	cf 91       	pop	r28
    5166:	df 91       	pop	r29
    5168:	08 95       	ret

0000516a <LCD_voidGOToXY>:

void LCD_voidGOToXY(u8 Copy_u8ROW ,u8 Copy_u8COL)
{
    516a:	df 93       	push	r29
    516c:	cf 93       	push	r28
    516e:	00 d0       	rcall	.+0      	; 0x5170 <LCD_voidGOToXY+0x6>
    5170:	00 d0       	rcall	.+0      	; 0x5172 <LCD_voidGOToXY+0x8>
    5172:	cd b7       	in	r28, 0x3d	; 61
    5174:	de b7       	in	r29, 0x3e	; 62
    5176:	89 83       	std	Y+1, r24	; 0x01
    5178:	6a 83       	std	Y+2, r22	; 0x02
	if (((Copy_u8ROW <= 2 ) && (Copy_u8ROW > 0)) && ((Copy_u8COL > 0) && (Copy_u8COL <= 16)))
    517a:	89 81       	ldd	r24, Y+1	; 0x01
    517c:	83 30       	cpi	r24, 0x03	; 3
    517e:	10 f5       	brcc	.+68     	; 0x51c4 <LCD_voidGOToXY+0x5a>
    5180:	89 81       	ldd	r24, Y+1	; 0x01
    5182:	88 23       	and	r24, r24
    5184:	f9 f0       	breq	.+62     	; 0x51c4 <LCD_voidGOToXY+0x5a>
    5186:	8a 81       	ldd	r24, Y+2	; 0x02
    5188:	88 23       	and	r24, r24
    518a:	e1 f0       	breq	.+56     	; 0x51c4 <LCD_voidGOToXY+0x5a>
    518c:	8a 81       	ldd	r24, Y+2	; 0x02
    518e:	81 31       	cpi	r24, 0x11	; 17
    5190:	c8 f4       	brcc	.+50     	; 0x51c4 <LCD_voidGOToXY+0x5a>
	{
		switch (Copy_u8ROW)
    5192:	89 81       	ldd	r24, Y+1	; 0x01
    5194:	28 2f       	mov	r18, r24
    5196:	30 e0       	ldi	r19, 0x00	; 0
    5198:	3c 83       	std	Y+4, r19	; 0x04
    519a:	2b 83       	std	Y+3, r18	; 0x03
    519c:	8b 81       	ldd	r24, Y+3	; 0x03
    519e:	9c 81       	ldd	r25, Y+4	; 0x04
    51a0:	81 30       	cpi	r24, 0x01	; 1
    51a2:	91 05       	cpc	r25, r1
    51a4:	31 f0       	breq	.+12     	; 0x51b2 <LCD_voidGOToXY+0x48>
    51a6:	2b 81       	ldd	r18, Y+3	; 0x03
    51a8:	3c 81       	ldd	r19, Y+4	; 0x04
    51aa:	22 30       	cpi	r18, 0x02	; 2
    51ac:	31 05       	cpc	r19, r1
    51ae:	31 f0       	breq	.+12     	; 0x51bc <LCD_voidGOToXY+0x52>
    51b0:	09 c0       	rjmp	.+18     	; 0x51c4 <LCD_voidGOToXY+0x5a>
		{
		case 1 :LCD_voidWriteCommand(Copy_u8COL + 127);break;
    51b2:	8a 81       	ldd	r24, Y+2	; 0x02
    51b4:	81 58       	subi	r24, 0x81	; 129
    51b6:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <LCD_voidWriteCommand>
    51ba:	04 c0       	rjmp	.+8      	; 0x51c4 <LCD_voidGOToXY+0x5a>
		case 2 :LCD_voidWriteCommand(Copy_u8COL + 191);break;
    51bc:	8a 81       	ldd	r24, Y+2	; 0x02
    51be:	81 54       	subi	r24, 0x41	; 65
    51c0:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <LCD_voidWriteCommand>
		default:break;
		}
	}
}
    51c4:	0f 90       	pop	r0
    51c6:	0f 90       	pop	r0
    51c8:	0f 90       	pop	r0
    51ca:	0f 90       	pop	r0
    51cc:	cf 91       	pop	r28
    51ce:	df 91       	pop	r29
    51d0:	08 95       	ret

000051d2 <LCD_voidSendSpecialCharacter>:

void LCD_voidSendSpecialCharacter(u8 * Copy_pu8Pattern , u8 Copy_u8Location
								  ,u8 Copy_u8Row , u8 Copy_u8Col )
{
    51d2:	df 93       	push	r29
    51d4:	cf 93       	push	r28
    51d6:	cd b7       	in	r28, 0x3d	; 61
    51d8:	de b7       	in	r29, 0x3e	; 62
    51da:	27 97       	sbiw	r28, 0x07	; 7
    51dc:	0f b6       	in	r0, 0x3f	; 63
    51de:	f8 94       	cli
    51e0:	de bf       	out	0x3e, r29	; 62
    51e2:	0f be       	out	0x3f, r0	; 63
    51e4:	cd bf       	out	0x3d, r28	; 61
    51e6:	9c 83       	std	Y+4, r25	; 0x04
    51e8:	8b 83       	std	Y+3, r24	; 0x03
    51ea:	6d 83       	std	Y+5, r22	; 0x05
    51ec:	4e 83       	std	Y+6, r20	; 0x06
    51ee:	2f 83       	std	Y+7, r18	; 0x07
	/*An iterator to loop over pattern bytes*/
	u8 Local_u8PatternIterator = 0 ;
    51f0:	1a 82       	std	Y+2, r1	; 0x02

	//1. Set the address of the location in CGRAM
	u8 Local_u8CGRAMAddress = Copy_u8Location * 8 ;
    51f2:	8d 81       	ldd	r24, Y+5	; 0x05
    51f4:	88 2f       	mov	r24, r24
    51f6:	90 e0       	ldi	r25, 0x00	; 0
    51f8:	88 0f       	add	r24, r24
    51fa:	99 1f       	adc	r25, r25
    51fc:	88 0f       	add	r24, r24
    51fe:	99 1f       	adc	r25, r25
    5200:	88 0f       	add	r24, r24
    5202:	99 1f       	adc	r25, r25
    5204:	89 83       	std	Y+1, r24	; 0x01

	//2. Move the Address Counter to the target location
	LCD_voidWriteCommand(Local_u8CGRAMAddress + 64);
    5206:	89 81       	ldd	r24, Y+1	; 0x01
    5208:	80 5c       	subi	r24, 0xC0	; 192
    520a:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <LCD_voidWriteCommand>

	//3. Set the target pattern into the Bytes of the CGRAM location
	for(Local_u8PatternIterator = 0 ; Local_u8PatternIterator < 7 ; Local_u8PatternIterator++)
    520e:	1a 82       	std	Y+2, r1	; 0x02
    5210:	0e c0       	rjmp	.+28     	; 0x522e <LCD_voidSendSpecialCharacter+0x5c>
	{
		LCD_voidWriteData(Copy_pu8Pattern[Local_u8PatternIterator]);
    5212:	8a 81       	ldd	r24, Y+2	; 0x02
    5214:	28 2f       	mov	r18, r24
    5216:	30 e0       	ldi	r19, 0x00	; 0
    5218:	8b 81       	ldd	r24, Y+3	; 0x03
    521a:	9c 81       	ldd	r25, Y+4	; 0x04
    521c:	fc 01       	movw	r30, r24
    521e:	e2 0f       	add	r30, r18
    5220:	f3 1f       	adc	r31, r19
    5222:	80 81       	ld	r24, Z
    5224:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <LCD_voidWriteData>

	//2. Move the Address Counter to the target location
	LCD_voidWriteCommand(Local_u8CGRAMAddress + 64);

	//3. Set the target pattern into the Bytes of the CGRAM location
	for(Local_u8PatternIterator = 0 ; Local_u8PatternIterator < 7 ; Local_u8PatternIterator++)
    5228:	8a 81       	ldd	r24, Y+2	; 0x02
    522a:	8f 5f       	subi	r24, 0xFF	; 255
    522c:	8a 83       	std	Y+2, r24	; 0x02
    522e:	8a 81       	ldd	r24, Y+2	; 0x02
    5230:	87 30       	cpi	r24, 0x07	; 7
    5232:	78 f3       	brcs	.-34     	; 0x5212 <LCD_voidSendSpecialCharacter+0x40>
		LCD_voidWriteData(Copy_pu8Pattern[Local_u8PatternIterator]);
		//Address counter increments automatically
	}

	//4. Turning back to DDRAM
	LCD_voidGOToXY(Copy_u8Row , Copy_u8Col);
    5234:	8e 81       	ldd	r24, Y+6	; 0x06
    5236:	6f 81       	ldd	r22, Y+7	; 0x07
    5238:	0e 94 b5 28 	call	0x516a	; 0x516a <LCD_voidGOToXY>

	//5. Order DDRAM to read the pattern from CGRAM and display it
	LCD_voidWriteData(Copy_u8Location);
    523c:	8d 81       	ldd	r24, Y+5	; 0x05
    523e:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <LCD_voidWriteData>
}
    5242:	27 96       	adiw	r28, 0x07	; 7
    5244:	0f b6       	in	r0, 0x3f	; 63
    5246:	f8 94       	cli
    5248:	de bf       	out	0x3e, r29	; 62
    524a:	0f be       	out	0x3f, r0	; 63
    524c:	cd bf       	out	0x3d, r28	; 61
    524e:	cf 91       	pop	r28
    5250:	df 91       	pop	r29
    5252:	08 95       	ret

00005254 <LCD_voidFree>:

void LCD_voidFree(u8 Copy_u8ROW ,u8 Copy_u8COL)
{
    5254:	df 93       	push	r29
    5256:	cf 93       	push	r28
    5258:	00 d0       	rcall	.+0      	; 0x525a <LCD_voidFree+0x6>
    525a:	cd b7       	in	r28, 0x3d	; 61
    525c:	de b7       	in	r29, 0x3e	; 62
    525e:	89 83       	std	Y+1, r24	; 0x01
    5260:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidGOToXY(Copy_u8ROW,Copy_u8COL);
    5262:	89 81       	ldd	r24, Y+1	; 0x01
    5264:	6a 81       	ldd	r22, Y+2	; 0x02
    5266:	0e 94 b5 28 	call	0x516a	; 0x516a <LCD_voidGOToXY>
	LCD_voidWriteData(128);
    526a:	80 e8       	ldi	r24, 0x80	; 128
    526c:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <LCD_voidWriteData>
	LCD_voidGOToXY(Copy_u8ROW,Copy_u8COL);
    5270:	89 81       	ldd	r24, Y+1	; 0x01
    5272:	6a 81       	ldd	r22, Y+2	; 0x02
    5274:	0e 94 b5 28 	call	0x516a	; 0x516a <LCD_voidGOToXY>
}
    5278:	0f 90       	pop	r0
    527a:	0f 90       	pop	r0
    527c:	cf 91       	pop	r28
    527e:	df 91       	pop	r29
    5280:	08 95       	ret

00005282 <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(void)
{
    5282:	df 93       	push	r29
    5284:	cf 93       	push	r28
    5286:	cd b7       	in	r28, 0x3d	; 61
    5288:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCommand(Lcd_Clear);
    528a:	81 e0       	ldi	r24, 0x01	; 1
    528c:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <LCD_voidWriteCommand>
}
    5290:	cf 91       	pop	r28
    5292:	df 91       	pop	r29
    5294:	08 95       	ret

00005296 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 copy_u32Number)
{
    5296:	ef 92       	push	r14
    5298:	ff 92       	push	r15
    529a:	0f 93       	push	r16
    529c:	1f 93       	push	r17
    529e:	df 93       	push	r29
    52a0:	cf 93       	push	r28
    52a2:	cd b7       	in	r28, 0x3d	; 61
    52a4:	de b7       	in	r29, 0x3e	; 62
    52a6:	28 97       	sbiw	r28, 0x08	; 8
    52a8:	0f b6       	in	r0, 0x3f	; 63
    52aa:	f8 94       	cli
    52ac:	de bf       	out	0x3e, r29	; 62
    52ae:	0f be       	out	0x3f, r0	; 63
    52b0:	cd bf       	out	0x3d, r28	; 61
    52b2:	6d 83       	std	Y+5, r22	; 0x05
    52b4:	7e 83       	std	Y+6, r23	; 0x06
    52b6:	8f 83       	std	Y+7, r24	; 0x07
    52b8:	98 87       	std	Y+8, r25	; 0x08
	u32 Local_u32Reverse = 1;
    52ba:	81 e0       	ldi	r24, 0x01	; 1
    52bc:	90 e0       	ldi	r25, 0x00	; 0
    52be:	a0 e0       	ldi	r26, 0x00	; 0
    52c0:	b0 e0       	ldi	r27, 0x00	; 0
    52c2:	89 83       	std	Y+1, r24	; 0x01
    52c4:	9a 83       	std	Y+2, r25	; 0x02
    52c6:	ab 83       	std	Y+3, r26	; 0x03
    52c8:	bc 83       	std	Y+4, r27	; 0x04
    52ca:	36 c0       	rjmp	.+108    	; 0x5338 <LCD_voidWriteNumber+0xa2>
while(copy_u32Number != 0)
{
	Local_u32Reverse = Local_u32Reverse * 10 + copy_u32Number%10;
    52cc:	89 81       	ldd	r24, Y+1	; 0x01
    52ce:	9a 81       	ldd	r25, Y+2	; 0x02
    52d0:	ab 81       	ldd	r26, Y+3	; 0x03
    52d2:	bc 81       	ldd	r27, Y+4	; 0x04
    52d4:	2a e0       	ldi	r18, 0x0A	; 10
    52d6:	30 e0       	ldi	r19, 0x00	; 0
    52d8:	40 e0       	ldi	r20, 0x00	; 0
    52da:	50 e0       	ldi	r21, 0x00	; 0
    52dc:	bc 01       	movw	r22, r24
    52de:	cd 01       	movw	r24, r26
    52e0:	0e 94 59 3b 	call	0x76b2	; 0x76b2 <__mulsi3>
    52e4:	7b 01       	movw	r14, r22
    52e6:	8c 01       	movw	r16, r24
    52e8:	8d 81       	ldd	r24, Y+5	; 0x05
    52ea:	9e 81       	ldd	r25, Y+6	; 0x06
    52ec:	af 81       	ldd	r26, Y+7	; 0x07
    52ee:	b8 85       	ldd	r27, Y+8	; 0x08
    52f0:	2a e0       	ldi	r18, 0x0A	; 10
    52f2:	30 e0       	ldi	r19, 0x00	; 0
    52f4:	40 e0       	ldi	r20, 0x00	; 0
    52f6:	50 e0       	ldi	r21, 0x00	; 0
    52f8:	bc 01       	movw	r22, r24
    52fa:	cd 01       	movw	r24, r26
    52fc:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <__udivmodsi4>
    5300:	dc 01       	movw	r26, r24
    5302:	cb 01       	movw	r24, r22
    5304:	8e 0d       	add	r24, r14
    5306:	9f 1d       	adc	r25, r15
    5308:	a0 1f       	adc	r26, r16
    530a:	b1 1f       	adc	r27, r17
    530c:	89 83       	std	Y+1, r24	; 0x01
    530e:	9a 83       	std	Y+2, r25	; 0x02
    5310:	ab 83       	std	Y+3, r26	; 0x03
    5312:	bc 83       	std	Y+4, r27	; 0x04
	copy_u32Number /= 10;
    5314:	8d 81       	ldd	r24, Y+5	; 0x05
    5316:	9e 81       	ldd	r25, Y+6	; 0x06
    5318:	af 81       	ldd	r26, Y+7	; 0x07
    531a:	b8 85       	ldd	r27, Y+8	; 0x08
    531c:	2a e0       	ldi	r18, 0x0A	; 10
    531e:	30 e0       	ldi	r19, 0x00	; 0
    5320:	40 e0       	ldi	r20, 0x00	; 0
    5322:	50 e0       	ldi	r21, 0x00	; 0
    5324:	bc 01       	movw	r22, r24
    5326:	cd 01       	movw	r24, r26
    5328:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <__udivmodsi4>
    532c:	da 01       	movw	r26, r20
    532e:	c9 01       	movw	r24, r18
    5330:	8d 83       	std	Y+5, r24	; 0x05
    5332:	9e 83       	std	Y+6, r25	; 0x06
    5334:	af 83       	std	Y+7, r26	; 0x07
    5336:	b8 87       	std	Y+8, r27	; 0x08
}

void LCD_voidWriteNumber(u32 copy_u32Number)
{
	u32 Local_u32Reverse = 1;
while(copy_u32Number != 0)
    5338:	8d 81       	ldd	r24, Y+5	; 0x05
    533a:	9e 81       	ldd	r25, Y+6	; 0x06
    533c:	af 81       	ldd	r26, Y+7	; 0x07
    533e:	b8 85       	ldd	r27, Y+8	; 0x08
    5340:	00 97       	sbiw	r24, 0x00	; 0
    5342:	a1 05       	cpc	r26, r1
    5344:	b1 05       	cpc	r27, r1
    5346:	11 f6       	brne	.-124    	; 0x52cc <LCD_voidWriteNumber+0x36>

}
do
{

	LCD_voidWriteData((Local_u32Reverse%10) +'0');
    5348:	89 81       	ldd	r24, Y+1	; 0x01
    534a:	9a 81       	ldd	r25, Y+2	; 0x02
    534c:	ab 81       	ldd	r26, Y+3	; 0x03
    534e:	bc 81       	ldd	r27, Y+4	; 0x04
    5350:	2a e0       	ldi	r18, 0x0A	; 10
    5352:	30 e0       	ldi	r19, 0x00	; 0
    5354:	40 e0       	ldi	r20, 0x00	; 0
    5356:	50 e0       	ldi	r21, 0x00	; 0
    5358:	bc 01       	movw	r22, r24
    535a:	cd 01       	movw	r24, r26
    535c:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <__udivmodsi4>
    5360:	dc 01       	movw	r26, r24
    5362:	cb 01       	movw	r24, r22
    5364:	80 5d       	subi	r24, 0xD0	; 208
    5366:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <LCD_voidWriteData>
	Local_u32Reverse /= 10;
    536a:	89 81       	ldd	r24, Y+1	; 0x01
    536c:	9a 81       	ldd	r25, Y+2	; 0x02
    536e:	ab 81       	ldd	r26, Y+3	; 0x03
    5370:	bc 81       	ldd	r27, Y+4	; 0x04
    5372:	2a e0       	ldi	r18, 0x0A	; 10
    5374:	30 e0       	ldi	r19, 0x00	; 0
    5376:	40 e0       	ldi	r20, 0x00	; 0
    5378:	50 e0       	ldi	r21, 0x00	; 0
    537a:	bc 01       	movw	r22, r24
    537c:	cd 01       	movw	r24, r26
    537e:	0e 94 78 3b 	call	0x76f0	; 0x76f0 <__udivmodsi4>
    5382:	da 01       	movw	r26, r20
    5384:	c9 01       	movw	r24, r18
    5386:	89 83       	std	Y+1, r24	; 0x01
    5388:	9a 83       	std	Y+2, r25	; 0x02
    538a:	ab 83       	std	Y+3, r26	; 0x03
    538c:	bc 83       	std	Y+4, r27	; 0x04

}
while(Local_u32Reverse != 1);
    538e:	89 81       	ldd	r24, Y+1	; 0x01
    5390:	9a 81       	ldd	r25, Y+2	; 0x02
    5392:	ab 81       	ldd	r26, Y+3	; 0x03
    5394:	bc 81       	ldd	r27, Y+4	; 0x04
    5396:	81 30       	cpi	r24, 0x01	; 1
    5398:	91 05       	cpc	r25, r1
    539a:	a1 05       	cpc	r26, r1
    539c:	b1 05       	cpc	r27, r1
    539e:	a1 f6       	brne	.-88     	; 0x5348 <LCD_voidWriteNumber+0xb2>
}
    53a0:	28 96       	adiw	r28, 0x08	; 8
    53a2:	0f b6       	in	r0, 0x3f	; 63
    53a4:	f8 94       	cli
    53a6:	de bf       	out	0x3e, r29	; 62
    53a8:	0f be       	out	0x3f, r0	; 63
    53aa:	cd bf       	out	0x3d, r28	; 61
    53ac:	cf 91       	pop	r28
    53ae:	df 91       	pop	r29
    53b0:	1f 91       	pop	r17
    53b2:	0f 91       	pop	r16
    53b4:	ff 90       	pop	r15
    53b6:	ef 90       	pop	r14
    53b8:	08 95       	ret

000053ba <KPD_voidInit>:
/*************************************************************************/
/***************************Functions' implementation*********************/
/*************************************************************************/

void KPD_voidInit(void)
{
    53ba:	df 93       	push	r29
    53bc:	cf 93       	push	r28
    53be:	cd b7       	in	r28, 0x3d	; 61
    53c0:	de b7       	in	r29, 0x3e	; 62
	//Set the direction of rows to be input pull up
	DIO_voidSetPinDirection(KPD_PORT , ROW0_PIN , INPUT_PULL_UP);
    53c2:	81 e0       	ldi	r24, 0x01	; 1
    53c4:	60 e0       	ldi	r22, 0x00	; 0
    53c6:	42 e0       	ldi	r20, 0x02	; 2
    53c8:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , ROW1_PIN , INPUT_PULL_UP);
    53cc:	81 e0       	ldi	r24, 0x01	; 1
    53ce:	61 e0       	ldi	r22, 0x01	; 1
    53d0:	42 e0       	ldi	r20, 0x02	; 2
    53d2:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , ROW2_PIN , INPUT_PULL_UP);
    53d6:	81 e0       	ldi	r24, 0x01	; 1
    53d8:	62 e0       	ldi	r22, 0x02	; 2
    53da:	42 e0       	ldi	r20, 0x02	; 2
    53dc:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , ROW3_PIN , INPUT_PULL_UP);
    53e0:	81 e0       	ldi	r24, 0x01	; 1
    53e2:	63 e0       	ldi	r22, 0x03	; 3
    53e4:	42 e0       	ldi	r20, 0x02	; 2
    53e6:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>


	//Set the direction of columns to be output
	DIO_voidSetPinDirection(KPD_PORT , COL0_PIN , OUTPUT);
    53ea:	81 e0       	ldi	r24, 0x01	; 1
    53ec:	64 e0       	ldi	r22, 0x04	; 4
    53ee:	41 e0       	ldi	r20, 0x01	; 1
    53f0:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , COL1_PIN , OUTPUT);
    53f4:	81 e0       	ldi	r24, 0x01	; 1
    53f6:	65 e0       	ldi	r22, 0x05	; 5
    53f8:	41 e0       	ldi	r20, 0x01	; 1
    53fa:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , COL2_PIN , OUTPUT);
    53fe:	81 e0       	ldi	r24, 0x01	; 1
    5400:	66 e0       	ldi	r22, 0x06	; 6
    5402:	41 e0       	ldi	r20, 0x01	; 1
    5404:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_PORT , COL3_PIN , OUTPUT);
    5408:	81 e0       	ldi	r24, 0x01	; 1
    540a:	67 e0       	ldi	r22, 0x07	; 7
    540c:	41 e0       	ldi	r20, 0x01	; 1
    540e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>

	//Set the value of columns to be high output
	DIO_voidSetPinValue(KPD_PORT , COL0_PIN , HIGH);
    5412:	81 e0       	ldi	r24, 0x01	; 1
    5414:	64 e0       	ldi	r22, 0x04	; 4
    5416:	41 e0       	ldi	r20, 0x01	; 1
    5418:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT , COL1_PIN , HIGH);
    541c:	81 e0       	ldi	r24, 0x01	; 1
    541e:	65 e0       	ldi	r22, 0x05	; 5
    5420:	41 e0       	ldi	r20, 0x01	; 1
    5422:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT , COL2_PIN , HIGH);
    5426:	81 e0       	ldi	r24, 0x01	; 1
    5428:	66 e0       	ldi	r22, 0x06	; 6
    542a:	41 e0       	ldi	r20, 0x01	; 1
    542c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_PORT , COL3_PIN , HIGH);
    5430:	81 e0       	ldi	r24, 0x01	; 1
    5432:	67 e0       	ldi	r22, 0x07	; 7
    5434:	41 e0       	ldi	r20, 0x01	; 1
    5436:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>

}
    543a:	cf 91       	pop	r28
    543c:	df 91       	pop	r29
    543e:	08 95       	ret

00005440 <KPD_u8GetPressedKey>:

u8 KPD_u8GetPressedKey(void)
{
    5440:	df 93       	push	r29
    5442:	cf 93       	push	r28
    5444:	cd b7       	in	r28, 0x3d	; 61
    5446:	de b7       	in	r29, 0x3e	; 62
    5448:	e0 97       	sbiw	r28, 0x30	; 48
    544a:	0f b6       	in	r0, 0x3f	; 63
    544c:	f8 94       	cli
    544e:	de bf       	out	0x3e, r29	; 62
    5450:	0f be       	out	0x3f, r0	; 63
    5452:	cd bf       	out	0x3d, r28	; 61
	//to save the state of the row either 0 or 1
	u8 Local_u8SwitchState ;

	//The value of any pressed key , initially configurable
	u8 Local_u8PressedKey = NO_PRESSED_KEY ;
    5454:	80 e3       	ldi	r24, 0x30	; 48
    5456:	89 8b       	std	Y+17, r24	; 0x11

	//Set the value of keys to be configurable
	u8 Local_u8Values[ROWS_NO][COLS_NO]=VALUES ;
    5458:	ce 01       	movw	r24, r28
    545a:	43 96       	adiw	r24, 0x13	; 19
    545c:	9d a7       	std	Y+45, r25	; 0x2d
    545e:	8c a7       	std	Y+44, r24	; 0x2c
    5460:	e1 e3       	ldi	r30, 0x31	; 49
    5462:	f1 e0       	ldi	r31, 0x01	; 1
    5464:	ff a7       	std	Y+47, r31	; 0x2f
    5466:	ee a7       	std	Y+46, r30	; 0x2e
    5468:	f0 e1       	ldi	r31, 0x10	; 16
    546a:	f8 ab       	std	Y+48, r31	; 0x30
    546c:	ee a5       	ldd	r30, Y+46	; 0x2e
    546e:	ff a5       	ldd	r31, Y+47	; 0x2f
    5470:	00 80       	ld	r0, Z
    5472:	8e a5       	ldd	r24, Y+46	; 0x2e
    5474:	9f a5       	ldd	r25, Y+47	; 0x2f
    5476:	01 96       	adiw	r24, 0x01	; 1
    5478:	9f a7       	std	Y+47, r25	; 0x2f
    547a:	8e a7       	std	Y+46, r24	; 0x2e
    547c:	ec a5       	ldd	r30, Y+44	; 0x2c
    547e:	fd a5       	ldd	r31, Y+45	; 0x2d
    5480:	00 82       	st	Z, r0
    5482:	8c a5       	ldd	r24, Y+44	; 0x2c
    5484:	9d a5       	ldd	r25, Y+45	; 0x2d
    5486:	01 96       	adiw	r24, 0x01	; 1
    5488:	9d a7       	std	Y+45, r25	; 0x2d
    548a:	8c a7       	std	Y+44, r24	; 0x2c
    548c:	98 a9       	ldd	r25, Y+48	; 0x30
    548e:	91 50       	subi	r25, 0x01	; 1
    5490:	98 ab       	std	Y+48, r25	; 0x30
    5492:	e8 a9       	ldd	r30, Y+48	; 0x30
    5494:	ee 23       	and	r30, r30
    5496:	51 f7       	brne	.-44     	; 0x546c <KPD_u8GetPressedKey+0x2c>

	//iterators to loop over columns and rows
	u8 Local_u8ColIterator = 0;
    5498:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8RowIterator = 0;
    549a:	1f 86       	std	Y+15, r1	; 0x0f

	//array to save the configurations of the columns
	u8 Local_au8Cols[COLS_NO]={COL0_PIN,COL1_PIN,COL2_PIN,COL3_PIN};
    549c:	84 e0       	ldi	r24, 0x04	; 4
    549e:	8b a3       	std	Y+35, r24	; 0x23
    54a0:	85 e0       	ldi	r24, 0x05	; 5
    54a2:	8c a3       	std	Y+36, r24	; 0x24
    54a4:	86 e0       	ldi	r24, 0x06	; 6
    54a6:	8d a3       	std	Y+37, r24	; 0x25
    54a8:	87 e0       	ldi	r24, 0x07	; 7
    54aa:	8e a3       	std	Y+38, r24	; 0x26

	//array to save the configurations of the rows
	u8 Local_au8Rows[ROWS_NO]={ROW0_PIN,ROW1_PIN,ROW2_PIN,ROW3_PIN};
    54ac:	1f a2       	std	Y+39, r1	; 0x27
    54ae:	81 e0       	ldi	r24, 0x01	; 1
    54b0:	88 a7       	std	Y+40, r24	; 0x28
    54b2:	82 e0       	ldi	r24, 0x02	; 2
    54b4:	89 a7       	std	Y+41, r24	; 0x29
    54b6:	83 e0       	ldi	r24, 0x03	; 3
    54b8:	8a a7       	std	Y+42, r24	; 0x2a

	//loop over columns to activate one by one
	for(Local_u8ColIterator=0 ; Local_u8ColIterator<COLS_NO ; Local_u8ColIterator++)
    54ba:	18 8a       	std	Y+16, r1	; 0x10
    54bc:	d5 c0       	rjmp	.+426    	; 0x5668 <KPD_u8GetPressedKey+0x228>
	{
		//activate the target column
		DIO_voidSetPinValue(KPD_PORT ,Local_au8Cols[Local_u8ColIterator], LOW);
    54be:	88 89       	ldd	r24, Y+16	; 0x10
    54c0:	28 2f       	mov	r18, r24
    54c2:	30 e0       	ldi	r19, 0x00	; 0
    54c4:	ce 01       	movw	r24, r28
    54c6:	83 96       	adiw	r24, 0x23	; 35
    54c8:	fc 01       	movw	r30, r24
    54ca:	e2 0f       	add	r30, r18
    54cc:	f3 1f       	adc	r31, r19
    54ce:	90 81       	ld	r25, Z
    54d0:	81 e0       	ldi	r24, 0x01	; 1
    54d2:	69 2f       	mov	r22, r25
    54d4:	40 e0       	ldi	r20, 0x00	; 0
    54d6:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>

		//loop over the rows to check for pressed keys
		for(Local_u8RowIterator=0 ; Local_u8RowIterator<ROWS_NO ; Local_u8RowIterator++)
    54da:	1f 86       	std	Y+15, r1	; 0x0f
    54dc:	b0 c0       	rjmp	.+352    	; 0x563e <KPD_u8GetPressedKey+0x1fe>
		{
			//read the row value
			Local_u8SwitchState =DIO_u8GetPinValue(KPD_PORT , Local_au8Rows[Local_u8RowIterator]);
    54de:	8f 85       	ldd	r24, Y+15	; 0x0f
    54e0:	28 2f       	mov	r18, r24
    54e2:	30 e0       	ldi	r19, 0x00	; 0
    54e4:	ce 01       	movw	r24, r28
    54e6:	87 96       	adiw	r24, 0x27	; 39
    54e8:	fc 01       	movw	r30, r24
    54ea:	e2 0f       	add	r30, r18
    54ec:	f3 1f       	adc	r31, r19
    54ee:	90 81       	ld	r25, Z
    54f0:	81 e0       	ldi	r24, 0x01	; 1
    54f2:	69 2f       	mov	r22, r25
    54f4:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <DIO_u8GetPinValue>
    54f8:	8a 8b       	std	Y+18, r24	; 0x12

			//in case of a pressed key
			if(Local_u8SwitchState==0)
    54fa:	8a 89       	ldd	r24, Y+18	; 0x12
    54fc:	88 23       	and	r24, r24
    54fe:	09 f0       	breq	.+2      	; 0x5502 <KPD_u8GetPressedKey+0xc2>
    5500:	9b c0       	rjmp	.+310    	; 0x5638 <KPD_u8GetPressedKey+0x1f8>
			{
				//Get the value of the pressed key
				Local_u8PressedKey = Local_u8Values[Local_u8RowIterator][Local_u8ColIterator];
    5502:	8f 85       	ldd	r24, Y+15	; 0x0f
    5504:	28 2f       	mov	r18, r24
    5506:	30 e0       	ldi	r19, 0x00	; 0
    5508:	88 89       	ldd	r24, Y+16	; 0x10
    550a:	48 2f       	mov	r20, r24
    550c:	50 e0       	ldi	r21, 0x00	; 0
    550e:	22 0f       	add	r18, r18
    5510:	33 1f       	adc	r19, r19
    5512:	22 0f       	add	r18, r18
    5514:	33 1f       	adc	r19, r19
    5516:	ce 01       	movw	r24, r28
    5518:	01 96       	adiw	r24, 0x01	; 1
    551a:	82 0f       	add	r24, r18
    551c:	93 1f       	adc	r25, r19
    551e:	84 0f       	add	r24, r20
    5520:	95 1f       	adc	r25, r21
    5522:	fc 01       	movw	r30, r24
    5524:	72 96       	adiw	r30, 0x12	; 18
    5526:	80 81       	ld	r24, Z
    5528:	89 8b       	std	Y+17, r24	; 0x11
    552a:	0e c0       	rjmp	.+28     	; 0x5548 <KPD_u8GetPressedKey+0x108>
            while(Local_u8SwitchState==0){
    			Local_u8SwitchState =DIO_u8GetPinValue(KPD_PORT , Local_au8Rows[Local_u8RowIterator]);
    552c:	8f 85       	ldd	r24, Y+15	; 0x0f
    552e:	28 2f       	mov	r18, r24
    5530:	30 e0       	ldi	r19, 0x00	; 0
    5532:	ce 01       	movw	r24, r28
    5534:	87 96       	adiw	r24, 0x27	; 39
    5536:	fc 01       	movw	r30, r24
    5538:	e2 0f       	add	r30, r18
    553a:	f3 1f       	adc	r31, r19
    553c:	90 81       	ld	r25, Z
    553e:	81 e0       	ldi	r24, 0x01	; 1
    5540:	69 2f       	mov	r22, r25
    5542:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <DIO_u8GetPinValue>
    5546:	8a 8b       	std	Y+18, r24	; 0x12
			//in case of a pressed key
			if(Local_u8SwitchState==0)
			{
				//Get the value of the pressed key
				Local_u8PressedKey = Local_u8Values[Local_u8RowIterator][Local_u8ColIterator];
            while(Local_u8SwitchState==0){
    5548:	8a 89       	ldd	r24, Y+18	; 0x12
    554a:	88 23       	and	r24, r24
    554c:	79 f3       	breq	.-34     	; 0x552c <KPD_u8GetPressedKey+0xec>
    554e:	80 e0       	ldi	r24, 0x00	; 0
    5550:	90 e0       	ldi	r25, 0x00	; 0
    5552:	a0 ea       	ldi	r26, 0xA0	; 160
    5554:	b0 e4       	ldi	r27, 0x40	; 64
    5556:	8b 87       	std	Y+11, r24	; 0x0b
    5558:	9c 87       	std	Y+12, r25	; 0x0c
    555a:	ad 87       	std	Y+13, r26	; 0x0d
    555c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    555e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5560:	7c 85       	ldd	r23, Y+12	; 0x0c
    5562:	8d 85       	ldd	r24, Y+13	; 0x0d
    5564:	9e 85       	ldd	r25, Y+14	; 0x0e
    5566:	20 e0       	ldi	r18, 0x00	; 0
    5568:	30 e0       	ldi	r19, 0x00	; 0
    556a:	4a ef       	ldi	r20, 0xFA	; 250
    556c:	54 e4       	ldi	r21, 0x44	; 68
    556e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5572:	dc 01       	movw	r26, r24
    5574:	cb 01       	movw	r24, r22
    5576:	8f 83       	std	Y+7, r24	; 0x07
    5578:	98 87       	std	Y+8, r25	; 0x08
    557a:	a9 87       	std	Y+9, r26	; 0x09
    557c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    557e:	6f 81       	ldd	r22, Y+7	; 0x07
    5580:	78 85       	ldd	r23, Y+8	; 0x08
    5582:	89 85       	ldd	r24, Y+9	; 0x09
    5584:	9a 85       	ldd	r25, Y+10	; 0x0a
    5586:	20 e0       	ldi	r18, 0x00	; 0
    5588:	30 e0       	ldi	r19, 0x00	; 0
    558a:	40 e8       	ldi	r20, 0x80	; 128
    558c:	5f e3       	ldi	r21, 0x3F	; 63
    558e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5592:	88 23       	and	r24, r24
    5594:	2c f4       	brge	.+10     	; 0x55a0 <KPD_u8GetPressedKey+0x160>
		__ticks = 1;
    5596:	81 e0       	ldi	r24, 0x01	; 1
    5598:	90 e0       	ldi	r25, 0x00	; 0
    559a:	9e 83       	std	Y+6, r25	; 0x06
    559c:	8d 83       	std	Y+5, r24	; 0x05
    559e:	3f c0       	rjmp	.+126    	; 0x561e <KPD_u8GetPressedKey+0x1de>
	else if (__tmp > 65535)
    55a0:	6f 81       	ldd	r22, Y+7	; 0x07
    55a2:	78 85       	ldd	r23, Y+8	; 0x08
    55a4:	89 85       	ldd	r24, Y+9	; 0x09
    55a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    55a8:	20 e0       	ldi	r18, 0x00	; 0
    55aa:	3f ef       	ldi	r19, 0xFF	; 255
    55ac:	4f e7       	ldi	r20, 0x7F	; 127
    55ae:	57 e4       	ldi	r21, 0x47	; 71
    55b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    55b4:	18 16       	cp	r1, r24
    55b6:	4c f5       	brge	.+82     	; 0x560a <KPD_u8GetPressedKey+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    55ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    55bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    55be:	9e 85       	ldd	r25, Y+14	; 0x0e
    55c0:	20 e0       	ldi	r18, 0x00	; 0
    55c2:	30 e0       	ldi	r19, 0x00	; 0
    55c4:	40 e2       	ldi	r20, 0x20	; 32
    55c6:	51 e4       	ldi	r21, 0x41	; 65
    55c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55cc:	dc 01       	movw	r26, r24
    55ce:	cb 01       	movw	r24, r22
    55d0:	bc 01       	movw	r22, r24
    55d2:	cd 01       	movw	r24, r26
    55d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55d8:	dc 01       	movw	r26, r24
    55da:	cb 01       	movw	r24, r22
    55dc:	9e 83       	std	Y+6, r25	; 0x06
    55de:	8d 83       	std	Y+5, r24	; 0x05
    55e0:	0f c0       	rjmp	.+30     	; 0x5600 <KPD_u8GetPressedKey+0x1c0>
    55e2:	88 ec       	ldi	r24, 0xC8	; 200
    55e4:	90 e0       	ldi	r25, 0x00	; 0
    55e6:	9c 83       	std	Y+4, r25	; 0x04
    55e8:	8b 83       	std	Y+3, r24	; 0x03
    55ea:	8b 81       	ldd	r24, Y+3	; 0x03
    55ec:	9c 81       	ldd	r25, Y+4	; 0x04
    55ee:	01 97       	sbiw	r24, 0x01	; 1
    55f0:	f1 f7       	brne	.-4      	; 0x55ee <KPD_u8GetPressedKey+0x1ae>
    55f2:	9c 83       	std	Y+4, r25	; 0x04
    55f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55f6:	8d 81       	ldd	r24, Y+5	; 0x05
    55f8:	9e 81       	ldd	r25, Y+6	; 0x06
    55fa:	01 97       	sbiw	r24, 0x01	; 1
    55fc:	9e 83       	std	Y+6, r25	; 0x06
    55fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5600:	8d 81       	ldd	r24, Y+5	; 0x05
    5602:	9e 81       	ldd	r25, Y+6	; 0x06
    5604:	00 97       	sbiw	r24, 0x00	; 0
    5606:	69 f7       	brne	.-38     	; 0x55e2 <KPD_u8GetPressedKey+0x1a2>
    5608:	14 c0       	rjmp	.+40     	; 0x5632 <KPD_u8GetPressedKey+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    560a:	6f 81       	ldd	r22, Y+7	; 0x07
    560c:	78 85       	ldd	r23, Y+8	; 0x08
    560e:	89 85       	ldd	r24, Y+9	; 0x09
    5610:	9a 85       	ldd	r25, Y+10	; 0x0a
    5612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5616:	dc 01       	movw	r26, r24
    5618:	cb 01       	movw	r24, r22
    561a:	9e 83       	std	Y+6, r25	; 0x06
    561c:	8d 83       	std	Y+5, r24	; 0x05
    561e:	8d 81       	ldd	r24, Y+5	; 0x05
    5620:	9e 81       	ldd	r25, Y+6	; 0x06
    5622:	9a 83       	std	Y+2, r25	; 0x02
    5624:	89 83       	std	Y+1, r24	; 0x01
    5626:	89 81       	ldd	r24, Y+1	; 0x01
    5628:	9a 81       	ldd	r25, Y+2	; 0x02
    562a:	01 97       	sbiw	r24, 0x01	; 1
    562c:	f1 f7       	brne	.-4      	; 0x562a <KPD_u8GetPressedKey+0x1ea>
    562e:	9a 83       	std	Y+2, r25	; 0x02
    5630:	89 83       	std	Y+1, r24	; 0x01
    			Local_u8SwitchState =DIO_u8GetPinValue(KPD_PORT , Local_au8Rows[Local_u8RowIterator]);
            }
				_delay_ms(5);
				return Local_u8PressedKey ;
    5632:	f9 89       	ldd	r31, Y+17	; 0x11
    5634:	fb a7       	std	Y+43, r31	; 0x2b
    5636:	1e c0       	rjmp	.+60     	; 0x5674 <KPD_u8GetPressedKey+0x234>
	{
		//activate the target column
		DIO_voidSetPinValue(KPD_PORT ,Local_au8Cols[Local_u8ColIterator], LOW);

		//loop over the rows to check for pressed keys
		for(Local_u8RowIterator=0 ; Local_u8RowIterator<ROWS_NO ; Local_u8RowIterator++)
    5638:	8f 85       	ldd	r24, Y+15	; 0x0f
    563a:	8f 5f       	subi	r24, 0xFF	; 255
    563c:	8f 87       	std	Y+15, r24	; 0x0f
    563e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5640:	84 30       	cpi	r24, 0x04	; 4
    5642:	08 f4       	brcc	.+2      	; 0x5646 <KPD_u8GetPressedKey+0x206>
    5644:	4c cf       	rjmp	.-360    	; 0x54de <KPD_u8GetPressedKey+0x9e>
				_delay_ms(5);
				return Local_u8PressedKey ;
			}
		}
		//Deactivate the target column
		DIO_voidSetPinValue(KPD_PORT ,Local_au8Cols[Local_u8ColIterator], HIGH);
    5646:	88 89       	ldd	r24, Y+16	; 0x10
    5648:	28 2f       	mov	r18, r24
    564a:	30 e0       	ldi	r19, 0x00	; 0
    564c:	ce 01       	movw	r24, r28
    564e:	83 96       	adiw	r24, 0x23	; 35
    5650:	fc 01       	movw	r30, r24
    5652:	e2 0f       	add	r30, r18
    5654:	f3 1f       	adc	r31, r19
    5656:	90 81       	ld	r25, Z
    5658:	81 e0       	ldi	r24, 0x01	; 1
    565a:	69 2f       	mov	r22, r25
    565c:	41 e0       	ldi	r20, 0x01	; 1
    565e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>

	//array to save the configurations of the rows
	u8 Local_au8Rows[ROWS_NO]={ROW0_PIN,ROW1_PIN,ROW2_PIN,ROW3_PIN};

	//loop over columns to activate one by one
	for(Local_u8ColIterator=0 ; Local_u8ColIterator<COLS_NO ; Local_u8ColIterator++)
    5662:	88 89       	ldd	r24, Y+16	; 0x10
    5664:	8f 5f       	subi	r24, 0xFF	; 255
    5666:	88 8b       	std	Y+16, r24	; 0x10
    5668:	88 89       	ldd	r24, Y+16	; 0x10
    566a:	84 30       	cpi	r24, 0x04	; 4
    566c:	08 f4       	brcc	.+2      	; 0x5670 <KPD_u8GetPressedKey+0x230>
    566e:	27 cf       	rjmp	.-434    	; 0x54be <KPD_u8GetPressedKey+0x7e>
		}
		//Deactivate the target column
		DIO_voidSetPinValue(KPD_PORT ,Local_au8Cols[Local_u8ColIterator], HIGH);
	}

	return Local_u8PressedKey ;
    5670:	89 89       	ldd	r24, Y+17	; 0x11
    5672:	8b a7       	std	Y+43, r24	; 0x2b
    5674:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    5676:	e0 96       	adiw	r28, 0x30	; 48
    5678:	0f b6       	in	r0, 0x3f	; 63
    567a:	f8 94       	cli
    567c:	de bf       	out	0x3e, r29	; 62
    567e:	0f be       	out	0x3f, r0	; 63
    5680:	cd bf       	out	0x3d, r28	; 61
    5682:	cf 91       	pop	r28
    5684:	df 91       	pop	r29
    5686:	08 95       	ret

00005688 <DCMotor_voidInitPB>:
#include "Motor_Config.h"
#include "util/delay.h"


void DCMotor_voidInitPB(void)
{
    5688:	df 93       	push	r29
    568a:	cf 93       	push	r28
    568c:	cd b7       	in	r28, 0x3d	; 61
    568e:	de b7       	in	r29, 0x3e	; 62
DIO_voidSetPinDirection(DC_Motor_Port,DC_Motor_Pin1,OUTPUT);
    5690:	80 e0       	ldi	r24, 0x00	; 0
    5692:	60 e0       	ldi	r22, 0x00	; 0
    5694:	41 e0       	ldi	r20, 0x01	; 1
    5696:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(DC_Motor_Port,DC_Motor_Pin2,OUTPUT);
    569a:	80 e0       	ldi	r24, 0x00	; 0
    569c:	61 e0       	ldi	r22, 0x01	; 1
    569e:	41 e0       	ldi	r20, 0x01	; 1
    56a0:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>
}
    56a4:	cf 91       	pop	r28
    56a6:	df 91       	pop	r29
    56a8:	08 95       	ret

000056aa <DCMotor_voidInit>:

void DCMotor_voidInit(u8 Copy_u8PortID ,u8 Copy_u8PinID)
{
    56aa:	df 93       	push	r29
    56ac:	cf 93       	push	r28
    56ae:	00 d0       	rcall	.+0      	; 0x56b0 <DCMotor_voidInit+0x6>
    56b0:	cd b7       	in	r28, 0x3d	; 61
    56b2:	de b7       	in	r29, 0x3e	; 62
    56b4:	89 83       	std	Y+1, r24	; 0x01
    56b6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDirection(Copy_u8PortID,Copy_u8PinID,OUTPUT);
    56b8:	89 81       	ldd	r24, Y+1	; 0x01
    56ba:	6a 81       	ldd	r22, Y+2	; 0x02
    56bc:	41 e0       	ldi	r20, 0x01	; 1
    56be:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>
}
    56c2:	0f 90       	pop	r0
    56c4:	0f 90       	pop	r0
    56c6:	cf 91       	pop	r28
    56c8:	df 91       	pop	r29
    56ca:	08 95       	ret

000056cc <DCMotor_voidMotorON>:

void DCMotor_voidMotorON(u8 Copy_u8PortID ,u8 Copy_u8PinID)
{
    56cc:	df 93       	push	r29
    56ce:	cf 93       	push	r28
    56d0:	00 d0       	rcall	.+0      	; 0x56d2 <DCMotor_voidMotorON+0x6>
    56d2:	cd b7       	in	r28, 0x3d	; 61
    56d4:	de b7       	in	r29, 0x3e	; 62
    56d6:	89 83       	std	Y+1, r24	; 0x01
    56d8:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(Copy_u8PortID,Copy_u8PinID,HIGH);
    56da:	89 81       	ldd	r24, Y+1	; 0x01
    56dc:	6a 81       	ldd	r22, Y+2	; 0x02
    56de:	41 e0       	ldi	r20, 0x01	; 1
    56e0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
}
    56e4:	0f 90       	pop	r0
    56e6:	0f 90       	pop	r0
    56e8:	cf 91       	pop	r28
    56ea:	df 91       	pop	r29
    56ec:	08 95       	ret

000056ee <DCMotor_voidMotorOFF>:

void DCMotor_voidMotorOFF(u8 Copy_u8PortID ,u8 Copy_u8PinID)
{
    56ee:	df 93       	push	r29
    56f0:	cf 93       	push	r28
    56f2:	00 d0       	rcall	.+0      	; 0x56f4 <DCMotor_voidMotorOFF+0x6>
    56f4:	cd b7       	in	r28, 0x3d	; 61
    56f6:	de b7       	in	r29, 0x3e	; 62
    56f8:	89 83       	std	Y+1, r24	; 0x01
    56fa:	6a 83       	std	Y+2, r22	; 0x02

	DIO_voidSetPinValue(Copy_u8PortID,Copy_u8PinID,LOW);
    56fc:	89 81       	ldd	r24, Y+1	; 0x01
    56fe:	6a 81       	ldd	r22, Y+2	; 0x02
    5700:	40 e0       	ldi	r20, 0x00	; 0
    5702:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
}
    5706:	0f 90       	pop	r0
    5708:	0f 90       	pop	r0
    570a:	cf 91       	pop	r28
    570c:	df 91       	pop	r29
    570e:	08 95       	ret

00005710 <DCMotor_voidRotateCW>:
void DCMotor_voidRotateCW(void)
{
    5710:	df 93       	push	r29
    5712:	cf 93       	push	r28
    5714:	cd b7       	in	r28, 0x3d	; 61
    5716:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_Motor_Port,DC_Motor_Pin1,LOW);
    5718:	80 e0       	ldi	r24, 0x00	; 0
    571a:	60 e0       	ldi	r22, 0x00	; 0
    571c:	40 e0       	ldi	r20, 0x00	; 0
    571e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_Motor_Port,DC_Motor_Pin2,HIGH);
    5722:	80 e0       	ldi	r24, 0x00	; 0
    5724:	61 e0       	ldi	r22, 0x01	; 1
    5726:	41 e0       	ldi	r20, 0x01	; 1
    5728:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
}
    572c:	cf 91       	pop	r28
    572e:	df 91       	pop	r29
    5730:	08 95       	ret

00005732 <DCMotor_voidRotateACW>:

void DCMotor_voidRotateACW(void)
{
    5732:	df 93       	push	r29
    5734:	cf 93       	push	r28
    5736:	cd b7       	in	r28, 0x3d	; 61
    5738:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_Motor_Port,DC_Motor_Pin2,LOW);
    573a:	80 e0       	ldi	r24, 0x00	; 0
    573c:	61 e0       	ldi	r22, 0x01	; 1
    573e:	40 e0       	ldi	r20, 0x00	; 0
    5740:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_Motor_Port,DC_Motor_Pin1,HIGH);
    5744:	80 e0       	ldi	r24, 0x00	; 0
    5746:	60 e0       	ldi	r22, 0x00	; 0
    5748:	41 e0       	ldi	r20, 0x01	; 1
    574a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
}
    574e:	cf 91       	pop	r28
    5750:	df 91       	pop	r29
    5752:	08 95       	ret

00005754 <DCMotor_voidStopMotor>:

void DCMotor_voidStopMotor(void)
{
    5754:	df 93       	push	r29
    5756:	cf 93       	push	r28
    5758:	cd b7       	in	r28, 0x3d	; 61
    575a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DC_Motor_Port,DC_Motor_Pin1,LOW);
    575c:	80 e0       	ldi	r24, 0x00	; 0
    575e:	60 e0       	ldi	r22, 0x00	; 0
    5760:	40 e0       	ldi	r20, 0x00	; 0
    5762:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_Motor_Port,DC_Motor_Pin2,LOW);
    5766:	80 e0       	ldi	r24, 0x00	; 0
    5768:	61 e0       	ldi	r22, 0x01	; 1
    576a:	40 e0       	ldi	r20, 0x00	; 0
    576c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
}
    5770:	cf 91       	pop	r28
    5772:	df 91       	pop	r29
    5774:	08 95       	ret

00005776 <BUZZER_voidInit>:
#include "BUZZER_Interface.h"
#include "../../MCAL/DIO/DIO_Interface.h"


void BUZZER_voidInit(u8 Copy_u8PortID ,u8 Copy_u8PinID)
{
    5776:	df 93       	push	r29
    5778:	cf 93       	push	r28
    577a:	00 d0       	rcall	.+0      	; 0x577c <BUZZER_voidInit+0x6>
    577c:	cd b7       	in	r28, 0x3d	; 61
    577e:	de b7       	in	r29, 0x3e	; 62
    5780:	89 83       	std	Y+1, r24	; 0x01
    5782:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDirection(Copy_u8PortID ,Copy_u8PinID ,OUTPUT);
    5784:	89 81       	ldd	r24, Y+1	; 0x01
    5786:	6a 81       	ldd	r22, Y+2	; 0x02
    5788:	41 e0       	ldi	r20, 0x01	; 1
    578a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <DIO_voidSetPinDirection>
}
    578e:	0f 90       	pop	r0
    5790:	0f 90       	pop	r0
    5792:	cf 91       	pop	r28
    5794:	df 91       	pop	r29
    5796:	08 95       	ret

00005798 <BUZZER_voidBuzzerON>:

void BUZZER_voidBuzzerON(u8 Copy_u8PortID ,u8 Copy_u8PinID)
{
    5798:	df 93       	push	r29
    579a:	cf 93       	push	r28
    579c:	00 d0       	rcall	.+0      	; 0x579e <BUZZER_voidBuzzerON+0x6>
    579e:	cd b7       	in	r28, 0x3d	; 61
    57a0:	de b7       	in	r29, 0x3e	; 62
    57a2:	89 83       	std	Y+1, r24	; 0x01
    57a4:	6a 83       	std	Y+2, r22	; 0x02
 DIO_voidSetPinValue(Copy_u8PortID ,Copy_u8PinID ,HIGH);
    57a6:	89 81       	ldd	r24, Y+1	; 0x01
    57a8:	6a 81       	ldd	r22, Y+2	; 0x02
    57aa:	41 e0       	ldi	r20, 0x01	; 1
    57ac:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
}
    57b0:	0f 90       	pop	r0
    57b2:	0f 90       	pop	r0
    57b4:	cf 91       	pop	r28
    57b6:	df 91       	pop	r29
    57b8:	08 95       	ret

000057ba <BUZZER_voidBuzzerOFF>:

void BUZZER_voidBuzzerOFF(u8 Copy_u8PortID ,u8 Copy_u8PinID)
{
    57ba:	df 93       	push	r29
    57bc:	cf 93       	push	r28
    57be:	00 d0       	rcall	.+0      	; 0x57c0 <BUZZER_voidBuzzerOFF+0x6>
    57c0:	cd b7       	in	r28, 0x3d	; 61
    57c2:	de b7       	in	r29, 0x3e	; 62
    57c4:	89 83       	std	Y+1, r24	; 0x01
    57c6:	6a 83       	std	Y+2, r22	; 0x02
	 DIO_voidSetPinValue(Copy_u8PortID ,Copy_u8PinID ,LOW);
    57c8:	89 81       	ldd	r24, Y+1	; 0x01
    57ca:	6a 81       	ldd	r22, Y+2	; 0x02
    57cc:	40 e0       	ldi	r20, 0x00	; 0
    57ce:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <DIO_voidSetPinValue>
}
    57d2:	0f 90       	pop	r0
    57d4:	0f 90       	pop	r0
    57d6:	cf 91       	pop	r28
    57d8:	df 91       	pop	r29
    57da:	08 95       	ret

000057dc <BUZZER_voidBuzzerToggel>:

void BUZZER_voidBuzzerToggel(u8 Copy_u8PortID ,u8 Copy_u8PinID)
{
    57dc:	df 93       	push	r29
    57de:	cf 93       	push	r28
    57e0:	00 d0       	rcall	.+0      	; 0x57e2 <BUZZER_voidBuzzerToggel+0x6>
    57e2:	cd b7       	in	r28, 0x3d	; 61
    57e4:	de b7       	in	r29, 0x3e	; 62
    57e6:	89 83       	std	Y+1, r24	; 0x01
    57e8:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidTogglePinValue(Copy_u8PortID ,Copy_u8PinID);
    57ea:	89 81       	ldd	r24, Y+1	; 0x01
    57ec:	6a 81       	ldd	r22, Y+2	; 0x02
    57ee:	0e 94 1c 10 	call	0x2038	; 0x2038 <DIO_voidTogglePinValue>
}
    57f2:	0f 90       	pop	r0
    57f4:	0f 90       	pop	r0
    57f6:	cf 91       	pop	r28
    57f8:	df 91       	pop	r29
    57fa:	08 95       	ret

000057fc <LED_voidLed1ON>:
/*********<include SMART HOME library>*********/
#include "SMART_HOME_Interface.h"
/**********************************************/

void LED_voidLed1ON(void)
{
    57fc:	df 93       	push	r29
    57fe:	cf 93       	push	r28
    5800:	cd b7       	in	r28, 0x3d	; 61
    5802:	de b7       	in	r29, 0x3e	; 62
    5804:	6c 97       	sbiw	r28, 0x1c	; 28
    5806:	0f b6       	in	r0, 0x3f	; 63
    5808:	f8 94       	cli
    580a:	de bf       	out	0x3e, r29	; 62
    580c:	0f be       	out	0x3f, r0	; 63
    580e:	cd bf       	out	0x3d, r28	; 61
	LED_voidLedOn(PORTB ,PIN5 ,VCC);
    5810:	81 e0       	ldi	r24, 0x01	; 1
    5812:	65 e0       	ldi	r22, 0x05	; 5
    5814:	41 e0       	ldi	r20, 0x01	; 1
    5816:	0e 94 36 21 	call	0x426c	; 0x426c <LED_voidLedOn>
	LCD_voidWriteCommand(Lcd_Clear);
    581a:	81 e0       	ldi	r24, 0x01	; 1
    581c:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <LCD_voidWriteCommand>
	LCD_voidWriteString("LED_1 ON");
    5820:	80 e6       	ldi	r24, 0x60	; 96
    5822:	90 e0       	ldi	r25, 0x00	; 0
    5824:	0e 94 35 28 	call	0x506a	; 0x506a <LCD_voidWriteString>
	BUZZER_voidBuzzerON(PORTA ,PIN0);
    5828:	80 e0       	ldi	r24, 0x00	; 0
    582a:	60 e0       	ldi	r22, 0x00	; 0
    582c:	0e 94 cc 2b 	call	0x5798	; 0x5798 <BUZZER_voidBuzzerON>
    5830:	80 e0       	ldi	r24, 0x00	; 0
    5832:	90 e0       	ldi	r25, 0x00	; 0
    5834:	a8 ec       	ldi	r26, 0xC8	; 200
    5836:	b2 e4       	ldi	r27, 0x42	; 66
    5838:	89 8f       	std	Y+25, r24	; 0x19
    583a:	9a 8f       	std	Y+26, r25	; 0x1a
    583c:	ab 8f       	std	Y+27, r26	; 0x1b
    583e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5840:	69 8d       	ldd	r22, Y+25	; 0x19
    5842:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5844:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5846:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5848:	20 e0       	ldi	r18, 0x00	; 0
    584a:	30 e0       	ldi	r19, 0x00	; 0
    584c:	4a ef       	ldi	r20, 0xFA	; 250
    584e:	54 e4       	ldi	r21, 0x44	; 68
    5850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5854:	dc 01       	movw	r26, r24
    5856:	cb 01       	movw	r24, r22
    5858:	8d 8b       	std	Y+21, r24	; 0x15
    585a:	9e 8b       	std	Y+22, r25	; 0x16
    585c:	af 8b       	std	Y+23, r26	; 0x17
    585e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5860:	6d 89       	ldd	r22, Y+21	; 0x15
    5862:	7e 89       	ldd	r23, Y+22	; 0x16
    5864:	8f 89       	ldd	r24, Y+23	; 0x17
    5866:	98 8d       	ldd	r25, Y+24	; 0x18
    5868:	20 e0       	ldi	r18, 0x00	; 0
    586a:	30 e0       	ldi	r19, 0x00	; 0
    586c:	40 e8       	ldi	r20, 0x80	; 128
    586e:	5f e3       	ldi	r21, 0x3F	; 63
    5870:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5874:	88 23       	and	r24, r24
    5876:	2c f4       	brge	.+10     	; 0x5882 <LED_voidLed1ON+0x86>
		__ticks = 1;
    5878:	81 e0       	ldi	r24, 0x01	; 1
    587a:	90 e0       	ldi	r25, 0x00	; 0
    587c:	9c 8b       	std	Y+20, r25	; 0x14
    587e:	8b 8b       	std	Y+19, r24	; 0x13
    5880:	3f c0       	rjmp	.+126    	; 0x5900 <LED_voidLed1ON+0x104>
	else if (__tmp > 65535)
    5882:	6d 89       	ldd	r22, Y+21	; 0x15
    5884:	7e 89       	ldd	r23, Y+22	; 0x16
    5886:	8f 89       	ldd	r24, Y+23	; 0x17
    5888:	98 8d       	ldd	r25, Y+24	; 0x18
    588a:	20 e0       	ldi	r18, 0x00	; 0
    588c:	3f ef       	ldi	r19, 0xFF	; 255
    588e:	4f e7       	ldi	r20, 0x7F	; 127
    5890:	57 e4       	ldi	r21, 0x47	; 71
    5892:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5896:	18 16       	cp	r1, r24
    5898:	4c f5       	brge	.+82     	; 0x58ec <LED_voidLed1ON+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    589a:	69 8d       	ldd	r22, Y+25	; 0x19
    589c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    589e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    58a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    58a2:	20 e0       	ldi	r18, 0x00	; 0
    58a4:	30 e0       	ldi	r19, 0x00	; 0
    58a6:	40 e2       	ldi	r20, 0x20	; 32
    58a8:	51 e4       	ldi	r21, 0x41	; 65
    58aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58ae:	dc 01       	movw	r26, r24
    58b0:	cb 01       	movw	r24, r22
    58b2:	bc 01       	movw	r22, r24
    58b4:	cd 01       	movw	r24, r26
    58b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58ba:	dc 01       	movw	r26, r24
    58bc:	cb 01       	movw	r24, r22
    58be:	9c 8b       	std	Y+20, r25	; 0x14
    58c0:	8b 8b       	std	Y+19, r24	; 0x13
    58c2:	0f c0       	rjmp	.+30     	; 0x58e2 <LED_voidLed1ON+0xe6>
    58c4:	88 ec       	ldi	r24, 0xC8	; 200
    58c6:	90 e0       	ldi	r25, 0x00	; 0
    58c8:	9a 8b       	std	Y+18, r25	; 0x12
    58ca:	89 8b       	std	Y+17, r24	; 0x11
    58cc:	89 89       	ldd	r24, Y+17	; 0x11
    58ce:	9a 89       	ldd	r25, Y+18	; 0x12
    58d0:	01 97       	sbiw	r24, 0x01	; 1
    58d2:	f1 f7       	brne	.-4      	; 0x58d0 <LED_voidLed1ON+0xd4>
    58d4:	9a 8b       	std	Y+18, r25	; 0x12
    58d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58d8:	8b 89       	ldd	r24, Y+19	; 0x13
    58da:	9c 89       	ldd	r25, Y+20	; 0x14
    58dc:	01 97       	sbiw	r24, 0x01	; 1
    58de:	9c 8b       	std	Y+20, r25	; 0x14
    58e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58e2:	8b 89       	ldd	r24, Y+19	; 0x13
    58e4:	9c 89       	ldd	r25, Y+20	; 0x14
    58e6:	00 97       	sbiw	r24, 0x00	; 0
    58e8:	69 f7       	brne	.-38     	; 0x58c4 <LED_voidLed1ON+0xc8>
    58ea:	14 c0       	rjmp	.+40     	; 0x5914 <LED_voidLed1ON+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58ec:	6d 89       	ldd	r22, Y+21	; 0x15
    58ee:	7e 89       	ldd	r23, Y+22	; 0x16
    58f0:	8f 89       	ldd	r24, Y+23	; 0x17
    58f2:	98 8d       	ldd	r25, Y+24	; 0x18
    58f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58f8:	dc 01       	movw	r26, r24
    58fa:	cb 01       	movw	r24, r22
    58fc:	9c 8b       	std	Y+20, r25	; 0x14
    58fe:	8b 8b       	std	Y+19, r24	; 0x13
    5900:	8b 89       	ldd	r24, Y+19	; 0x13
    5902:	9c 89       	ldd	r25, Y+20	; 0x14
    5904:	98 8b       	std	Y+16, r25	; 0x10
    5906:	8f 87       	std	Y+15, r24	; 0x0f
    5908:	8f 85       	ldd	r24, Y+15	; 0x0f
    590a:	98 89       	ldd	r25, Y+16	; 0x10
    590c:	01 97       	sbiw	r24, 0x01	; 1
    590e:	f1 f7       	brne	.-4      	; 0x590c <LED_voidLed1ON+0x110>
    5910:	98 8b       	std	Y+16, r25	; 0x10
    5912:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	BUZZER_voidBuzzerOFF(PORTA ,PIN0);
    5914:	80 e0       	ldi	r24, 0x00	; 0
    5916:	60 e0       	ldi	r22, 0x00	; 0
    5918:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <BUZZER_voidBuzzerOFF>
    591c:	80 e0       	ldi	r24, 0x00	; 0
    591e:	90 e0       	ldi	r25, 0x00	; 0
    5920:	aa e7       	ldi	r26, 0x7A	; 122
    5922:	b4 e4       	ldi	r27, 0x44	; 68
    5924:	8b 87       	std	Y+11, r24	; 0x0b
    5926:	9c 87       	std	Y+12, r25	; 0x0c
    5928:	ad 87       	std	Y+13, r26	; 0x0d
    592a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    592c:	6b 85       	ldd	r22, Y+11	; 0x0b
    592e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5930:	8d 85       	ldd	r24, Y+13	; 0x0d
    5932:	9e 85       	ldd	r25, Y+14	; 0x0e
    5934:	20 e0       	ldi	r18, 0x00	; 0
    5936:	30 e0       	ldi	r19, 0x00	; 0
    5938:	4a ef       	ldi	r20, 0xFA	; 250
    593a:	54 e4       	ldi	r21, 0x44	; 68
    593c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5940:	dc 01       	movw	r26, r24
    5942:	cb 01       	movw	r24, r22
    5944:	8f 83       	std	Y+7, r24	; 0x07
    5946:	98 87       	std	Y+8, r25	; 0x08
    5948:	a9 87       	std	Y+9, r26	; 0x09
    594a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    594c:	6f 81       	ldd	r22, Y+7	; 0x07
    594e:	78 85       	ldd	r23, Y+8	; 0x08
    5950:	89 85       	ldd	r24, Y+9	; 0x09
    5952:	9a 85       	ldd	r25, Y+10	; 0x0a
    5954:	20 e0       	ldi	r18, 0x00	; 0
    5956:	30 e0       	ldi	r19, 0x00	; 0
    5958:	40 e8       	ldi	r20, 0x80	; 128
    595a:	5f e3       	ldi	r21, 0x3F	; 63
    595c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5960:	88 23       	and	r24, r24
    5962:	2c f4       	brge	.+10     	; 0x596e <LED_voidLed1ON+0x172>
		__ticks = 1;
    5964:	81 e0       	ldi	r24, 0x01	; 1
    5966:	90 e0       	ldi	r25, 0x00	; 0
    5968:	9e 83       	std	Y+6, r25	; 0x06
    596a:	8d 83       	std	Y+5, r24	; 0x05
    596c:	3f c0       	rjmp	.+126    	; 0x59ec <LED_voidLed1ON+0x1f0>
	else if (__tmp > 65535)
    596e:	6f 81       	ldd	r22, Y+7	; 0x07
    5970:	78 85       	ldd	r23, Y+8	; 0x08
    5972:	89 85       	ldd	r24, Y+9	; 0x09
    5974:	9a 85       	ldd	r25, Y+10	; 0x0a
    5976:	20 e0       	ldi	r18, 0x00	; 0
    5978:	3f ef       	ldi	r19, 0xFF	; 255
    597a:	4f e7       	ldi	r20, 0x7F	; 127
    597c:	57 e4       	ldi	r21, 0x47	; 71
    597e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5982:	18 16       	cp	r1, r24
    5984:	4c f5       	brge	.+82     	; 0x59d8 <LED_voidLed1ON+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5986:	6b 85       	ldd	r22, Y+11	; 0x0b
    5988:	7c 85       	ldd	r23, Y+12	; 0x0c
    598a:	8d 85       	ldd	r24, Y+13	; 0x0d
    598c:	9e 85       	ldd	r25, Y+14	; 0x0e
    598e:	20 e0       	ldi	r18, 0x00	; 0
    5990:	30 e0       	ldi	r19, 0x00	; 0
    5992:	40 e2       	ldi	r20, 0x20	; 32
    5994:	51 e4       	ldi	r21, 0x41	; 65
    5996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    599a:	dc 01       	movw	r26, r24
    599c:	cb 01       	movw	r24, r22
    599e:	bc 01       	movw	r22, r24
    59a0:	cd 01       	movw	r24, r26
    59a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59a6:	dc 01       	movw	r26, r24
    59a8:	cb 01       	movw	r24, r22
    59aa:	9e 83       	std	Y+6, r25	; 0x06
    59ac:	8d 83       	std	Y+5, r24	; 0x05
    59ae:	0f c0       	rjmp	.+30     	; 0x59ce <LED_voidLed1ON+0x1d2>
    59b0:	88 ec       	ldi	r24, 0xC8	; 200
    59b2:	90 e0       	ldi	r25, 0x00	; 0
    59b4:	9c 83       	std	Y+4, r25	; 0x04
    59b6:	8b 83       	std	Y+3, r24	; 0x03
    59b8:	8b 81       	ldd	r24, Y+3	; 0x03
    59ba:	9c 81       	ldd	r25, Y+4	; 0x04
    59bc:	01 97       	sbiw	r24, 0x01	; 1
    59be:	f1 f7       	brne	.-4      	; 0x59bc <LED_voidLed1ON+0x1c0>
    59c0:	9c 83       	std	Y+4, r25	; 0x04
    59c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59c4:	8d 81       	ldd	r24, Y+5	; 0x05
    59c6:	9e 81       	ldd	r25, Y+6	; 0x06
    59c8:	01 97       	sbiw	r24, 0x01	; 1
    59ca:	9e 83       	std	Y+6, r25	; 0x06
    59cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59ce:	8d 81       	ldd	r24, Y+5	; 0x05
    59d0:	9e 81       	ldd	r25, Y+6	; 0x06
    59d2:	00 97       	sbiw	r24, 0x00	; 0
    59d4:	69 f7       	brne	.-38     	; 0x59b0 <LED_voidLed1ON+0x1b4>
    59d6:	14 c0       	rjmp	.+40     	; 0x5a00 <LED_voidLed1ON+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59d8:	6f 81       	ldd	r22, Y+7	; 0x07
    59da:	78 85       	ldd	r23, Y+8	; 0x08
    59dc:	89 85       	ldd	r24, Y+9	; 0x09
    59de:	9a 85       	ldd	r25, Y+10	; 0x0a
    59e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59e4:	dc 01       	movw	r26, r24
    59e6:	cb 01       	movw	r24, r22
    59e8:	9e 83       	std	Y+6, r25	; 0x06
    59ea:	8d 83       	std	Y+5, r24	; 0x05
    59ec:	8d 81       	ldd	r24, Y+5	; 0x05
    59ee:	9e 81       	ldd	r25, Y+6	; 0x06
    59f0:	9a 83       	std	Y+2, r25	; 0x02
    59f2:	89 83       	std	Y+1, r24	; 0x01
    59f4:	89 81       	ldd	r24, Y+1	; 0x01
    59f6:	9a 81       	ldd	r25, Y+2	; 0x02
    59f8:	01 97       	sbiw	r24, 0x01	; 1
    59fa:	f1 f7       	brne	.-4      	; 0x59f8 <LED_voidLed1ON+0x1fc>
    59fc:	9a 83       	std	Y+2, r25	; 0x02
    59fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    5a00:	6c 96       	adiw	r28, 0x1c	; 28
    5a02:	0f b6       	in	r0, 0x3f	; 63
    5a04:	f8 94       	cli
    5a06:	de bf       	out	0x3e, r29	; 62
    5a08:	0f be       	out	0x3f, r0	; 63
    5a0a:	cd bf       	out	0x3d, r28	; 61
    5a0c:	cf 91       	pop	r28
    5a0e:	df 91       	pop	r29
    5a10:	08 95       	ret

00005a12 <LED_voidLed2ON>:
void LED_voidLed2ON(void)
{
    5a12:	df 93       	push	r29
    5a14:	cf 93       	push	r28
    5a16:	cd b7       	in	r28, 0x3d	; 61
    5a18:	de b7       	in	r29, 0x3e	; 62
    5a1a:	6c 97       	sbiw	r28, 0x1c	; 28
    5a1c:	0f b6       	in	r0, 0x3f	; 63
    5a1e:	f8 94       	cli
    5a20:	de bf       	out	0x3e, r29	; 62
    5a22:	0f be       	out	0x3f, r0	; 63
    5a24:	cd bf       	out	0x3d, r28	; 61
	LED_voidLedOn(PORTB ,PIN6 ,VCC);
    5a26:	81 e0       	ldi	r24, 0x01	; 1
    5a28:	66 e0       	ldi	r22, 0x06	; 6
    5a2a:	41 e0       	ldi	r20, 0x01	; 1
    5a2c:	0e 94 36 21 	call	0x426c	; 0x426c <LED_voidLedOn>
	LCD_voidWriteCommand(Lcd_Clear);
    5a30:	81 e0       	ldi	r24, 0x01	; 1
    5a32:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <LCD_voidWriteCommand>
	LCD_voidWriteString("LED_2 ON");
    5a36:	89 e6       	ldi	r24, 0x69	; 105
    5a38:	90 e0       	ldi	r25, 0x00	; 0
    5a3a:	0e 94 35 28 	call	0x506a	; 0x506a <LCD_voidWriteString>
	BUZZER_voidBuzzerON(PORTA ,PIN0);
    5a3e:	80 e0       	ldi	r24, 0x00	; 0
    5a40:	60 e0       	ldi	r22, 0x00	; 0
    5a42:	0e 94 cc 2b 	call	0x5798	; 0x5798 <BUZZER_voidBuzzerON>
    5a46:	80 e0       	ldi	r24, 0x00	; 0
    5a48:	90 e0       	ldi	r25, 0x00	; 0
    5a4a:	a8 ec       	ldi	r26, 0xC8	; 200
    5a4c:	b2 e4       	ldi	r27, 0x42	; 66
    5a4e:	89 8f       	std	Y+25, r24	; 0x19
    5a50:	9a 8f       	std	Y+26, r25	; 0x1a
    5a52:	ab 8f       	std	Y+27, r26	; 0x1b
    5a54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a56:	69 8d       	ldd	r22, Y+25	; 0x19
    5a58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a5e:	20 e0       	ldi	r18, 0x00	; 0
    5a60:	30 e0       	ldi	r19, 0x00	; 0
    5a62:	4a ef       	ldi	r20, 0xFA	; 250
    5a64:	54 e4       	ldi	r21, 0x44	; 68
    5a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a6a:	dc 01       	movw	r26, r24
    5a6c:	cb 01       	movw	r24, r22
    5a6e:	8d 8b       	std	Y+21, r24	; 0x15
    5a70:	9e 8b       	std	Y+22, r25	; 0x16
    5a72:	af 8b       	std	Y+23, r26	; 0x17
    5a74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5a76:	6d 89       	ldd	r22, Y+21	; 0x15
    5a78:	7e 89       	ldd	r23, Y+22	; 0x16
    5a7a:	8f 89       	ldd	r24, Y+23	; 0x17
    5a7c:	98 8d       	ldd	r25, Y+24	; 0x18
    5a7e:	20 e0       	ldi	r18, 0x00	; 0
    5a80:	30 e0       	ldi	r19, 0x00	; 0
    5a82:	40 e8       	ldi	r20, 0x80	; 128
    5a84:	5f e3       	ldi	r21, 0x3F	; 63
    5a86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5a8a:	88 23       	and	r24, r24
    5a8c:	2c f4       	brge	.+10     	; 0x5a98 <LED_voidLed2ON+0x86>
		__ticks = 1;
    5a8e:	81 e0       	ldi	r24, 0x01	; 1
    5a90:	90 e0       	ldi	r25, 0x00	; 0
    5a92:	9c 8b       	std	Y+20, r25	; 0x14
    5a94:	8b 8b       	std	Y+19, r24	; 0x13
    5a96:	3f c0       	rjmp	.+126    	; 0x5b16 <LED_voidLed2ON+0x104>
	else if (__tmp > 65535)
    5a98:	6d 89       	ldd	r22, Y+21	; 0x15
    5a9a:	7e 89       	ldd	r23, Y+22	; 0x16
    5a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    5a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    5aa0:	20 e0       	ldi	r18, 0x00	; 0
    5aa2:	3f ef       	ldi	r19, 0xFF	; 255
    5aa4:	4f e7       	ldi	r20, 0x7F	; 127
    5aa6:	57 e4       	ldi	r21, 0x47	; 71
    5aa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5aac:	18 16       	cp	r1, r24
    5aae:	4c f5       	brge	.+82     	; 0x5b02 <LED_voidLed2ON+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ab0:	69 8d       	ldd	r22, Y+25	; 0x19
    5ab2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5ab4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ab6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ab8:	20 e0       	ldi	r18, 0x00	; 0
    5aba:	30 e0       	ldi	r19, 0x00	; 0
    5abc:	40 e2       	ldi	r20, 0x20	; 32
    5abe:	51 e4       	ldi	r21, 0x41	; 65
    5ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ac4:	dc 01       	movw	r26, r24
    5ac6:	cb 01       	movw	r24, r22
    5ac8:	bc 01       	movw	r22, r24
    5aca:	cd 01       	movw	r24, r26
    5acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ad0:	dc 01       	movw	r26, r24
    5ad2:	cb 01       	movw	r24, r22
    5ad4:	9c 8b       	std	Y+20, r25	; 0x14
    5ad6:	8b 8b       	std	Y+19, r24	; 0x13
    5ad8:	0f c0       	rjmp	.+30     	; 0x5af8 <LED_voidLed2ON+0xe6>
    5ada:	88 ec       	ldi	r24, 0xC8	; 200
    5adc:	90 e0       	ldi	r25, 0x00	; 0
    5ade:	9a 8b       	std	Y+18, r25	; 0x12
    5ae0:	89 8b       	std	Y+17, r24	; 0x11
    5ae2:	89 89       	ldd	r24, Y+17	; 0x11
    5ae4:	9a 89       	ldd	r25, Y+18	; 0x12
    5ae6:	01 97       	sbiw	r24, 0x01	; 1
    5ae8:	f1 f7       	brne	.-4      	; 0x5ae6 <LED_voidLed2ON+0xd4>
    5aea:	9a 8b       	std	Y+18, r25	; 0x12
    5aec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5aee:	8b 89       	ldd	r24, Y+19	; 0x13
    5af0:	9c 89       	ldd	r25, Y+20	; 0x14
    5af2:	01 97       	sbiw	r24, 0x01	; 1
    5af4:	9c 8b       	std	Y+20, r25	; 0x14
    5af6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5af8:	8b 89       	ldd	r24, Y+19	; 0x13
    5afa:	9c 89       	ldd	r25, Y+20	; 0x14
    5afc:	00 97       	sbiw	r24, 0x00	; 0
    5afe:	69 f7       	brne	.-38     	; 0x5ada <LED_voidLed2ON+0xc8>
    5b00:	14 c0       	rjmp	.+40     	; 0x5b2a <LED_voidLed2ON+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b02:	6d 89       	ldd	r22, Y+21	; 0x15
    5b04:	7e 89       	ldd	r23, Y+22	; 0x16
    5b06:	8f 89       	ldd	r24, Y+23	; 0x17
    5b08:	98 8d       	ldd	r25, Y+24	; 0x18
    5b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b0e:	dc 01       	movw	r26, r24
    5b10:	cb 01       	movw	r24, r22
    5b12:	9c 8b       	std	Y+20, r25	; 0x14
    5b14:	8b 8b       	std	Y+19, r24	; 0x13
    5b16:	8b 89       	ldd	r24, Y+19	; 0x13
    5b18:	9c 89       	ldd	r25, Y+20	; 0x14
    5b1a:	98 8b       	std	Y+16, r25	; 0x10
    5b1c:	8f 87       	std	Y+15, r24	; 0x0f
    5b1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b20:	98 89       	ldd	r25, Y+16	; 0x10
    5b22:	01 97       	sbiw	r24, 0x01	; 1
    5b24:	f1 f7       	brne	.-4      	; 0x5b22 <LED_voidLed2ON+0x110>
    5b26:	98 8b       	std	Y+16, r25	; 0x10
    5b28:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	BUZZER_voidBuzzerOFF(PORTA ,PIN0);
    5b2a:	80 e0       	ldi	r24, 0x00	; 0
    5b2c:	60 e0       	ldi	r22, 0x00	; 0
    5b2e:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <BUZZER_voidBuzzerOFF>
    5b32:	80 e0       	ldi	r24, 0x00	; 0
    5b34:	90 e0       	ldi	r25, 0x00	; 0
    5b36:	aa e7       	ldi	r26, 0x7A	; 122
    5b38:	b4 e4       	ldi	r27, 0x44	; 68
    5b3a:	8b 87       	std	Y+11, r24	; 0x0b
    5b3c:	9c 87       	std	Y+12, r25	; 0x0c
    5b3e:	ad 87       	std	Y+13, r26	; 0x0d
    5b40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b42:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b44:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b46:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b48:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b4a:	20 e0       	ldi	r18, 0x00	; 0
    5b4c:	30 e0       	ldi	r19, 0x00	; 0
    5b4e:	4a ef       	ldi	r20, 0xFA	; 250
    5b50:	54 e4       	ldi	r21, 0x44	; 68
    5b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b56:	dc 01       	movw	r26, r24
    5b58:	cb 01       	movw	r24, r22
    5b5a:	8f 83       	std	Y+7, r24	; 0x07
    5b5c:	98 87       	std	Y+8, r25	; 0x08
    5b5e:	a9 87       	std	Y+9, r26	; 0x09
    5b60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5b62:	6f 81       	ldd	r22, Y+7	; 0x07
    5b64:	78 85       	ldd	r23, Y+8	; 0x08
    5b66:	89 85       	ldd	r24, Y+9	; 0x09
    5b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b6a:	20 e0       	ldi	r18, 0x00	; 0
    5b6c:	30 e0       	ldi	r19, 0x00	; 0
    5b6e:	40 e8       	ldi	r20, 0x80	; 128
    5b70:	5f e3       	ldi	r21, 0x3F	; 63
    5b72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5b76:	88 23       	and	r24, r24
    5b78:	2c f4       	brge	.+10     	; 0x5b84 <LED_voidLed2ON+0x172>
		__ticks = 1;
    5b7a:	81 e0       	ldi	r24, 0x01	; 1
    5b7c:	90 e0       	ldi	r25, 0x00	; 0
    5b7e:	9e 83       	std	Y+6, r25	; 0x06
    5b80:	8d 83       	std	Y+5, r24	; 0x05
    5b82:	3f c0       	rjmp	.+126    	; 0x5c02 <LED_voidLed2ON+0x1f0>
	else if (__tmp > 65535)
    5b84:	6f 81       	ldd	r22, Y+7	; 0x07
    5b86:	78 85       	ldd	r23, Y+8	; 0x08
    5b88:	89 85       	ldd	r24, Y+9	; 0x09
    5b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b8c:	20 e0       	ldi	r18, 0x00	; 0
    5b8e:	3f ef       	ldi	r19, 0xFF	; 255
    5b90:	4f e7       	ldi	r20, 0x7F	; 127
    5b92:	57 e4       	ldi	r21, 0x47	; 71
    5b94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5b98:	18 16       	cp	r1, r24
    5b9a:	4c f5       	brge	.+82     	; 0x5bee <LED_voidLed2ON+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ba0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ba2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ba4:	20 e0       	ldi	r18, 0x00	; 0
    5ba6:	30 e0       	ldi	r19, 0x00	; 0
    5ba8:	40 e2       	ldi	r20, 0x20	; 32
    5baa:	51 e4       	ldi	r21, 0x41	; 65
    5bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bb0:	dc 01       	movw	r26, r24
    5bb2:	cb 01       	movw	r24, r22
    5bb4:	bc 01       	movw	r22, r24
    5bb6:	cd 01       	movw	r24, r26
    5bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bbc:	dc 01       	movw	r26, r24
    5bbe:	cb 01       	movw	r24, r22
    5bc0:	9e 83       	std	Y+6, r25	; 0x06
    5bc2:	8d 83       	std	Y+5, r24	; 0x05
    5bc4:	0f c0       	rjmp	.+30     	; 0x5be4 <LED_voidLed2ON+0x1d2>
    5bc6:	88 ec       	ldi	r24, 0xC8	; 200
    5bc8:	90 e0       	ldi	r25, 0x00	; 0
    5bca:	9c 83       	std	Y+4, r25	; 0x04
    5bcc:	8b 83       	std	Y+3, r24	; 0x03
    5bce:	8b 81       	ldd	r24, Y+3	; 0x03
    5bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    5bd2:	01 97       	sbiw	r24, 0x01	; 1
    5bd4:	f1 f7       	brne	.-4      	; 0x5bd2 <LED_voidLed2ON+0x1c0>
    5bd6:	9c 83       	std	Y+4, r25	; 0x04
    5bd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bda:	8d 81       	ldd	r24, Y+5	; 0x05
    5bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    5bde:	01 97       	sbiw	r24, 0x01	; 1
    5be0:	9e 83       	std	Y+6, r25	; 0x06
    5be2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5be4:	8d 81       	ldd	r24, Y+5	; 0x05
    5be6:	9e 81       	ldd	r25, Y+6	; 0x06
    5be8:	00 97       	sbiw	r24, 0x00	; 0
    5bea:	69 f7       	brne	.-38     	; 0x5bc6 <LED_voidLed2ON+0x1b4>
    5bec:	14 c0       	rjmp	.+40     	; 0x5c16 <LED_voidLed2ON+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bee:	6f 81       	ldd	r22, Y+7	; 0x07
    5bf0:	78 85       	ldd	r23, Y+8	; 0x08
    5bf2:	89 85       	ldd	r24, Y+9	; 0x09
    5bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bfa:	dc 01       	movw	r26, r24
    5bfc:	cb 01       	movw	r24, r22
    5bfe:	9e 83       	std	Y+6, r25	; 0x06
    5c00:	8d 83       	std	Y+5, r24	; 0x05
    5c02:	8d 81       	ldd	r24, Y+5	; 0x05
    5c04:	9e 81       	ldd	r25, Y+6	; 0x06
    5c06:	9a 83       	std	Y+2, r25	; 0x02
    5c08:	89 83       	std	Y+1, r24	; 0x01
    5c0a:	89 81       	ldd	r24, Y+1	; 0x01
    5c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    5c0e:	01 97       	sbiw	r24, 0x01	; 1
    5c10:	f1 f7       	brne	.-4      	; 0x5c0e <LED_voidLed2ON+0x1fc>
    5c12:	9a 83       	std	Y+2, r25	; 0x02
    5c14:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    5c16:	6c 96       	adiw	r28, 0x1c	; 28
    5c18:	0f b6       	in	r0, 0x3f	; 63
    5c1a:	f8 94       	cli
    5c1c:	de bf       	out	0x3e, r29	; 62
    5c1e:	0f be       	out	0x3f, r0	; 63
    5c20:	cd bf       	out	0x3d, r28	; 61
    5c22:	cf 91       	pop	r28
    5c24:	df 91       	pop	r29
    5c26:	08 95       	ret

00005c28 <LED_voidLed3ON>:
void LED_voidLed3ON(void)
{
    5c28:	df 93       	push	r29
    5c2a:	cf 93       	push	r28
    5c2c:	cd b7       	in	r28, 0x3d	; 61
    5c2e:	de b7       	in	r29, 0x3e	; 62
    5c30:	6c 97       	sbiw	r28, 0x1c	; 28
    5c32:	0f b6       	in	r0, 0x3f	; 63
    5c34:	f8 94       	cli
    5c36:	de bf       	out	0x3e, r29	; 62
    5c38:	0f be       	out	0x3f, r0	; 63
    5c3a:	cd bf       	out	0x3d, r28	; 61
	LED_voidLedOn(PORTB ,PIN7 ,VCC);
    5c3c:	81 e0       	ldi	r24, 0x01	; 1
    5c3e:	67 e0       	ldi	r22, 0x07	; 7
    5c40:	41 e0       	ldi	r20, 0x01	; 1
    5c42:	0e 94 36 21 	call	0x426c	; 0x426c <LED_voidLedOn>
	LCD_voidWriteCommand(Lcd_Clear);
    5c46:	81 e0       	ldi	r24, 0x01	; 1
    5c48:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <LCD_voidWriteCommand>
	LCD_voidWriteString("LED_3 ON");
    5c4c:	82 e7       	ldi	r24, 0x72	; 114
    5c4e:	90 e0       	ldi	r25, 0x00	; 0
    5c50:	0e 94 35 28 	call	0x506a	; 0x506a <LCD_voidWriteString>
	BUZZER_voidBuzzerON(PORTA ,PIN0);
    5c54:	80 e0       	ldi	r24, 0x00	; 0
    5c56:	60 e0       	ldi	r22, 0x00	; 0
    5c58:	0e 94 cc 2b 	call	0x5798	; 0x5798 <BUZZER_voidBuzzerON>
    5c5c:	80 e0       	ldi	r24, 0x00	; 0
    5c5e:	90 e0       	ldi	r25, 0x00	; 0
    5c60:	a8 ec       	ldi	r26, 0xC8	; 200
    5c62:	b2 e4       	ldi	r27, 0x42	; 66
    5c64:	89 8f       	std	Y+25, r24	; 0x19
    5c66:	9a 8f       	std	Y+26, r25	; 0x1a
    5c68:	ab 8f       	std	Y+27, r26	; 0x1b
    5c6a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c6c:	69 8d       	ldd	r22, Y+25	; 0x19
    5c6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c74:	20 e0       	ldi	r18, 0x00	; 0
    5c76:	30 e0       	ldi	r19, 0x00	; 0
    5c78:	4a ef       	ldi	r20, 0xFA	; 250
    5c7a:	54 e4       	ldi	r21, 0x44	; 68
    5c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c80:	dc 01       	movw	r26, r24
    5c82:	cb 01       	movw	r24, r22
    5c84:	8d 8b       	std	Y+21, r24	; 0x15
    5c86:	9e 8b       	std	Y+22, r25	; 0x16
    5c88:	af 8b       	std	Y+23, r26	; 0x17
    5c8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5c8c:	6d 89       	ldd	r22, Y+21	; 0x15
    5c8e:	7e 89       	ldd	r23, Y+22	; 0x16
    5c90:	8f 89       	ldd	r24, Y+23	; 0x17
    5c92:	98 8d       	ldd	r25, Y+24	; 0x18
    5c94:	20 e0       	ldi	r18, 0x00	; 0
    5c96:	30 e0       	ldi	r19, 0x00	; 0
    5c98:	40 e8       	ldi	r20, 0x80	; 128
    5c9a:	5f e3       	ldi	r21, 0x3F	; 63
    5c9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5ca0:	88 23       	and	r24, r24
    5ca2:	2c f4       	brge	.+10     	; 0x5cae <LED_voidLed3ON+0x86>
		__ticks = 1;
    5ca4:	81 e0       	ldi	r24, 0x01	; 1
    5ca6:	90 e0       	ldi	r25, 0x00	; 0
    5ca8:	9c 8b       	std	Y+20, r25	; 0x14
    5caa:	8b 8b       	std	Y+19, r24	; 0x13
    5cac:	3f c0       	rjmp	.+126    	; 0x5d2c <LED_voidLed3ON+0x104>
	else if (__tmp > 65535)
    5cae:	6d 89       	ldd	r22, Y+21	; 0x15
    5cb0:	7e 89       	ldd	r23, Y+22	; 0x16
    5cb2:	8f 89       	ldd	r24, Y+23	; 0x17
    5cb4:	98 8d       	ldd	r25, Y+24	; 0x18
    5cb6:	20 e0       	ldi	r18, 0x00	; 0
    5cb8:	3f ef       	ldi	r19, 0xFF	; 255
    5cba:	4f e7       	ldi	r20, 0x7F	; 127
    5cbc:	57 e4       	ldi	r21, 0x47	; 71
    5cbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5cc2:	18 16       	cp	r1, r24
    5cc4:	4c f5       	brge	.+82     	; 0x5d18 <LED_voidLed3ON+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cc6:	69 8d       	ldd	r22, Y+25	; 0x19
    5cc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5cca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ccc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5cce:	20 e0       	ldi	r18, 0x00	; 0
    5cd0:	30 e0       	ldi	r19, 0x00	; 0
    5cd2:	40 e2       	ldi	r20, 0x20	; 32
    5cd4:	51 e4       	ldi	r21, 0x41	; 65
    5cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cda:	dc 01       	movw	r26, r24
    5cdc:	cb 01       	movw	r24, r22
    5cde:	bc 01       	movw	r22, r24
    5ce0:	cd 01       	movw	r24, r26
    5ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ce6:	dc 01       	movw	r26, r24
    5ce8:	cb 01       	movw	r24, r22
    5cea:	9c 8b       	std	Y+20, r25	; 0x14
    5cec:	8b 8b       	std	Y+19, r24	; 0x13
    5cee:	0f c0       	rjmp	.+30     	; 0x5d0e <LED_voidLed3ON+0xe6>
    5cf0:	88 ec       	ldi	r24, 0xC8	; 200
    5cf2:	90 e0       	ldi	r25, 0x00	; 0
    5cf4:	9a 8b       	std	Y+18, r25	; 0x12
    5cf6:	89 8b       	std	Y+17, r24	; 0x11
    5cf8:	89 89       	ldd	r24, Y+17	; 0x11
    5cfa:	9a 89       	ldd	r25, Y+18	; 0x12
    5cfc:	01 97       	sbiw	r24, 0x01	; 1
    5cfe:	f1 f7       	brne	.-4      	; 0x5cfc <LED_voidLed3ON+0xd4>
    5d00:	9a 8b       	std	Y+18, r25	; 0x12
    5d02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d04:	8b 89       	ldd	r24, Y+19	; 0x13
    5d06:	9c 89       	ldd	r25, Y+20	; 0x14
    5d08:	01 97       	sbiw	r24, 0x01	; 1
    5d0a:	9c 8b       	std	Y+20, r25	; 0x14
    5d0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d0e:	8b 89       	ldd	r24, Y+19	; 0x13
    5d10:	9c 89       	ldd	r25, Y+20	; 0x14
    5d12:	00 97       	sbiw	r24, 0x00	; 0
    5d14:	69 f7       	brne	.-38     	; 0x5cf0 <LED_voidLed3ON+0xc8>
    5d16:	14 c0       	rjmp	.+40     	; 0x5d40 <LED_voidLed3ON+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d18:	6d 89       	ldd	r22, Y+21	; 0x15
    5d1a:	7e 89       	ldd	r23, Y+22	; 0x16
    5d1c:	8f 89       	ldd	r24, Y+23	; 0x17
    5d1e:	98 8d       	ldd	r25, Y+24	; 0x18
    5d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d24:	dc 01       	movw	r26, r24
    5d26:	cb 01       	movw	r24, r22
    5d28:	9c 8b       	std	Y+20, r25	; 0x14
    5d2a:	8b 8b       	std	Y+19, r24	; 0x13
    5d2c:	8b 89       	ldd	r24, Y+19	; 0x13
    5d2e:	9c 89       	ldd	r25, Y+20	; 0x14
    5d30:	98 8b       	std	Y+16, r25	; 0x10
    5d32:	8f 87       	std	Y+15, r24	; 0x0f
    5d34:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d36:	98 89       	ldd	r25, Y+16	; 0x10
    5d38:	01 97       	sbiw	r24, 0x01	; 1
    5d3a:	f1 f7       	brne	.-4      	; 0x5d38 <LED_voidLed3ON+0x110>
    5d3c:	98 8b       	std	Y+16, r25	; 0x10
    5d3e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	BUZZER_voidBuzzerOFF(PORTA ,PIN0);
    5d40:	80 e0       	ldi	r24, 0x00	; 0
    5d42:	60 e0       	ldi	r22, 0x00	; 0
    5d44:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <BUZZER_voidBuzzerOFF>
    5d48:	80 e0       	ldi	r24, 0x00	; 0
    5d4a:	90 e0       	ldi	r25, 0x00	; 0
    5d4c:	aa e7       	ldi	r26, 0x7A	; 122
    5d4e:	b4 e4       	ldi	r27, 0x44	; 68
    5d50:	8b 87       	std	Y+11, r24	; 0x0b
    5d52:	9c 87       	std	Y+12, r25	; 0x0c
    5d54:	ad 87       	std	Y+13, r26	; 0x0d
    5d56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d58:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d60:	20 e0       	ldi	r18, 0x00	; 0
    5d62:	30 e0       	ldi	r19, 0x00	; 0
    5d64:	4a ef       	ldi	r20, 0xFA	; 250
    5d66:	54 e4       	ldi	r21, 0x44	; 68
    5d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d6c:	dc 01       	movw	r26, r24
    5d6e:	cb 01       	movw	r24, r22
    5d70:	8f 83       	std	Y+7, r24	; 0x07
    5d72:	98 87       	std	Y+8, r25	; 0x08
    5d74:	a9 87       	std	Y+9, r26	; 0x09
    5d76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5d78:	6f 81       	ldd	r22, Y+7	; 0x07
    5d7a:	78 85       	ldd	r23, Y+8	; 0x08
    5d7c:	89 85       	ldd	r24, Y+9	; 0x09
    5d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d80:	20 e0       	ldi	r18, 0x00	; 0
    5d82:	30 e0       	ldi	r19, 0x00	; 0
    5d84:	40 e8       	ldi	r20, 0x80	; 128
    5d86:	5f e3       	ldi	r21, 0x3F	; 63
    5d88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5d8c:	88 23       	and	r24, r24
    5d8e:	2c f4       	brge	.+10     	; 0x5d9a <LED_voidLed3ON+0x172>
		__ticks = 1;
    5d90:	81 e0       	ldi	r24, 0x01	; 1
    5d92:	90 e0       	ldi	r25, 0x00	; 0
    5d94:	9e 83       	std	Y+6, r25	; 0x06
    5d96:	8d 83       	std	Y+5, r24	; 0x05
    5d98:	3f c0       	rjmp	.+126    	; 0x5e18 <LED_voidLed3ON+0x1f0>
	else if (__tmp > 65535)
    5d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    5d9c:	78 85       	ldd	r23, Y+8	; 0x08
    5d9e:	89 85       	ldd	r24, Y+9	; 0x09
    5da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5da2:	20 e0       	ldi	r18, 0x00	; 0
    5da4:	3f ef       	ldi	r19, 0xFF	; 255
    5da6:	4f e7       	ldi	r20, 0x7F	; 127
    5da8:	57 e4       	ldi	r21, 0x47	; 71
    5daa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5dae:	18 16       	cp	r1, r24
    5db0:	4c f5       	brge	.+82     	; 0x5e04 <LED_voidLed3ON+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5db2:	6b 85       	ldd	r22, Y+11	; 0x0b
    5db4:	7c 85       	ldd	r23, Y+12	; 0x0c
    5db6:	8d 85       	ldd	r24, Y+13	; 0x0d
    5db8:	9e 85       	ldd	r25, Y+14	; 0x0e
    5dba:	20 e0       	ldi	r18, 0x00	; 0
    5dbc:	30 e0       	ldi	r19, 0x00	; 0
    5dbe:	40 e2       	ldi	r20, 0x20	; 32
    5dc0:	51 e4       	ldi	r21, 0x41	; 65
    5dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5dc6:	dc 01       	movw	r26, r24
    5dc8:	cb 01       	movw	r24, r22
    5dca:	bc 01       	movw	r22, r24
    5dcc:	cd 01       	movw	r24, r26
    5dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dd2:	dc 01       	movw	r26, r24
    5dd4:	cb 01       	movw	r24, r22
    5dd6:	9e 83       	std	Y+6, r25	; 0x06
    5dd8:	8d 83       	std	Y+5, r24	; 0x05
    5dda:	0f c0       	rjmp	.+30     	; 0x5dfa <LED_voidLed3ON+0x1d2>
    5ddc:	88 ec       	ldi	r24, 0xC8	; 200
    5dde:	90 e0       	ldi	r25, 0x00	; 0
    5de0:	9c 83       	std	Y+4, r25	; 0x04
    5de2:	8b 83       	std	Y+3, r24	; 0x03
    5de4:	8b 81       	ldd	r24, Y+3	; 0x03
    5de6:	9c 81       	ldd	r25, Y+4	; 0x04
    5de8:	01 97       	sbiw	r24, 0x01	; 1
    5dea:	f1 f7       	brne	.-4      	; 0x5de8 <LED_voidLed3ON+0x1c0>
    5dec:	9c 83       	std	Y+4, r25	; 0x04
    5dee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5df0:	8d 81       	ldd	r24, Y+5	; 0x05
    5df2:	9e 81       	ldd	r25, Y+6	; 0x06
    5df4:	01 97       	sbiw	r24, 0x01	; 1
    5df6:	9e 83       	std	Y+6, r25	; 0x06
    5df8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    5dfc:	9e 81       	ldd	r25, Y+6	; 0x06
    5dfe:	00 97       	sbiw	r24, 0x00	; 0
    5e00:	69 f7       	brne	.-38     	; 0x5ddc <LED_voidLed3ON+0x1b4>
    5e02:	14 c0       	rjmp	.+40     	; 0x5e2c <LED_voidLed3ON+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e04:	6f 81       	ldd	r22, Y+7	; 0x07
    5e06:	78 85       	ldd	r23, Y+8	; 0x08
    5e08:	89 85       	ldd	r24, Y+9	; 0x09
    5e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e10:	dc 01       	movw	r26, r24
    5e12:	cb 01       	movw	r24, r22
    5e14:	9e 83       	std	Y+6, r25	; 0x06
    5e16:	8d 83       	std	Y+5, r24	; 0x05
    5e18:	8d 81       	ldd	r24, Y+5	; 0x05
    5e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    5e1c:	9a 83       	std	Y+2, r25	; 0x02
    5e1e:	89 83       	std	Y+1, r24	; 0x01
    5e20:	89 81       	ldd	r24, Y+1	; 0x01
    5e22:	9a 81       	ldd	r25, Y+2	; 0x02
    5e24:	01 97       	sbiw	r24, 0x01	; 1
    5e26:	f1 f7       	brne	.-4      	; 0x5e24 <LED_voidLed3ON+0x1fc>
    5e28:	9a 83       	std	Y+2, r25	; 0x02
    5e2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    5e2c:	6c 96       	adiw	r28, 0x1c	; 28
    5e2e:	0f b6       	in	r0, 0x3f	; 63
    5e30:	f8 94       	cli
    5e32:	de bf       	out	0x3e, r29	; 62
    5e34:	0f be       	out	0x3f, r0	; 63
    5e36:	cd bf       	out	0x3d, r28	; 61
    5e38:	cf 91       	pop	r28
    5e3a:	df 91       	pop	r29
    5e3c:	08 95       	ret

00005e3e <LED_voidLed4ON>:
void LED_voidLed4ON(void)
{
    5e3e:	df 93       	push	r29
    5e40:	cf 93       	push	r28
    5e42:	cd b7       	in	r28, 0x3d	; 61
    5e44:	de b7       	in	r29, 0x3e	; 62
    5e46:	6c 97       	sbiw	r28, 0x1c	; 28
    5e48:	0f b6       	in	r0, 0x3f	; 63
    5e4a:	f8 94       	cli
    5e4c:	de bf       	out	0x3e, r29	; 62
    5e4e:	0f be       	out	0x3f, r0	; 63
    5e50:	cd bf       	out	0x3d, r28	; 61
	LED_voidLedOn(PORTA ,PIN2 ,VCC);
    5e52:	80 e0       	ldi	r24, 0x00	; 0
    5e54:	62 e0       	ldi	r22, 0x02	; 2
    5e56:	41 e0       	ldi	r20, 0x01	; 1
    5e58:	0e 94 36 21 	call	0x426c	; 0x426c <LED_voidLedOn>
	LCD_voidWriteCommand(Lcd_Clear);
    5e5c:	81 e0       	ldi	r24, 0x01	; 1
    5e5e:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <LCD_voidWriteCommand>
	LCD_voidWriteString("LED_4 ON");
    5e62:	8b e7       	ldi	r24, 0x7B	; 123
    5e64:	90 e0       	ldi	r25, 0x00	; 0
    5e66:	0e 94 35 28 	call	0x506a	; 0x506a <LCD_voidWriteString>
	BUZZER_voidBuzzerON(PORTA ,PIN0);
    5e6a:	80 e0       	ldi	r24, 0x00	; 0
    5e6c:	60 e0       	ldi	r22, 0x00	; 0
    5e6e:	0e 94 cc 2b 	call	0x5798	; 0x5798 <BUZZER_voidBuzzerON>
    5e72:	80 e0       	ldi	r24, 0x00	; 0
    5e74:	90 e0       	ldi	r25, 0x00	; 0
    5e76:	a8 ec       	ldi	r26, 0xC8	; 200
    5e78:	b2 e4       	ldi	r27, 0x42	; 66
    5e7a:	89 8f       	std	Y+25, r24	; 0x19
    5e7c:	9a 8f       	std	Y+26, r25	; 0x1a
    5e7e:	ab 8f       	std	Y+27, r26	; 0x1b
    5e80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e82:	69 8d       	ldd	r22, Y+25	; 0x19
    5e84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5e86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5e88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5e8a:	20 e0       	ldi	r18, 0x00	; 0
    5e8c:	30 e0       	ldi	r19, 0x00	; 0
    5e8e:	4a ef       	ldi	r20, 0xFA	; 250
    5e90:	54 e4       	ldi	r21, 0x44	; 68
    5e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e96:	dc 01       	movw	r26, r24
    5e98:	cb 01       	movw	r24, r22
    5e9a:	8d 8b       	std	Y+21, r24	; 0x15
    5e9c:	9e 8b       	std	Y+22, r25	; 0x16
    5e9e:	af 8b       	std	Y+23, r26	; 0x17
    5ea0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5ea2:	6d 89       	ldd	r22, Y+21	; 0x15
    5ea4:	7e 89       	ldd	r23, Y+22	; 0x16
    5ea6:	8f 89       	ldd	r24, Y+23	; 0x17
    5ea8:	98 8d       	ldd	r25, Y+24	; 0x18
    5eaa:	20 e0       	ldi	r18, 0x00	; 0
    5eac:	30 e0       	ldi	r19, 0x00	; 0
    5eae:	40 e8       	ldi	r20, 0x80	; 128
    5eb0:	5f e3       	ldi	r21, 0x3F	; 63
    5eb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5eb6:	88 23       	and	r24, r24
    5eb8:	2c f4       	brge	.+10     	; 0x5ec4 <LED_voidLed4ON+0x86>
		__ticks = 1;
    5eba:	81 e0       	ldi	r24, 0x01	; 1
    5ebc:	90 e0       	ldi	r25, 0x00	; 0
    5ebe:	9c 8b       	std	Y+20, r25	; 0x14
    5ec0:	8b 8b       	std	Y+19, r24	; 0x13
    5ec2:	3f c0       	rjmp	.+126    	; 0x5f42 <LED_voidLed4ON+0x104>
	else if (__tmp > 65535)
    5ec4:	6d 89       	ldd	r22, Y+21	; 0x15
    5ec6:	7e 89       	ldd	r23, Y+22	; 0x16
    5ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    5eca:	98 8d       	ldd	r25, Y+24	; 0x18
    5ecc:	20 e0       	ldi	r18, 0x00	; 0
    5ece:	3f ef       	ldi	r19, 0xFF	; 255
    5ed0:	4f e7       	ldi	r20, 0x7F	; 127
    5ed2:	57 e4       	ldi	r21, 0x47	; 71
    5ed4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5ed8:	18 16       	cp	r1, r24
    5eda:	4c f5       	brge	.+82     	; 0x5f2e <LED_voidLed4ON+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5edc:	69 8d       	ldd	r22, Y+25	; 0x19
    5ede:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5ee0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ee2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ee4:	20 e0       	ldi	r18, 0x00	; 0
    5ee6:	30 e0       	ldi	r19, 0x00	; 0
    5ee8:	40 e2       	ldi	r20, 0x20	; 32
    5eea:	51 e4       	ldi	r21, 0x41	; 65
    5eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ef0:	dc 01       	movw	r26, r24
    5ef2:	cb 01       	movw	r24, r22
    5ef4:	bc 01       	movw	r22, r24
    5ef6:	cd 01       	movw	r24, r26
    5ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5efc:	dc 01       	movw	r26, r24
    5efe:	cb 01       	movw	r24, r22
    5f00:	9c 8b       	std	Y+20, r25	; 0x14
    5f02:	8b 8b       	std	Y+19, r24	; 0x13
    5f04:	0f c0       	rjmp	.+30     	; 0x5f24 <LED_voidLed4ON+0xe6>
    5f06:	88 ec       	ldi	r24, 0xC8	; 200
    5f08:	90 e0       	ldi	r25, 0x00	; 0
    5f0a:	9a 8b       	std	Y+18, r25	; 0x12
    5f0c:	89 8b       	std	Y+17, r24	; 0x11
    5f0e:	89 89       	ldd	r24, Y+17	; 0x11
    5f10:	9a 89       	ldd	r25, Y+18	; 0x12
    5f12:	01 97       	sbiw	r24, 0x01	; 1
    5f14:	f1 f7       	brne	.-4      	; 0x5f12 <LED_voidLed4ON+0xd4>
    5f16:	9a 8b       	std	Y+18, r25	; 0x12
    5f18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f1a:	8b 89       	ldd	r24, Y+19	; 0x13
    5f1c:	9c 89       	ldd	r25, Y+20	; 0x14
    5f1e:	01 97       	sbiw	r24, 0x01	; 1
    5f20:	9c 8b       	std	Y+20, r25	; 0x14
    5f22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f24:	8b 89       	ldd	r24, Y+19	; 0x13
    5f26:	9c 89       	ldd	r25, Y+20	; 0x14
    5f28:	00 97       	sbiw	r24, 0x00	; 0
    5f2a:	69 f7       	brne	.-38     	; 0x5f06 <LED_voidLed4ON+0xc8>
    5f2c:	14 c0       	rjmp	.+40     	; 0x5f56 <LED_voidLed4ON+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f2e:	6d 89       	ldd	r22, Y+21	; 0x15
    5f30:	7e 89       	ldd	r23, Y+22	; 0x16
    5f32:	8f 89       	ldd	r24, Y+23	; 0x17
    5f34:	98 8d       	ldd	r25, Y+24	; 0x18
    5f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f3a:	dc 01       	movw	r26, r24
    5f3c:	cb 01       	movw	r24, r22
    5f3e:	9c 8b       	std	Y+20, r25	; 0x14
    5f40:	8b 8b       	std	Y+19, r24	; 0x13
    5f42:	8b 89       	ldd	r24, Y+19	; 0x13
    5f44:	9c 89       	ldd	r25, Y+20	; 0x14
    5f46:	98 8b       	std	Y+16, r25	; 0x10
    5f48:	8f 87       	std	Y+15, r24	; 0x0f
    5f4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    5f4c:	98 89       	ldd	r25, Y+16	; 0x10
    5f4e:	01 97       	sbiw	r24, 0x01	; 1
    5f50:	f1 f7       	brne	.-4      	; 0x5f4e <LED_voidLed4ON+0x110>
    5f52:	98 8b       	std	Y+16, r25	; 0x10
    5f54:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	BUZZER_voidBuzzerOFF(PORTA ,PIN0);
    5f56:	80 e0       	ldi	r24, 0x00	; 0
    5f58:	60 e0       	ldi	r22, 0x00	; 0
    5f5a:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <BUZZER_voidBuzzerOFF>
    5f5e:	80 e0       	ldi	r24, 0x00	; 0
    5f60:	90 e0       	ldi	r25, 0x00	; 0
    5f62:	aa e7       	ldi	r26, 0x7A	; 122
    5f64:	b4 e4       	ldi	r27, 0x44	; 68
    5f66:	8b 87       	std	Y+11, r24	; 0x0b
    5f68:	9c 87       	std	Y+12, r25	; 0x0c
    5f6a:	ad 87       	std	Y+13, r26	; 0x0d
    5f6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f70:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f72:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f74:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f76:	20 e0       	ldi	r18, 0x00	; 0
    5f78:	30 e0       	ldi	r19, 0x00	; 0
    5f7a:	4a ef       	ldi	r20, 0xFA	; 250
    5f7c:	54 e4       	ldi	r21, 0x44	; 68
    5f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f82:	dc 01       	movw	r26, r24
    5f84:	cb 01       	movw	r24, r22
    5f86:	8f 83       	std	Y+7, r24	; 0x07
    5f88:	98 87       	std	Y+8, r25	; 0x08
    5f8a:	a9 87       	std	Y+9, r26	; 0x09
    5f8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    5f90:	78 85       	ldd	r23, Y+8	; 0x08
    5f92:	89 85       	ldd	r24, Y+9	; 0x09
    5f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f96:	20 e0       	ldi	r18, 0x00	; 0
    5f98:	30 e0       	ldi	r19, 0x00	; 0
    5f9a:	40 e8       	ldi	r20, 0x80	; 128
    5f9c:	5f e3       	ldi	r21, 0x3F	; 63
    5f9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5fa2:	88 23       	and	r24, r24
    5fa4:	2c f4       	brge	.+10     	; 0x5fb0 <LED_voidLed4ON+0x172>
		__ticks = 1;
    5fa6:	81 e0       	ldi	r24, 0x01	; 1
    5fa8:	90 e0       	ldi	r25, 0x00	; 0
    5faa:	9e 83       	std	Y+6, r25	; 0x06
    5fac:	8d 83       	std	Y+5, r24	; 0x05
    5fae:	3f c0       	rjmp	.+126    	; 0x602e <LED_voidLed4ON+0x1f0>
	else if (__tmp > 65535)
    5fb0:	6f 81       	ldd	r22, Y+7	; 0x07
    5fb2:	78 85       	ldd	r23, Y+8	; 0x08
    5fb4:	89 85       	ldd	r24, Y+9	; 0x09
    5fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5fb8:	20 e0       	ldi	r18, 0x00	; 0
    5fba:	3f ef       	ldi	r19, 0xFF	; 255
    5fbc:	4f e7       	ldi	r20, 0x7F	; 127
    5fbe:	57 e4       	ldi	r21, 0x47	; 71
    5fc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5fc4:	18 16       	cp	r1, r24
    5fc6:	4c f5       	brge	.+82     	; 0x601a <LED_voidLed4ON+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    5fca:	7c 85       	ldd	r23, Y+12	; 0x0c
    5fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    5fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    5fd0:	20 e0       	ldi	r18, 0x00	; 0
    5fd2:	30 e0       	ldi	r19, 0x00	; 0
    5fd4:	40 e2       	ldi	r20, 0x20	; 32
    5fd6:	51 e4       	ldi	r21, 0x41	; 65
    5fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fdc:	dc 01       	movw	r26, r24
    5fde:	cb 01       	movw	r24, r22
    5fe0:	bc 01       	movw	r22, r24
    5fe2:	cd 01       	movw	r24, r26
    5fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fe8:	dc 01       	movw	r26, r24
    5fea:	cb 01       	movw	r24, r22
    5fec:	9e 83       	std	Y+6, r25	; 0x06
    5fee:	8d 83       	std	Y+5, r24	; 0x05
    5ff0:	0f c0       	rjmp	.+30     	; 0x6010 <LED_voidLed4ON+0x1d2>
    5ff2:	88 ec       	ldi	r24, 0xC8	; 200
    5ff4:	90 e0       	ldi	r25, 0x00	; 0
    5ff6:	9c 83       	std	Y+4, r25	; 0x04
    5ff8:	8b 83       	std	Y+3, r24	; 0x03
    5ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    5ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    5ffe:	01 97       	sbiw	r24, 0x01	; 1
    6000:	f1 f7       	brne	.-4      	; 0x5ffe <LED_voidLed4ON+0x1c0>
    6002:	9c 83       	std	Y+4, r25	; 0x04
    6004:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6006:	8d 81       	ldd	r24, Y+5	; 0x05
    6008:	9e 81       	ldd	r25, Y+6	; 0x06
    600a:	01 97       	sbiw	r24, 0x01	; 1
    600c:	9e 83       	std	Y+6, r25	; 0x06
    600e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6010:	8d 81       	ldd	r24, Y+5	; 0x05
    6012:	9e 81       	ldd	r25, Y+6	; 0x06
    6014:	00 97       	sbiw	r24, 0x00	; 0
    6016:	69 f7       	brne	.-38     	; 0x5ff2 <LED_voidLed4ON+0x1b4>
    6018:	14 c0       	rjmp	.+40     	; 0x6042 <LED_voidLed4ON+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    601a:	6f 81       	ldd	r22, Y+7	; 0x07
    601c:	78 85       	ldd	r23, Y+8	; 0x08
    601e:	89 85       	ldd	r24, Y+9	; 0x09
    6020:	9a 85       	ldd	r25, Y+10	; 0x0a
    6022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6026:	dc 01       	movw	r26, r24
    6028:	cb 01       	movw	r24, r22
    602a:	9e 83       	std	Y+6, r25	; 0x06
    602c:	8d 83       	std	Y+5, r24	; 0x05
    602e:	8d 81       	ldd	r24, Y+5	; 0x05
    6030:	9e 81       	ldd	r25, Y+6	; 0x06
    6032:	9a 83       	std	Y+2, r25	; 0x02
    6034:	89 83       	std	Y+1, r24	; 0x01
    6036:	89 81       	ldd	r24, Y+1	; 0x01
    6038:	9a 81       	ldd	r25, Y+2	; 0x02
    603a:	01 97       	sbiw	r24, 0x01	; 1
    603c:	f1 f7       	brne	.-4      	; 0x603a <LED_voidLed4ON+0x1fc>
    603e:	9a 83       	std	Y+2, r25	; 0x02
    6040:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    6042:	6c 96       	adiw	r28, 0x1c	; 28
    6044:	0f b6       	in	r0, 0x3f	; 63
    6046:	f8 94       	cli
    6048:	de bf       	out	0x3e, r29	; 62
    604a:	0f be       	out	0x3f, r0	; 63
    604c:	cd bf       	out	0x3d, r28	; 61
    604e:	cf 91       	pop	r28
    6050:	df 91       	pop	r29
    6052:	08 95       	ret

00006054 <LED_voidLed1OFF>:


void LED_voidLed1OFF(void)
{
    6054:	df 93       	push	r29
    6056:	cf 93       	push	r28
    6058:	cd b7       	in	r28, 0x3d	; 61
    605a:	de b7       	in	r29, 0x3e	; 62
    605c:	6c 97       	sbiw	r28, 0x1c	; 28
    605e:	0f b6       	in	r0, 0x3f	; 63
    6060:	f8 94       	cli
    6062:	de bf       	out	0x3e, r29	; 62
    6064:	0f be       	out	0x3f, r0	; 63
    6066:	cd bf       	out	0x3d, r28	; 61
	LED_voidLedOff(PORTB ,PIN5,VCC);
    6068:	81 e0       	ldi	r24, 0x01	; 1
    606a:	90 e0       	ldi	r25, 0x00	; 0
    606c:	65 e0       	ldi	r22, 0x05	; 5
    606e:	70 e0       	ldi	r23, 0x00	; 0
    6070:	41 e0       	ldi	r20, 0x01	; 1
    6072:	50 e0       	ldi	r21, 0x00	; 0
    6074:	0e 94 bf 21 	call	0x437e	; 0x437e <LED_voidLedOff>
	LCD_voidWriteCommand(Lcd_Clear);
    6078:	81 e0       	ldi	r24, 0x01	; 1
    607a:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <LCD_voidWriteCommand>
	LCD_voidWriteString("LED_1 OFF");
    607e:	84 e8       	ldi	r24, 0x84	; 132
    6080:	90 e0       	ldi	r25, 0x00	; 0
    6082:	0e 94 35 28 	call	0x506a	; 0x506a <LCD_voidWriteString>
	BUZZER_voidBuzzerON(PORTA ,PIN0);
    6086:	80 e0       	ldi	r24, 0x00	; 0
    6088:	60 e0       	ldi	r22, 0x00	; 0
    608a:	0e 94 cc 2b 	call	0x5798	; 0x5798 <BUZZER_voidBuzzerON>
    608e:	80 e0       	ldi	r24, 0x00	; 0
    6090:	90 e0       	ldi	r25, 0x00	; 0
    6092:	a8 ec       	ldi	r26, 0xC8	; 200
    6094:	b2 e4       	ldi	r27, 0x42	; 66
    6096:	89 8f       	std	Y+25, r24	; 0x19
    6098:	9a 8f       	std	Y+26, r25	; 0x1a
    609a:	ab 8f       	std	Y+27, r26	; 0x1b
    609c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    609e:	69 8d       	ldd	r22, Y+25	; 0x19
    60a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    60a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    60a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    60a6:	20 e0       	ldi	r18, 0x00	; 0
    60a8:	30 e0       	ldi	r19, 0x00	; 0
    60aa:	4a ef       	ldi	r20, 0xFA	; 250
    60ac:	54 e4       	ldi	r21, 0x44	; 68
    60ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60b2:	dc 01       	movw	r26, r24
    60b4:	cb 01       	movw	r24, r22
    60b6:	8d 8b       	std	Y+21, r24	; 0x15
    60b8:	9e 8b       	std	Y+22, r25	; 0x16
    60ba:	af 8b       	std	Y+23, r26	; 0x17
    60bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    60be:	6d 89       	ldd	r22, Y+21	; 0x15
    60c0:	7e 89       	ldd	r23, Y+22	; 0x16
    60c2:	8f 89       	ldd	r24, Y+23	; 0x17
    60c4:	98 8d       	ldd	r25, Y+24	; 0x18
    60c6:	20 e0       	ldi	r18, 0x00	; 0
    60c8:	30 e0       	ldi	r19, 0x00	; 0
    60ca:	40 e8       	ldi	r20, 0x80	; 128
    60cc:	5f e3       	ldi	r21, 0x3F	; 63
    60ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    60d2:	88 23       	and	r24, r24
    60d4:	2c f4       	brge	.+10     	; 0x60e0 <LED_voidLed1OFF+0x8c>
		__ticks = 1;
    60d6:	81 e0       	ldi	r24, 0x01	; 1
    60d8:	90 e0       	ldi	r25, 0x00	; 0
    60da:	9c 8b       	std	Y+20, r25	; 0x14
    60dc:	8b 8b       	std	Y+19, r24	; 0x13
    60de:	3f c0       	rjmp	.+126    	; 0x615e <LED_voidLed1OFF+0x10a>
	else if (__tmp > 65535)
    60e0:	6d 89       	ldd	r22, Y+21	; 0x15
    60e2:	7e 89       	ldd	r23, Y+22	; 0x16
    60e4:	8f 89       	ldd	r24, Y+23	; 0x17
    60e6:	98 8d       	ldd	r25, Y+24	; 0x18
    60e8:	20 e0       	ldi	r18, 0x00	; 0
    60ea:	3f ef       	ldi	r19, 0xFF	; 255
    60ec:	4f e7       	ldi	r20, 0x7F	; 127
    60ee:	57 e4       	ldi	r21, 0x47	; 71
    60f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    60f4:	18 16       	cp	r1, r24
    60f6:	4c f5       	brge	.+82     	; 0x614a <LED_voidLed1OFF+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60f8:	69 8d       	ldd	r22, Y+25	; 0x19
    60fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    60fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    60fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6100:	20 e0       	ldi	r18, 0x00	; 0
    6102:	30 e0       	ldi	r19, 0x00	; 0
    6104:	40 e2       	ldi	r20, 0x20	; 32
    6106:	51 e4       	ldi	r21, 0x41	; 65
    6108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    610c:	dc 01       	movw	r26, r24
    610e:	cb 01       	movw	r24, r22
    6110:	bc 01       	movw	r22, r24
    6112:	cd 01       	movw	r24, r26
    6114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6118:	dc 01       	movw	r26, r24
    611a:	cb 01       	movw	r24, r22
    611c:	9c 8b       	std	Y+20, r25	; 0x14
    611e:	8b 8b       	std	Y+19, r24	; 0x13
    6120:	0f c0       	rjmp	.+30     	; 0x6140 <LED_voidLed1OFF+0xec>
    6122:	88 ec       	ldi	r24, 0xC8	; 200
    6124:	90 e0       	ldi	r25, 0x00	; 0
    6126:	9a 8b       	std	Y+18, r25	; 0x12
    6128:	89 8b       	std	Y+17, r24	; 0x11
    612a:	89 89       	ldd	r24, Y+17	; 0x11
    612c:	9a 89       	ldd	r25, Y+18	; 0x12
    612e:	01 97       	sbiw	r24, 0x01	; 1
    6130:	f1 f7       	brne	.-4      	; 0x612e <LED_voidLed1OFF+0xda>
    6132:	9a 8b       	std	Y+18, r25	; 0x12
    6134:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6136:	8b 89       	ldd	r24, Y+19	; 0x13
    6138:	9c 89       	ldd	r25, Y+20	; 0x14
    613a:	01 97       	sbiw	r24, 0x01	; 1
    613c:	9c 8b       	std	Y+20, r25	; 0x14
    613e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6140:	8b 89       	ldd	r24, Y+19	; 0x13
    6142:	9c 89       	ldd	r25, Y+20	; 0x14
    6144:	00 97       	sbiw	r24, 0x00	; 0
    6146:	69 f7       	brne	.-38     	; 0x6122 <LED_voidLed1OFF+0xce>
    6148:	14 c0       	rjmp	.+40     	; 0x6172 <LED_voidLed1OFF+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    614a:	6d 89       	ldd	r22, Y+21	; 0x15
    614c:	7e 89       	ldd	r23, Y+22	; 0x16
    614e:	8f 89       	ldd	r24, Y+23	; 0x17
    6150:	98 8d       	ldd	r25, Y+24	; 0x18
    6152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6156:	dc 01       	movw	r26, r24
    6158:	cb 01       	movw	r24, r22
    615a:	9c 8b       	std	Y+20, r25	; 0x14
    615c:	8b 8b       	std	Y+19, r24	; 0x13
    615e:	8b 89       	ldd	r24, Y+19	; 0x13
    6160:	9c 89       	ldd	r25, Y+20	; 0x14
    6162:	98 8b       	std	Y+16, r25	; 0x10
    6164:	8f 87       	std	Y+15, r24	; 0x0f
    6166:	8f 85       	ldd	r24, Y+15	; 0x0f
    6168:	98 89       	ldd	r25, Y+16	; 0x10
    616a:	01 97       	sbiw	r24, 0x01	; 1
    616c:	f1 f7       	brne	.-4      	; 0x616a <LED_voidLed1OFF+0x116>
    616e:	98 8b       	std	Y+16, r25	; 0x10
    6170:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	BUZZER_voidBuzzerOFF(PORTA ,PIN0);
    6172:	80 e0       	ldi	r24, 0x00	; 0
    6174:	60 e0       	ldi	r22, 0x00	; 0
    6176:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <BUZZER_voidBuzzerOFF>
    617a:	80 e0       	ldi	r24, 0x00	; 0
    617c:	90 e0       	ldi	r25, 0x00	; 0
    617e:	aa e7       	ldi	r26, 0x7A	; 122
    6180:	b4 e4       	ldi	r27, 0x44	; 68
    6182:	8b 87       	std	Y+11, r24	; 0x0b
    6184:	9c 87       	std	Y+12, r25	; 0x0c
    6186:	ad 87       	std	Y+13, r26	; 0x0d
    6188:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    618a:	6b 85       	ldd	r22, Y+11	; 0x0b
    618c:	7c 85       	ldd	r23, Y+12	; 0x0c
    618e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6190:	9e 85       	ldd	r25, Y+14	; 0x0e
    6192:	20 e0       	ldi	r18, 0x00	; 0
    6194:	30 e0       	ldi	r19, 0x00	; 0
    6196:	4a ef       	ldi	r20, 0xFA	; 250
    6198:	54 e4       	ldi	r21, 0x44	; 68
    619a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    619e:	dc 01       	movw	r26, r24
    61a0:	cb 01       	movw	r24, r22
    61a2:	8f 83       	std	Y+7, r24	; 0x07
    61a4:	98 87       	std	Y+8, r25	; 0x08
    61a6:	a9 87       	std	Y+9, r26	; 0x09
    61a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    61aa:	6f 81       	ldd	r22, Y+7	; 0x07
    61ac:	78 85       	ldd	r23, Y+8	; 0x08
    61ae:	89 85       	ldd	r24, Y+9	; 0x09
    61b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    61b2:	20 e0       	ldi	r18, 0x00	; 0
    61b4:	30 e0       	ldi	r19, 0x00	; 0
    61b6:	40 e8       	ldi	r20, 0x80	; 128
    61b8:	5f e3       	ldi	r21, 0x3F	; 63
    61ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    61be:	88 23       	and	r24, r24
    61c0:	2c f4       	brge	.+10     	; 0x61cc <LED_voidLed1OFF+0x178>
		__ticks = 1;
    61c2:	81 e0       	ldi	r24, 0x01	; 1
    61c4:	90 e0       	ldi	r25, 0x00	; 0
    61c6:	9e 83       	std	Y+6, r25	; 0x06
    61c8:	8d 83       	std	Y+5, r24	; 0x05
    61ca:	3f c0       	rjmp	.+126    	; 0x624a <LED_voidLed1OFF+0x1f6>
	else if (__tmp > 65535)
    61cc:	6f 81       	ldd	r22, Y+7	; 0x07
    61ce:	78 85       	ldd	r23, Y+8	; 0x08
    61d0:	89 85       	ldd	r24, Y+9	; 0x09
    61d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    61d4:	20 e0       	ldi	r18, 0x00	; 0
    61d6:	3f ef       	ldi	r19, 0xFF	; 255
    61d8:	4f e7       	ldi	r20, 0x7F	; 127
    61da:	57 e4       	ldi	r21, 0x47	; 71
    61dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    61e0:	18 16       	cp	r1, r24
    61e2:	4c f5       	brge	.+82     	; 0x6236 <LED_voidLed1OFF+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    61e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    61e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    61ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    61ec:	20 e0       	ldi	r18, 0x00	; 0
    61ee:	30 e0       	ldi	r19, 0x00	; 0
    61f0:	40 e2       	ldi	r20, 0x20	; 32
    61f2:	51 e4       	ldi	r21, 0x41	; 65
    61f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61f8:	dc 01       	movw	r26, r24
    61fa:	cb 01       	movw	r24, r22
    61fc:	bc 01       	movw	r22, r24
    61fe:	cd 01       	movw	r24, r26
    6200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6204:	dc 01       	movw	r26, r24
    6206:	cb 01       	movw	r24, r22
    6208:	9e 83       	std	Y+6, r25	; 0x06
    620a:	8d 83       	std	Y+5, r24	; 0x05
    620c:	0f c0       	rjmp	.+30     	; 0x622c <LED_voidLed1OFF+0x1d8>
    620e:	88 ec       	ldi	r24, 0xC8	; 200
    6210:	90 e0       	ldi	r25, 0x00	; 0
    6212:	9c 83       	std	Y+4, r25	; 0x04
    6214:	8b 83       	std	Y+3, r24	; 0x03
    6216:	8b 81       	ldd	r24, Y+3	; 0x03
    6218:	9c 81       	ldd	r25, Y+4	; 0x04
    621a:	01 97       	sbiw	r24, 0x01	; 1
    621c:	f1 f7       	brne	.-4      	; 0x621a <LED_voidLed1OFF+0x1c6>
    621e:	9c 83       	std	Y+4, r25	; 0x04
    6220:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6222:	8d 81       	ldd	r24, Y+5	; 0x05
    6224:	9e 81       	ldd	r25, Y+6	; 0x06
    6226:	01 97       	sbiw	r24, 0x01	; 1
    6228:	9e 83       	std	Y+6, r25	; 0x06
    622a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    622c:	8d 81       	ldd	r24, Y+5	; 0x05
    622e:	9e 81       	ldd	r25, Y+6	; 0x06
    6230:	00 97       	sbiw	r24, 0x00	; 0
    6232:	69 f7       	brne	.-38     	; 0x620e <LED_voidLed1OFF+0x1ba>
    6234:	14 c0       	rjmp	.+40     	; 0x625e <LED_voidLed1OFF+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6236:	6f 81       	ldd	r22, Y+7	; 0x07
    6238:	78 85       	ldd	r23, Y+8	; 0x08
    623a:	89 85       	ldd	r24, Y+9	; 0x09
    623c:	9a 85       	ldd	r25, Y+10	; 0x0a
    623e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6242:	dc 01       	movw	r26, r24
    6244:	cb 01       	movw	r24, r22
    6246:	9e 83       	std	Y+6, r25	; 0x06
    6248:	8d 83       	std	Y+5, r24	; 0x05
    624a:	8d 81       	ldd	r24, Y+5	; 0x05
    624c:	9e 81       	ldd	r25, Y+6	; 0x06
    624e:	9a 83       	std	Y+2, r25	; 0x02
    6250:	89 83       	std	Y+1, r24	; 0x01
    6252:	89 81       	ldd	r24, Y+1	; 0x01
    6254:	9a 81       	ldd	r25, Y+2	; 0x02
    6256:	01 97       	sbiw	r24, 0x01	; 1
    6258:	f1 f7       	brne	.-4      	; 0x6256 <LED_voidLed1OFF+0x202>
    625a:	9a 83       	std	Y+2, r25	; 0x02
    625c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    625e:	6c 96       	adiw	r28, 0x1c	; 28
    6260:	0f b6       	in	r0, 0x3f	; 63
    6262:	f8 94       	cli
    6264:	de bf       	out	0x3e, r29	; 62
    6266:	0f be       	out	0x3f, r0	; 63
    6268:	cd bf       	out	0x3d, r28	; 61
    626a:	cf 91       	pop	r28
    626c:	df 91       	pop	r29
    626e:	08 95       	ret

00006270 <LED_voidLed2OFF>:
void LED_voidLed2OFF(void)
{
    6270:	df 93       	push	r29
    6272:	cf 93       	push	r28
    6274:	cd b7       	in	r28, 0x3d	; 61
    6276:	de b7       	in	r29, 0x3e	; 62
    6278:	6c 97       	sbiw	r28, 0x1c	; 28
    627a:	0f b6       	in	r0, 0x3f	; 63
    627c:	f8 94       	cli
    627e:	de bf       	out	0x3e, r29	; 62
    6280:	0f be       	out	0x3f, r0	; 63
    6282:	cd bf       	out	0x3d, r28	; 61
	LED_voidLedOff(PORTB ,PIN6 ,VCC);
    6284:	81 e0       	ldi	r24, 0x01	; 1
    6286:	90 e0       	ldi	r25, 0x00	; 0
    6288:	66 e0       	ldi	r22, 0x06	; 6
    628a:	70 e0       	ldi	r23, 0x00	; 0
    628c:	41 e0       	ldi	r20, 0x01	; 1
    628e:	50 e0       	ldi	r21, 0x00	; 0
    6290:	0e 94 bf 21 	call	0x437e	; 0x437e <LED_voidLedOff>
	LCD_voidWriteCommand(Lcd_Clear);
    6294:	81 e0       	ldi	r24, 0x01	; 1
    6296:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <LCD_voidWriteCommand>
	LCD_voidWriteString("LED_2 OFF");
    629a:	8e e8       	ldi	r24, 0x8E	; 142
    629c:	90 e0       	ldi	r25, 0x00	; 0
    629e:	0e 94 35 28 	call	0x506a	; 0x506a <LCD_voidWriteString>
	BUZZER_voidBuzzerON(PORTA ,PIN0);
    62a2:	80 e0       	ldi	r24, 0x00	; 0
    62a4:	60 e0       	ldi	r22, 0x00	; 0
    62a6:	0e 94 cc 2b 	call	0x5798	; 0x5798 <BUZZER_voidBuzzerON>
    62aa:	80 e0       	ldi	r24, 0x00	; 0
    62ac:	90 e0       	ldi	r25, 0x00	; 0
    62ae:	a8 ec       	ldi	r26, 0xC8	; 200
    62b0:	b2 e4       	ldi	r27, 0x42	; 66
    62b2:	89 8f       	std	Y+25, r24	; 0x19
    62b4:	9a 8f       	std	Y+26, r25	; 0x1a
    62b6:	ab 8f       	std	Y+27, r26	; 0x1b
    62b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62ba:	69 8d       	ldd	r22, Y+25	; 0x19
    62bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    62be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    62c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    62c2:	20 e0       	ldi	r18, 0x00	; 0
    62c4:	30 e0       	ldi	r19, 0x00	; 0
    62c6:	4a ef       	ldi	r20, 0xFA	; 250
    62c8:	54 e4       	ldi	r21, 0x44	; 68
    62ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62ce:	dc 01       	movw	r26, r24
    62d0:	cb 01       	movw	r24, r22
    62d2:	8d 8b       	std	Y+21, r24	; 0x15
    62d4:	9e 8b       	std	Y+22, r25	; 0x16
    62d6:	af 8b       	std	Y+23, r26	; 0x17
    62d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    62da:	6d 89       	ldd	r22, Y+21	; 0x15
    62dc:	7e 89       	ldd	r23, Y+22	; 0x16
    62de:	8f 89       	ldd	r24, Y+23	; 0x17
    62e0:	98 8d       	ldd	r25, Y+24	; 0x18
    62e2:	20 e0       	ldi	r18, 0x00	; 0
    62e4:	30 e0       	ldi	r19, 0x00	; 0
    62e6:	40 e8       	ldi	r20, 0x80	; 128
    62e8:	5f e3       	ldi	r21, 0x3F	; 63
    62ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    62ee:	88 23       	and	r24, r24
    62f0:	2c f4       	brge	.+10     	; 0x62fc <LED_voidLed2OFF+0x8c>
		__ticks = 1;
    62f2:	81 e0       	ldi	r24, 0x01	; 1
    62f4:	90 e0       	ldi	r25, 0x00	; 0
    62f6:	9c 8b       	std	Y+20, r25	; 0x14
    62f8:	8b 8b       	std	Y+19, r24	; 0x13
    62fa:	3f c0       	rjmp	.+126    	; 0x637a <LED_voidLed2OFF+0x10a>
	else if (__tmp > 65535)
    62fc:	6d 89       	ldd	r22, Y+21	; 0x15
    62fe:	7e 89       	ldd	r23, Y+22	; 0x16
    6300:	8f 89       	ldd	r24, Y+23	; 0x17
    6302:	98 8d       	ldd	r25, Y+24	; 0x18
    6304:	20 e0       	ldi	r18, 0x00	; 0
    6306:	3f ef       	ldi	r19, 0xFF	; 255
    6308:	4f e7       	ldi	r20, 0x7F	; 127
    630a:	57 e4       	ldi	r21, 0x47	; 71
    630c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6310:	18 16       	cp	r1, r24
    6312:	4c f5       	brge	.+82     	; 0x6366 <LED_voidLed2OFF+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6314:	69 8d       	ldd	r22, Y+25	; 0x19
    6316:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6318:	8b 8d       	ldd	r24, Y+27	; 0x1b
    631a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    631c:	20 e0       	ldi	r18, 0x00	; 0
    631e:	30 e0       	ldi	r19, 0x00	; 0
    6320:	40 e2       	ldi	r20, 0x20	; 32
    6322:	51 e4       	ldi	r21, 0x41	; 65
    6324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6328:	dc 01       	movw	r26, r24
    632a:	cb 01       	movw	r24, r22
    632c:	bc 01       	movw	r22, r24
    632e:	cd 01       	movw	r24, r26
    6330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6334:	dc 01       	movw	r26, r24
    6336:	cb 01       	movw	r24, r22
    6338:	9c 8b       	std	Y+20, r25	; 0x14
    633a:	8b 8b       	std	Y+19, r24	; 0x13
    633c:	0f c0       	rjmp	.+30     	; 0x635c <LED_voidLed2OFF+0xec>
    633e:	88 ec       	ldi	r24, 0xC8	; 200
    6340:	90 e0       	ldi	r25, 0x00	; 0
    6342:	9a 8b       	std	Y+18, r25	; 0x12
    6344:	89 8b       	std	Y+17, r24	; 0x11
    6346:	89 89       	ldd	r24, Y+17	; 0x11
    6348:	9a 89       	ldd	r25, Y+18	; 0x12
    634a:	01 97       	sbiw	r24, 0x01	; 1
    634c:	f1 f7       	brne	.-4      	; 0x634a <LED_voidLed2OFF+0xda>
    634e:	9a 8b       	std	Y+18, r25	; 0x12
    6350:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6352:	8b 89       	ldd	r24, Y+19	; 0x13
    6354:	9c 89       	ldd	r25, Y+20	; 0x14
    6356:	01 97       	sbiw	r24, 0x01	; 1
    6358:	9c 8b       	std	Y+20, r25	; 0x14
    635a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    635c:	8b 89       	ldd	r24, Y+19	; 0x13
    635e:	9c 89       	ldd	r25, Y+20	; 0x14
    6360:	00 97       	sbiw	r24, 0x00	; 0
    6362:	69 f7       	brne	.-38     	; 0x633e <LED_voidLed2OFF+0xce>
    6364:	14 c0       	rjmp	.+40     	; 0x638e <LED_voidLed2OFF+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6366:	6d 89       	ldd	r22, Y+21	; 0x15
    6368:	7e 89       	ldd	r23, Y+22	; 0x16
    636a:	8f 89       	ldd	r24, Y+23	; 0x17
    636c:	98 8d       	ldd	r25, Y+24	; 0x18
    636e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6372:	dc 01       	movw	r26, r24
    6374:	cb 01       	movw	r24, r22
    6376:	9c 8b       	std	Y+20, r25	; 0x14
    6378:	8b 8b       	std	Y+19, r24	; 0x13
    637a:	8b 89       	ldd	r24, Y+19	; 0x13
    637c:	9c 89       	ldd	r25, Y+20	; 0x14
    637e:	98 8b       	std	Y+16, r25	; 0x10
    6380:	8f 87       	std	Y+15, r24	; 0x0f
    6382:	8f 85       	ldd	r24, Y+15	; 0x0f
    6384:	98 89       	ldd	r25, Y+16	; 0x10
    6386:	01 97       	sbiw	r24, 0x01	; 1
    6388:	f1 f7       	brne	.-4      	; 0x6386 <LED_voidLed2OFF+0x116>
    638a:	98 8b       	std	Y+16, r25	; 0x10
    638c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	BUZZER_voidBuzzerOFF(PORTA ,PIN0);
    638e:	80 e0       	ldi	r24, 0x00	; 0
    6390:	60 e0       	ldi	r22, 0x00	; 0
    6392:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <BUZZER_voidBuzzerOFF>
    6396:	80 e0       	ldi	r24, 0x00	; 0
    6398:	90 e0       	ldi	r25, 0x00	; 0
    639a:	aa e7       	ldi	r26, 0x7A	; 122
    639c:	b4 e4       	ldi	r27, 0x44	; 68
    639e:	8b 87       	std	Y+11, r24	; 0x0b
    63a0:	9c 87       	std	Y+12, r25	; 0x0c
    63a2:	ad 87       	std	Y+13, r26	; 0x0d
    63a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    63a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    63a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    63aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    63ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    63ae:	20 e0       	ldi	r18, 0x00	; 0
    63b0:	30 e0       	ldi	r19, 0x00	; 0
    63b2:	4a ef       	ldi	r20, 0xFA	; 250
    63b4:	54 e4       	ldi	r21, 0x44	; 68
    63b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63ba:	dc 01       	movw	r26, r24
    63bc:	cb 01       	movw	r24, r22
    63be:	8f 83       	std	Y+7, r24	; 0x07
    63c0:	98 87       	std	Y+8, r25	; 0x08
    63c2:	a9 87       	std	Y+9, r26	; 0x09
    63c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    63c6:	6f 81       	ldd	r22, Y+7	; 0x07
    63c8:	78 85       	ldd	r23, Y+8	; 0x08
    63ca:	89 85       	ldd	r24, Y+9	; 0x09
    63cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    63ce:	20 e0       	ldi	r18, 0x00	; 0
    63d0:	30 e0       	ldi	r19, 0x00	; 0
    63d2:	40 e8       	ldi	r20, 0x80	; 128
    63d4:	5f e3       	ldi	r21, 0x3F	; 63
    63d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    63da:	88 23       	and	r24, r24
    63dc:	2c f4       	brge	.+10     	; 0x63e8 <LED_voidLed2OFF+0x178>
		__ticks = 1;
    63de:	81 e0       	ldi	r24, 0x01	; 1
    63e0:	90 e0       	ldi	r25, 0x00	; 0
    63e2:	9e 83       	std	Y+6, r25	; 0x06
    63e4:	8d 83       	std	Y+5, r24	; 0x05
    63e6:	3f c0       	rjmp	.+126    	; 0x6466 <LED_voidLed2OFF+0x1f6>
	else if (__tmp > 65535)
    63e8:	6f 81       	ldd	r22, Y+7	; 0x07
    63ea:	78 85       	ldd	r23, Y+8	; 0x08
    63ec:	89 85       	ldd	r24, Y+9	; 0x09
    63ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    63f0:	20 e0       	ldi	r18, 0x00	; 0
    63f2:	3f ef       	ldi	r19, 0xFF	; 255
    63f4:	4f e7       	ldi	r20, 0x7F	; 127
    63f6:	57 e4       	ldi	r21, 0x47	; 71
    63f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    63fc:	18 16       	cp	r1, r24
    63fe:	4c f5       	brge	.+82     	; 0x6452 <LED_voidLed2OFF+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6400:	6b 85       	ldd	r22, Y+11	; 0x0b
    6402:	7c 85       	ldd	r23, Y+12	; 0x0c
    6404:	8d 85       	ldd	r24, Y+13	; 0x0d
    6406:	9e 85       	ldd	r25, Y+14	; 0x0e
    6408:	20 e0       	ldi	r18, 0x00	; 0
    640a:	30 e0       	ldi	r19, 0x00	; 0
    640c:	40 e2       	ldi	r20, 0x20	; 32
    640e:	51 e4       	ldi	r21, 0x41	; 65
    6410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6414:	dc 01       	movw	r26, r24
    6416:	cb 01       	movw	r24, r22
    6418:	bc 01       	movw	r22, r24
    641a:	cd 01       	movw	r24, r26
    641c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6420:	dc 01       	movw	r26, r24
    6422:	cb 01       	movw	r24, r22
    6424:	9e 83       	std	Y+6, r25	; 0x06
    6426:	8d 83       	std	Y+5, r24	; 0x05
    6428:	0f c0       	rjmp	.+30     	; 0x6448 <LED_voidLed2OFF+0x1d8>
    642a:	88 ec       	ldi	r24, 0xC8	; 200
    642c:	90 e0       	ldi	r25, 0x00	; 0
    642e:	9c 83       	std	Y+4, r25	; 0x04
    6430:	8b 83       	std	Y+3, r24	; 0x03
    6432:	8b 81       	ldd	r24, Y+3	; 0x03
    6434:	9c 81       	ldd	r25, Y+4	; 0x04
    6436:	01 97       	sbiw	r24, 0x01	; 1
    6438:	f1 f7       	brne	.-4      	; 0x6436 <LED_voidLed2OFF+0x1c6>
    643a:	9c 83       	std	Y+4, r25	; 0x04
    643c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    643e:	8d 81       	ldd	r24, Y+5	; 0x05
    6440:	9e 81       	ldd	r25, Y+6	; 0x06
    6442:	01 97       	sbiw	r24, 0x01	; 1
    6444:	9e 83       	std	Y+6, r25	; 0x06
    6446:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6448:	8d 81       	ldd	r24, Y+5	; 0x05
    644a:	9e 81       	ldd	r25, Y+6	; 0x06
    644c:	00 97       	sbiw	r24, 0x00	; 0
    644e:	69 f7       	brne	.-38     	; 0x642a <LED_voidLed2OFF+0x1ba>
    6450:	14 c0       	rjmp	.+40     	; 0x647a <LED_voidLed2OFF+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6452:	6f 81       	ldd	r22, Y+7	; 0x07
    6454:	78 85       	ldd	r23, Y+8	; 0x08
    6456:	89 85       	ldd	r24, Y+9	; 0x09
    6458:	9a 85       	ldd	r25, Y+10	; 0x0a
    645a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    645e:	dc 01       	movw	r26, r24
    6460:	cb 01       	movw	r24, r22
    6462:	9e 83       	std	Y+6, r25	; 0x06
    6464:	8d 83       	std	Y+5, r24	; 0x05
    6466:	8d 81       	ldd	r24, Y+5	; 0x05
    6468:	9e 81       	ldd	r25, Y+6	; 0x06
    646a:	9a 83       	std	Y+2, r25	; 0x02
    646c:	89 83       	std	Y+1, r24	; 0x01
    646e:	89 81       	ldd	r24, Y+1	; 0x01
    6470:	9a 81       	ldd	r25, Y+2	; 0x02
    6472:	01 97       	sbiw	r24, 0x01	; 1
    6474:	f1 f7       	brne	.-4      	; 0x6472 <LED_voidLed2OFF+0x202>
    6476:	9a 83       	std	Y+2, r25	; 0x02
    6478:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    647a:	6c 96       	adiw	r28, 0x1c	; 28
    647c:	0f b6       	in	r0, 0x3f	; 63
    647e:	f8 94       	cli
    6480:	de bf       	out	0x3e, r29	; 62
    6482:	0f be       	out	0x3f, r0	; 63
    6484:	cd bf       	out	0x3d, r28	; 61
    6486:	cf 91       	pop	r28
    6488:	df 91       	pop	r29
    648a:	08 95       	ret

0000648c <LED_voidLed3OFF>:
void LED_voidLed3OFF(void)
{
    648c:	df 93       	push	r29
    648e:	cf 93       	push	r28
    6490:	cd b7       	in	r28, 0x3d	; 61
    6492:	de b7       	in	r29, 0x3e	; 62
    6494:	6c 97       	sbiw	r28, 0x1c	; 28
    6496:	0f b6       	in	r0, 0x3f	; 63
    6498:	f8 94       	cli
    649a:	de bf       	out	0x3e, r29	; 62
    649c:	0f be       	out	0x3f, r0	; 63
    649e:	cd bf       	out	0x3d, r28	; 61
	LED_voidLedOff(PORTB ,PIN7 ,VCC);
    64a0:	81 e0       	ldi	r24, 0x01	; 1
    64a2:	90 e0       	ldi	r25, 0x00	; 0
    64a4:	67 e0       	ldi	r22, 0x07	; 7
    64a6:	70 e0       	ldi	r23, 0x00	; 0
    64a8:	41 e0       	ldi	r20, 0x01	; 1
    64aa:	50 e0       	ldi	r21, 0x00	; 0
    64ac:	0e 94 bf 21 	call	0x437e	; 0x437e <LED_voidLedOff>
	LCD_voidWriteCommand(Lcd_Clear);
    64b0:	81 e0       	ldi	r24, 0x01	; 1
    64b2:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <LCD_voidWriteCommand>
	LCD_voidWriteString("LED_3 OFF");
    64b6:	88 e9       	ldi	r24, 0x98	; 152
    64b8:	90 e0       	ldi	r25, 0x00	; 0
    64ba:	0e 94 35 28 	call	0x506a	; 0x506a <LCD_voidWriteString>
	BUZZER_voidBuzzerON(PORTA ,PIN0);
    64be:	80 e0       	ldi	r24, 0x00	; 0
    64c0:	60 e0       	ldi	r22, 0x00	; 0
    64c2:	0e 94 cc 2b 	call	0x5798	; 0x5798 <BUZZER_voidBuzzerON>
    64c6:	80 e0       	ldi	r24, 0x00	; 0
    64c8:	90 e0       	ldi	r25, 0x00	; 0
    64ca:	a8 ec       	ldi	r26, 0xC8	; 200
    64cc:	b2 e4       	ldi	r27, 0x42	; 66
    64ce:	89 8f       	std	Y+25, r24	; 0x19
    64d0:	9a 8f       	std	Y+26, r25	; 0x1a
    64d2:	ab 8f       	std	Y+27, r26	; 0x1b
    64d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64d6:	69 8d       	ldd	r22, Y+25	; 0x19
    64d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    64da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    64dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    64de:	20 e0       	ldi	r18, 0x00	; 0
    64e0:	30 e0       	ldi	r19, 0x00	; 0
    64e2:	4a ef       	ldi	r20, 0xFA	; 250
    64e4:	54 e4       	ldi	r21, 0x44	; 68
    64e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    64ea:	dc 01       	movw	r26, r24
    64ec:	cb 01       	movw	r24, r22
    64ee:	8d 8b       	std	Y+21, r24	; 0x15
    64f0:	9e 8b       	std	Y+22, r25	; 0x16
    64f2:	af 8b       	std	Y+23, r26	; 0x17
    64f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    64f6:	6d 89       	ldd	r22, Y+21	; 0x15
    64f8:	7e 89       	ldd	r23, Y+22	; 0x16
    64fa:	8f 89       	ldd	r24, Y+23	; 0x17
    64fc:	98 8d       	ldd	r25, Y+24	; 0x18
    64fe:	20 e0       	ldi	r18, 0x00	; 0
    6500:	30 e0       	ldi	r19, 0x00	; 0
    6502:	40 e8       	ldi	r20, 0x80	; 128
    6504:	5f e3       	ldi	r21, 0x3F	; 63
    6506:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    650a:	88 23       	and	r24, r24
    650c:	2c f4       	brge	.+10     	; 0x6518 <LED_voidLed3OFF+0x8c>
		__ticks = 1;
    650e:	81 e0       	ldi	r24, 0x01	; 1
    6510:	90 e0       	ldi	r25, 0x00	; 0
    6512:	9c 8b       	std	Y+20, r25	; 0x14
    6514:	8b 8b       	std	Y+19, r24	; 0x13
    6516:	3f c0       	rjmp	.+126    	; 0x6596 <LED_voidLed3OFF+0x10a>
	else if (__tmp > 65535)
    6518:	6d 89       	ldd	r22, Y+21	; 0x15
    651a:	7e 89       	ldd	r23, Y+22	; 0x16
    651c:	8f 89       	ldd	r24, Y+23	; 0x17
    651e:	98 8d       	ldd	r25, Y+24	; 0x18
    6520:	20 e0       	ldi	r18, 0x00	; 0
    6522:	3f ef       	ldi	r19, 0xFF	; 255
    6524:	4f e7       	ldi	r20, 0x7F	; 127
    6526:	57 e4       	ldi	r21, 0x47	; 71
    6528:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    652c:	18 16       	cp	r1, r24
    652e:	4c f5       	brge	.+82     	; 0x6582 <LED_voidLed3OFF+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6530:	69 8d       	ldd	r22, Y+25	; 0x19
    6532:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6534:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6536:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6538:	20 e0       	ldi	r18, 0x00	; 0
    653a:	30 e0       	ldi	r19, 0x00	; 0
    653c:	40 e2       	ldi	r20, 0x20	; 32
    653e:	51 e4       	ldi	r21, 0x41	; 65
    6540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6544:	dc 01       	movw	r26, r24
    6546:	cb 01       	movw	r24, r22
    6548:	bc 01       	movw	r22, r24
    654a:	cd 01       	movw	r24, r26
    654c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6550:	dc 01       	movw	r26, r24
    6552:	cb 01       	movw	r24, r22
    6554:	9c 8b       	std	Y+20, r25	; 0x14
    6556:	8b 8b       	std	Y+19, r24	; 0x13
    6558:	0f c0       	rjmp	.+30     	; 0x6578 <LED_voidLed3OFF+0xec>
    655a:	88 ec       	ldi	r24, 0xC8	; 200
    655c:	90 e0       	ldi	r25, 0x00	; 0
    655e:	9a 8b       	std	Y+18, r25	; 0x12
    6560:	89 8b       	std	Y+17, r24	; 0x11
    6562:	89 89       	ldd	r24, Y+17	; 0x11
    6564:	9a 89       	ldd	r25, Y+18	; 0x12
    6566:	01 97       	sbiw	r24, 0x01	; 1
    6568:	f1 f7       	brne	.-4      	; 0x6566 <LED_voidLed3OFF+0xda>
    656a:	9a 8b       	std	Y+18, r25	; 0x12
    656c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    656e:	8b 89       	ldd	r24, Y+19	; 0x13
    6570:	9c 89       	ldd	r25, Y+20	; 0x14
    6572:	01 97       	sbiw	r24, 0x01	; 1
    6574:	9c 8b       	std	Y+20, r25	; 0x14
    6576:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6578:	8b 89       	ldd	r24, Y+19	; 0x13
    657a:	9c 89       	ldd	r25, Y+20	; 0x14
    657c:	00 97       	sbiw	r24, 0x00	; 0
    657e:	69 f7       	brne	.-38     	; 0x655a <LED_voidLed3OFF+0xce>
    6580:	14 c0       	rjmp	.+40     	; 0x65aa <LED_voidLed3OFF+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6582:	6d 89       	ldd	r22, Y+21	; 0x15
    6584:	7e 89       	ldd	r23, Y+22	; 0x16
    6586:	8f 89       	ldd	r24, Y+23	; 0x17
    6588:	98 8d       	ldd	r25, Y+24	; 0x18
    658a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    658e:	dc 01       	movw	r26, r24
    6590:	cb 01       	movw	r24, r22
    6592:	9c 8b       	std	Y+20, r25	; 0x14
    6594:	8b 8b       	std	Y+19, r24	; 0x13
    6596:	8b 89       	ldd	r24, Y+19	; 0x13
    6598:	9c 89       	ldd	r25, Y+20	; 0x14
    659a:	98 8b       	std	Y+16, r25	; 0x10
    659c:	8f 87       	std	Y+15, r24	; 0x0f
    659e:	8f 85       	ldd	r24, Y+15	; 0x0f
    65a0:	98 89       	ldd	r25, Y+16	; 0x10
    65a2:	01 97       	sbiw	r24, 0x01	; 1
    65a4:	f1 f7       	brne	.-4      	; 0x65a2 <LED_voidLed3OFF+0x116>
    65a6:	98 8b       	std	Y+16, r25	; 0x10
    65a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	BUZZER_voidBuzzerOFF(PORTA ,PIN0);
    65aa:	80 e0       	ldi	r24, 0x00	; 0
    65ac:	60 e0       	ldi	r22, 0x00	; 0
    65ae:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <BUZZER_voidBuzzerOFF>
    65b2:	80 e0       	ldi	r24, 0x00	; 0
    65b4:	90 e0       	ldi	r25, 0x00	; 0
    65b6:	aa e7       	ldi	r26, 0x7A	; 122
    65b8:	b4 e4       	ldi	r27, 0x44	; 68
    65ba:	8b 87       	std	Y+11, r24	; 0x0b
    65bc:	9c 87       	std	Y+12, r25	; 0x0c
    65be:	ad 87       	std	Y+13, r26	; 0x0d
    65c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    65c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    65c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    65c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    65c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    65ca:	20 e0       	ldi	r18, 0x00	; 0
    65cc:	30 e0       	ldi	r19, 0x00	; 0
    65ce:	4a ef       	ldi	r20, 0xFA	; 250
    65d0:	54 e4       	ldi	r21, 0x44	; 68
    65d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    65d6:	dc 01       	movw	r26, r24
    65d8:	cb 01       	movw	r24, r22
    65da:	8f 83       	std	Y+7, r24	; 0x07
    65dc:	98 87       	std	Y+8, r25	; 0x08
    65de:	a9 87       	std	Y+9, r26	; 0x09
    65e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    65e2:	6f 81       	ldd	r22, Y+7	; 0x07
    65e4:	78 85       	ldd	r23, Y+8	; 0x08
    65e6:	89 85       	ldd	r24, Y+9	; 0x09
    65e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    65ea:	20 e0       	ldi	r18, 0x00	; 0
    65ec:	30 e0       	ldi	r19, 0x00	; 0
    65ee:	40 e8       	ldi	r20, 0x80	; 128
    65f0:	5f e3       	ldi	r21, 0x3F	; 63
    65f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    65f6:	88 23       	and	r24, r24
    65f8:	2c f4       	brge	.+10     	; 0x6604 <LED_voidLed3OFF+0x178>
		__ticks = 1;
    65fa:	81 e0       	ldi	r24, 0x01	; 1
    65fc:	90 e0       	ldi	r25, 0x00	; 0
    65fe:	9e 83       	std	Y+6, r25	; 0x06
    6600:	8d 83       	std	Y+5, r24	; 0x05
    6602:	3f c0       	rjmp	.+126    	; 0x6682 <LED_voidLed3OFF+0x1f6>
	else if (__tmp > 65535)
    6604:	6f 81       	ldd	r22, Y+7	; 0x07
    6606:	78 85       	ldd	r23, Y+8	; 0x08
    6608:	89 85       	ldd	r24, Y+9	; 0x09
    660a:	9a 85       	ldd	r25, Y+10	; 0x0a
    660c:	20 e0       	ldi	r18, 0x00	; 0
    660e:	3f ef       	ldi	r19, 0xFF	; 255
    6610:	4f e7       	ldi	r20, 0x7F	; 127
    6612:	57 e4       	ldi	r21, 0x47	; 71
    6614:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6618:	18 16       	cp	r1, r24
    661a:	4c f5       	brge	.+82     	; 0x666e <LED_voidLed3OFF+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    661c:	6b 85       	ldd	r22, Y+11	; 0x0b
    661e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6620:	8d 85       	ldd	r24, Y+13	; 0x0d
    6622:	9e 85       	ldd	r25, Y+14	; 0x0e
    6624:	20 e0       	ldi	r18, 0x00	; 0
    6626:	30 e0       	ldi	r19, 0x00	; 0
    6628:	40 e2       	ldi	r20, 0x20	; 32
    662a:	51 e4       	ldi	r21, 0x41	; 65
    662c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6630:	dc 01       	movw	r26, r24
    6632:	cb 01       	movw	r24, r22
    6634:	bc 01       	movw	r22, r24
    6636:	cd 01       	movw	r24, r26
    6638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    663c:	dc 01       	movw	r26, r24
    663e:	cb 01       	movw	r24, r22
    6640:	9e 83       	std	Y+6, r25	; 0x06
    6642:	8d 83       	std	Y+5, r24	; 0x05
    6644:	0f c0       	rjmp	.+30     	; 0x6664 <LED_voidLed3OFF+0x1d8>
    6646:	88 ec       	ldi	r24, 0xC8	; 200
    6648:	90 e0       	ldi	r25, 0x00	; 0
    664a:	9c 83       	std	Y+4, r25	; 0x04
    664c:	8b 83       	std	Y+3, r24	; 0x03
    664e:	8b 81       	ldd	r24, Y+3	; 0x03
    6650:	9c 81       	ldd	r25, Y+4	; 0x04
    6652:	01 97       	sbiw	r24, 0x01	; 1
    6654:	f1 f7       	brne	.-4      	; 0x6652 <LED_voidLed3OFF+0x1c6>
    6656:	9c 83       	std	Y+4, r25	; 0x04
    6658:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    665a:	8d 81       	ldd	r24, Y+5	; 0x05
    665c:	9e 81       	ldd	r25, Y+6	; 0x06
    665e:	01 97       	sbiw	r24, 0x01	; 1
    6660:	9e 83       	std	Y+6, r25	; 0x06
    6662:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6664:	8d 81       	ldd	r24, Y+5	; 0x05
    6666:	9e 81       	ldd	r25, Y+6	; 0x06
    6668:	00 97       	sbiw	r24, 0x00	; 0
    666a:	69 f7       	brne	.-38     	; 0x6646 <LED_voidLed3OFF+0x1ba>
    666c:	14 c0       	rjmp	.+40     	; 0x6696 <LED_voidLed3OFF+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    666e:	6f 81       	ldd	r22, Y+7	; 0x07
    6670:	78 85       	ldd	r23, Y+8	; 0x08
    6672:	89 85       	ldd	r24, Y+9	; 0x09
    6674:	9a 85       	ldd	r25, Y+10	; 0x0a
    6676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    667a:	dc 01       	movw	r26, r24
    667c:	cb 01       	movw	r24, r22
    667e:	9e 83       	std	Y+6, r25	; 0x06
    6680:	8d 83       	std	Y+5, r24	; 0x05
    6682:	8d 81       	ldd	r24, Y+5	; 0x05
    6684:	9e 81       	ldd	r25, Y+6	; 0x06
    6686:	9a 83       	std	Y+2, r25	; 0x02
    6688:	89 83       	std	Y+1, r24	; 0x01
    668a:	89 81       	ldd	r24, Y+1	; 0x01
    668c:	9a 81       	ldd	r25, Y+2	; 0x02
    668e:	01 97       	sbiw	r24, 0x01	; 1
    6690:	f1 f7       	brne	.-4      	; 0x668e <LED_voidLed3OFF+0x202>
    6692:	9a 83       	std	Y+2, r25	; 0x02
    6694:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    6696:	6c 96       	adiw	r28, 0x1c	; 28
    6698:	0f b6       	in	r0, 0x3f	; 63
    669a:	f8 94       	cli
    669c:	de bf       	out	0x3e, r29	; 62
    669e:	0f be       	out	0x3f, r0	; 63
    66a0:	cd bf       	out	0x3d, r28	; 61
    66a2:	cf 91       	pop	r28
    66a4:	df 91       	pop	r29
    66a6:	08 95       	ret

000066a8 <LED_voidLed4OFF>:
void LED_voidLed4OFF(void)
{
    66a8:	df 93       	push	r29
    66aa:	cf 93       	push	r28
    66ac:	cd b7       	in	r28, 0x3d	; 61
    66ae:	de b7       	in	r29, 0x3e	; 62
    66b0:	6c 97       	sbiw	r28, 0x1c	; 28
    66b2:	0f b6       	in	r0, 0x3f	; 63
    66b4:	f8 94       	cli
    66b6:	de bf       	out	0x3e, r29	; 62
    66b8:	0f be       	out	0x3f, r0	; 63
    66ba:	cd bf       	out	0x3d, r28	; 61
	LED_voidLedOff(PORTA ,PIN2 ,VCC);
    66bc:	80 e0       	ldi	r24, 0x00	; 0
    66be:	90 e0       	ldi	r25, 0x00	; 0
    66c0:	62 e0       	ldi	r22, 0x02	; 2
    66c2:	70 e0       	ldi	r23, 0x00	; 0
    66c4:	41 e0       	ldi	r20, 0x01	; 1
    66c6:	50 e0       	ldi	r21, 0x00	; 0
    66c8:	0e 94 bf 21 	call	0x437e	; 0x437e <LED_voidLedOff>
	LCD_voidWriteCommand(Lcd_Clear);
    66cc:	81 e0       	ldi	r24, 0x01	; 1
    66ce:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <LCD_voidWriteCommand>
	LCD_voidWriteString("LED_4 OFF");
    66d2:	82 ea       	ldi	r24, 0xA2	; 162
    66d4:	90 e0       	ldi	r25, 0x00	; 0
    66d6:	0e 94 35 28 	call	0x506a	; 0x506a <LCD_voidWriteString>
	BUZZER_voidBuzzerON(PORTA ,PIN0);
    66da:	80 e0       	ldi	r24, 0x00	; 0
    66dc:	60 e0       	ldi	r22, 0x00	; 0
    66de:	0e 94 cc 2b 	call	0x5798	; 0x5798 <BUZZER_voidBuzzerON>
    66e2:	80 e0       	ldi	r24, 0x00	; 0
    66e4:	90 e0       	ldi	r25, 0x00	; 0
    66e6:	a8 ec       	ldi	r26, 0xC8	; 200
    66e8:	b2 e4       	ldi	r27, 0x42	; 66
    66ea:	89 8f       	std	Y+25, r24	; 0x19
    66ec:	9a 8f       	std	Y+26, r25	; 0x1a
    66ee:	ab 8f       	std	Y+27, r26	; 0x1b
    66f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    66f2:	69 8d       	ldd	r22, Y+25	; 0x19
    66f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    66f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    66f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    66fa:	20 e0       	ldi	r18, 0x00	; 0
    66fc:	30 e0       	ldi	r19, 0x00	; 0
    66fe:	4a ef       	ldi	r20, 0xFA	; 250
    6700:	54 e4       	ldi	r21, 0x44	; 68
    6702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6706:	dc 01       	movw	r26, r24
    6708:	cb 01       	movw	r24, r22
    670a:	8d 8b       	std	Y+21, r24	; 0x15
    670c:	9e 8b       	std	Y+22, r25	; 0x16
    670e:	af 8b       	std	Y+23, r26	; 0x17
    6710:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6712:	6d 89       	ldd	r22, Y+21	; 0x15
    6714:	7e 89       	ldd	r23, Y+22	; 0x16
    6716:	8f 89       	ldd	r24, Y+23	; 0x17
    6718:	98 8d       	ldd	r25, Y+24	; 0x18
    671a:	20 e0       	ldi	r18, 0x00	; 0
    671c:	30 e0       	ldi	r19, 0x00	; 0
    671e:	40 e8       	ldi	r20, 0x80	; 128
    6720:	5f e3       	ldi	r21, 0x3F	; 63
    6722:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6726:	88 23       	and	r24, r24
    6728:	2c f4       	brge	.+10     	; 0x6734 <LED_voidLed4OFF+0x8c>
		__ticks = 1;
    672a:	81 e0       	ldi	r24, 0x01	; 1
    672c:	90 e0       	ldi	r25, 0x00	; 0
    672e:	9c 8b       	std	Y+20, r25	; 0x14
    6730:	8b 8b       	std	Y+19, r24	; 0x13
    6732:	3f c0       	rjmp	.+126    	; 0x67b2 <LED_voidLed4OFF+0x10a>
	else if (__tmp > 65535)
    6734:	6d 89       	ldd	r22, Y+21	; 0x15
    6736:	7e 89       	ldd	r23, Y+22	; 0x16
    6738:	8f 89       	ldd	r24, Y+23	; 0x17
    673a:	98 8d       	ldd	r25, Y+24	; 0x18
    673c:	20 e0       	ldi	r18, 0x00	; 0
    673e:	3f ef       	ldi	r19, 0xFF	; 255
    6740:	4f e7       	ldi	r20, 0x7F	; 127
    6742:	57 e4       	ldi	r21, 0x47	; 71
    6744:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6748:	18 16       	cp	r1, r24
    674a:	4c f5       	brge	.+82     	; 0x679e <LED_voidLed4OFF+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    674c:	69 8d       	ldd	r22, Y+25	; 0x19
    674e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6750:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6752:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6754:	20 e0       	ldi	r18, 0x00	; 0
    6756:	30 e0       	ldi	r19, 0x00	; 0
    6758:	40 e2       	ldi	r20, 0x20	; 32
    675a:	51 e4       	ldi	r21, 0x41	; 65
    675c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6760:	dc 01       	movw	r26, r24
    6762:	cb 01       	movw	r24, r22
    6764:	bc 01       	movw	r22, r24
    6766:	cd 01       	movw	r24, r26
    6768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    676c:	dc 01       	movw	r26, r24
    676e:	cb 01       	movw	r24, r22
    6770:	9c 8b       	std	Y+20, r25	; 0x14
    6772:	8b 8b       	std	Y+19, r24	; 0x13
    6774:	0f c0       	rjmp	.+30     	; 0x6794 <LED_voidLed4OFF+0xec>
    6776:	88 ec       	ldi	r24, 0xC8	; 200
    6778:	90 e0       	ldi	r25, 0x00	; 0
    677a:	9a 8b       	std	Y+18, r25	; 0x12
    677c:	89 8b       	std	Y+17, r24	; 0x11
    677e:	89 89       	ldd	r24, Y+17	; 0x11
    6780:	9a 89       	ldd	r25, Y+18	; 0x12
    6782:	01 97       	sbiw	r24, 0x01	; 1
    6784:	f1 f7       	brne	.-4      	; 0x6782 <LED_voidLed4OFF+0xda>
    6786:	9a 8b       	std	Y+18, r25	; 0x12
    6788:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    678a:	8b 89       	ldd	r24, Y+19	; 0x13
    678c:	9c 89       	ldd	r25, Y+20	; 0x14
    678e:	01 97       	sbiw	r24, 0x01	; 1
    6790:	9c 8b       	std	Y+20, r25	; 0x14
    6792:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6794:	8b 89       	ldd	r24, Y+19	; 0x13
    6796:	9c 89       	ldd	r25, Y+20	; 0x14
    6798:	00 97       	sbiw	r24, 0x00	; 0
    679a:	69 f7       	brne	.-38     	; 0x6776 <LED_voidLed4OFF+0xce>
    679c:	14 c0       	rjmp	.+40     	; 0x67c6 <LED_voidLed4OFF+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    679e:	6d 89       	ldd	r22, Y+21	; 0x15
    67a0:	7e 89       	ldd	r23, Y+22	; 0x16
    67a2:	8f 89       	ldd	r24, Y+23	; 0x17
    67a4:	98 8d       	ldd	r25, Y+24	; 0x18
    67a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67aa:	dc 01       	movw	r26, r24
    67ac:	cb 01       	movw	r24, r22
    67ae:	9c 8b       	std	Y+20, r25	; 0x14
    67b0:	8b 8b       	std	Y+19, r24	; 0x13
    67b2:	8b 89       	ldd	r24, Y+19	; 0x13
    67b4:	9c 89       	ldd	r25, Y+20	; 0x14
    67b6:	98 8b       	std	Y+16, r25	; 0x10
    67b8:	8f 87       	std	Y+15, r24	; 0x0f
    67ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    67bc:	98 89       	ldd	r25, Y+16	; 0x10
    67be:	01 97       	sbiw	r24, 0x01	; 1
    67c0:	f1 f7       	brne	.-4      	; 0x67be <LED_voidLed4OFF+0x116>
    67c2:	98 8b       	std	Y+16, r25	; 0x10
    67c4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	BUZZER_voidBuzzerOFF(PORTA ,PIN0);
    67c6:	80 e0       	ldi	r24, 0x00	; 0
    67c8:	60 e0       	ldi	r22, 0x00	; 0
    67ca:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <BUZZER_voidBuzzerOFF>
    67ce:	80 e0       	ldi	r24, 0x00	; 0
    67d0:	90 e0       	ldi	r25, 0x00	; 0
    67d2:	aa e7       	ldi	r26, 0x7A	; 122
    67d4:	b4 e4       	ldi	r27, 0x44	; 68
    67d6:	8b 87       	std	Y+11, r24	; 0x0b
    67d8:	9c 87       	std	Y+12, r25	; 0x0c
    67da:	ad 87       	std	Y+13, r26	; 0x0d
    67dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    67de:	6b 85       	ldd	r22, Y+11	; 0x0b
    67e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    67e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    67e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    67e6:	20 e0       	ldi	r18, 0x00	; 0
    67e8:	30 e0       	ldi	r19, 0x00	; 0
    67ea:	4a ef       	ldi	r20, 0xFA	; 250
    67ec:	54 e4       	ldi	r21, 0x44	; 68
    67ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67f2:	dc 01       	movw	r26, r24
    67f4:	cb 01       	movw	r24, r22
    67f6:	8f 83       	std	Y+7, r24	; 0x07
    67f8:	98 87       	std	Y+8, r25	; 0x08
    67fa:	a9 87       	std	Y+9, r26	; 0x09
    67fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    67fe:	6f 81       	ldd	r22, Y+7	; 0x07
    6800:	78 85       	ldd	r23, Y+8	; 0x08
    6802:	89 85       	ldd	r24, Y+9	; 0x09
    6804:	9a 85       	ldd	r25, Y+10	; 0x0a
    6806:	20 e0       	ldi	r18, 0x00	; 0
    6808:	30 e0       	ldi	r19, 0x00	; 0
    680a:	40 e8       	ldi	r20, 0x80	; 128
    680c:	5f e3       	ldi	r21, 0x3F	; 63
    680e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6812:	88 23       	and	r24, r24
    6814:	2c f4       	brge	.+10     	; 0x6820 <LED_voidLed4OFF+0x178>
		__ticks = 1;
    6816:	81 e0       	ldi	r24, 0x01	; 1
    6818:	90 e0       	ldi	r25, 0x00	; 0
    681a:	9e 83       	std	Y+6, r25	; 0x06
    681c:	8d 83       	std	Y+5, r24	; 0x05
    681e:	3f c0       	rjmp	.+126    	; 0x689e <LED_voidLed4OFF+0x1f6>
	else if (__tmp > 65535)
    6820:	6f 81       	ldd	r22, Y+7	; 0x07
    6822:	78 85       	ldd	r23, Y+8	; 0x08
    6824:	89 85       	ldd	r24, Y+9	; 0x09
    6826:	9a 85       	ldd	r25, Y+10	; 0x0a
    6828:	20 e0       	ldi	r18, 0x00	; 0
    682a:	3f ef       	ldi	r19, 0xFF	; 255
    682c:	4f e7       	ldi	r20, 0x7F	; 127
    682e:	57 e4       	ldi	r21, 0x47	; 71
    6830:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6834:	18 16       	cp	r1, r24
    6836:	4c f5       	brge	.+82     	; 0x688a <LED_voidLed4OFF+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6838:	6b 85       	ldd	r22, Y+11	; 0x0b
    683a:	7c 85       	ldd	r23, Y+12	; 0x0c
    683c:	8d 85       	ldd	r24, Y+13	; 0x0d
    683e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6840:	20 e0       	ldi	r18, 0x00	; 0
    6842:	30 e0       	ldi	r19, 0x00	; 0
    6844:	40 e2       	ldi	r20, 0x20	; 32
    6846:	51 e4       	ldi	r21, 0x41	; 65
    6848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    684c:	dc 01       	movw	r26, r24
    684e:	cb 01       	movw	r24, r22
    6850:	bc 01       	movw	r22, r24
    6852:	cd 01       	movw	r24, r26
    6854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6858:	dc 01       	movw	r26, r24
    685a:	cb 01       	movw	r24, r22
    685c:	9e 83       	std	Y+6, r25	; 0x06
    685e:	8d 83       	std	Y+5, r24	; 0x05
    6860:	0f c0       	rjmp	.+30     	; 0x6880 <LED_voidLed4OFF+0x1d8>
    6862:	88 ec       	ldi	r24, 0xC8	; 200
    6864:	90 e0       	ldi	r25, 0x00	; 0
    6866:	9c 83       	std	Y+4, r25	; 0x04
    6868:	8b 83       	std	Y+3, r24	; 0x03
    686a:	8b 81       	ldd	r24, Y+3	; 0x03
    686c:	9c 81       	ldd	r25, Y+4	; 0x04
    686e:	01 97       	sbiw	r24, 0x01	; 1
    6870:	f1 f7       	brne	.-4      	; 0x686e <LED_voidLed4OFF+0x1c6>
    6872:	9c 83       	std	Y+4, r25	; 0x04
    6874:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6876:	8d 81       	ldd	r24, Y+5	; 0x05
    6878:	9e 81       	ldd	r25, Y+6	; 0x06
    687a:	01 97       	sbiw	r24, 0x01	; 1
    687c:	9e 83       	std	Y+6, r25	; 0x06
    687e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6880:	8d 81       	ldd	r24, Y+5	; 0x05
    6882:	9e 81       	ldd	r25, Y+6	; 0x06
    6884:	00 97       	sbiw	r24, 0x00	; 0
    6886:	69 f7       	brne	.-38     	; 0x6862 <LED_voidLed4OFF+0x1ba>
    6888:	14 c0       	rjmp	.+40     	; 0x68b2 <LED_voidLed4OFF+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    688a:	6f 81       	ldd	r22, Y+7	; 0x07
    688c:	78 85       	ldd	r23, Y+8	; 0x08
    688e:	89 85       	ldd	r24, Y+9	; 0x09
    6890:	9a 85       	ldd	r25, Y+10	; 0x0a
    6892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6896:	dc 01       	movw	r26, r24
    6898:	cb 01       	movw	r24, r22
    689a:	9e 83       	std	Y+6, r25	; 0x06
    689c:	8d 83       	std	Y+5, r24	; 0x05
    689e:	8d 81       	ldd	r24, Y+5	; 0x05
    68a0:	9e 81       	ldd	r25, Y+6	; 0x06
    68a2:	9a 83       	std	Y+2, r25	; 0x02
    68a4:	89 83       	std	Y+1, r24	; 0x01
    68a6:	89 81       	ldd	r24, Y+1	; 0x01
    68a8:	9a 81       	ldd	r25, Y+2	; 0x02
    68aa:	01 97       	sbiw	r24, 0x01	; 1
    68ac:	f1 f7       	brne	.-4      	; 0x68aa <LED_voidLed4OFF+0x202>
    68ae:	9a 83       	std	Y+2, r25	; 0x02
    68b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    68b2:	6c 96       	adiw	r28, 0x1c	; 28
    68b4:	0f b6       	in	r0, 0x3f	; 63
    68b6:	f8 94       	cli
    68b8:	de bf       	out	0x3e, r29	; 62
    68ba:	0f be       	out	0x3f, r0	; 63
    68bc:	cd bf       	out	0x3d, r28	; 61
    68be:	cf 91       	pop	r28
    68c0:	df 91       	pop	r29
    68c2:	08 95       	ret

000068c4 <DOOR_voidDoorOpen>:


void DOOR_voidDoorOpen(void)
{
    68c4:	df 93       	push	r29
    68c6:	cf 93       	push	r28
    68c8:	cd b7       	in	r28, 0x3d	; 61
    68ca:	de b7       	in	r29, 0x3e	; 62
    68cc:	6c 97       	sbiw	r28, 0x1c	; 28
    68ce:	0f b6       	in	r0, 0x3f	; 63
    68d0:	f8 94       	cli
    68d2:	de bf       	out	0x3e, r29	; 62
    68d4:	0f be       	out	0x3f, r0	; 63
    68d6:	cd bf       	out	0x3d, r28	; 61
	SERVO_voidRotate(90);
    68d8:	8a e5       	ldi	r24, 0x5A	; 90
    68da:	0e 94 86 20 	call	0x410c	; 0x410c <SERVO_voidRotate>
	LED_voidLedOff(PORTA,PIN1,VCC);
    68de:	80 e0       	ldi	r24, 0x00	; 0
    68e0:	90 e0       	ldi	r25, 0x00	; 0
    68e2:	61 e0       	ldi	r22, 0x01	; 1
    68e4:	70 e0       	ldi	r23, 0x00	; 0
    68e6:	41 e0       	ldi	r20, 0x01	; 1
    68e8:	50 e0       	ldi	r21, 0x00	; 0
    68ea:	0e 94 bf 21 	call	0x437e	; 0x437e <LED_voidLedOff>
			BUZZER_voidBuzzerON(PORTA ,PIN0);
    68ee:	80 e0       	ldi	r24, 0x00	; 0
    68f0:	60 e0       	ldi	r22, 0x00	; 0
    68f2:	0e 94 cc 2b 	call	0x5798	; 0x5798 <BUZZER_voidBuzzerON>
    68f6:	80 e0       	ldi	r24, 0x00	; 0
    68f8:	90 e0       	ldi	r25, 0x00	; 0
    68fa:	a8 ec       	ldi	r26, 0xC8	; 200
    68fc:	b2 e4       	ldi	r27, 0x42	; 66
    68fe:	89 8f       	std	Y+25, r24	; 0x19
    6900:	9a 8f       	std	Y+26, r25	; 0x1a
    6902:	ab 8f       	std	Y+27, r26	; 0x1b
    6904:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6906:	69 8d       	ldd	r22, Y+25	; 0x19
    6908:	7a 8d       	ldd	r23, Y+26	; 0x1a
    690a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    690c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    690e:	20 e0       	ldi	r18, 0x00	; 0
    6910:	30 e0       	ldi	r19, 0x00	; 0
    6912:	4a ef       	ldi	r20, 0xFA	; 250
    6914:	54 e4       	ldi	r21, 0x44	; 68
    6916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    691a:	dc 01       	movw	r26, r24
    691c:	cb 01       	movw	r24, r22
    691e:	8d 8b       	std	Y+21, r24	; 0x15
    6920:	9e 8b       	std	Y+22, r25	; 0x16
    6922:	af 8b       	std	Y+23, r26	; 0x17
    6924:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6926:	6d 89       	ldd	r22, Y+21	; 0x15
    6928:	7e 89       	ldd	r23, Y+22	; 0x16
    692a:	8f 89       	ldd	r24, Y+23	; 0x17
    692c:	98 8d       	ldd	r25, Y+24	; 0x18
    692e:	20 e0       	ldi	r18, 0x00	; 0
    6930:	30 e0       	ldi	r19, 0x00	; 0
    6932:	40 e8       	ldi	r20, 0x80	; 128
    6934:	5f e3       	ldi	r21, 0x3F	; 63
    6936:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    693a:	88 23       	and	r24, r24
    693c:	2c f4       	brge	.+10     	; 0x6948 <DOOR_voidDoorOpen+0x84>
		__ticks = 1;
    693e:	81 e0       	ldi	r24, 0x01	; 1
    6940:	90 e0       	ldi	r25, 0x00	; 0
    6942:	9c 8b       	std	Y+20, r25	; 0x14
    6944:	8b 8b       	std	Y+19, r24	; 0x13
    6946:	3f c0       	rjmp	.+126    	; 0x69c6 <DOOR_voidDoorOpen+0x102>
	else if (__tmp > 65535)
    6948:	6d 89       	ldd	r22, Y+21	; 0x15
    694a:	7e 89       	ldd	r23, Y+22	; 0x16
    694c:	8f 89       	ldd	r24, Y+23	; 0x17
    694e:	98 8d       	ldd	r25, Y+24	; 0x18
    6950:	20 e0       	ldi	r18, 0x00	; 0
    6952:	3f ef       	ldi	r19, 0xFF	; 255
    6954:	4f e7       	ldi	r20, 0x7F	; 127
    6956:	57 e4       	ldi	r21, 0x47	; 71
    6958:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    695c:	18 16       	cp	r1, r24
    695e:	4c f5       	brge	.+82     	; 0x69b2 <DOOR_voidDoorOpen+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6960:	69 8d       	ldd	r22, Y+25	; 0x19
    6962:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6964:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6966:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6968:	20 e0       	ldi	r18, 0x00	; 0
    696a:	30 e0       	ldi	r19, 0x00	; 0
    696c:	40 e2       	ldi	r20, 0x20	; 32
    696e:	51 e4       	ldi	r21, 0x41	; 65
    6970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6974:	dc 01       	movw	r26, r24
    6976:	cb 01       	movw	r24, r22
    6978:	bc 01       	movw	r22, r24
    697a:	cd 01       	movw	r24, r26
    697c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6980:	dc 01       	movw	r26, r24
    6982:	cb 01       	movw	r24, r22
    6984:	9c 8b       	std	Y+20, r25	; 0x14
    6986:	8b 8b       	std	Y+19, r24	; 0x13
    6988:	0f c0       	rjmp	.+30     	; 0x69a8 <DOOR_voidDoorOpen+0xe4>
    698a:	88 ec       	ldi	r24, 0xC8	; 200
    698c:	90 e0       	ldi	r25, 0x00	; 0
    698e:	9a 8b       	std	Y+18, r25	; 0x12
    6990:	89 8b       	std	Y+17, r24	; 0x11
    6992:	89 89       	ldd	r24, Y+17	; 0x11
    6994:	9a 89       	ldd	r25, Y+18	; 0x12
    6996:	01 97       	sbiw	r24, 0x01	; 1
    6998:	f1 f7       	brne	.-4      	; 0x6996 <DOOR_voidDoorOpen+0xd2>
    699a:	9a 8b       	std	Y+18, r25	; 0x12
    699c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    699e:	8b 89       	ldd	r24, Y+19	; 0x13
    69a0:	9c 89       	ldd	r25, Y+20	; 0x14
    69a2:	01 97       	sbiw	r24, 0x01	; 1
    69a4:	9c 8b       	std	Y+20, r25	; 0x14
    69a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    69a8:	8b 89       	ldd	r24, Y+19	; 0x13
    69aa:	9c 89       	ldd	r25, Y+20	; 0x14
    69ac:	00 97       	sbiw	r24, 0x00	; 0
    69ae:	69 f7       	brne	.-38     	; 0x698a <DOOR_voidDoorOpen+0xc6>
    69b0:	14 c0       	rjmp	.+40     	; 0x69da <DOOR_voidDoorOpen+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    69b2:	6d 89       	ldd	r22, Y+21	; 0x15
    69b4:	7e 89       	ldd	r23, Y+22	; 0x16
    69b6:	8f 89       	ldd	r24, Y+23	; 0x17
    69b8:	98 8d       	ldd	r25, Y+24	; 0x18
    69ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69be:	dc 01       	movw	r26, r24
    69c0:	cb 01       	movw	r24, r22
    69c2:	9c 8b       	std	Y+20, r25	; 0x14
    69c4:	8b 8b       	std	Y+19, r24	; 0x13
    69c6:	8b 89       	ldd	r24, Y+19	; 0x13
    69c8:	9c 89       	ldd	r25, Y+20	; 0x14
    69ca:	98 8b       	std	Y+16, r25	; 0x10
    69cc:	8f 87       	std	Y+15, r24	; 0x0f
    69ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    69d0:	98 89       	ldd	r25, Y+16	; 0x10
    69d2:	01 97       	sbiw	r24, 0x01	; 1
    69d4:	f1 f7       	brne	.-4      	; 0x69d2 <DOOR_voidDoorOpen+0x10e>
    69d6:	98 8b       	std	Y+16, r25	; 0x10
    69d8:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			BUZZER_voidBuzzerOFF(PORTA ,PIN0);
    69da:	80 e0       	ldi	r24, 0x00	; 0
    69dc:	60 e0       	ldi	r22, 0x00	; 0
    69de:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <BUZZER_voidBuzzerOFF>
    69e2:	80 e0       	ldi	r24, 0x00	; 0
    69e4:	90 e0       	ldi	r25, 0x00	; 0
    69e6:	aa e7       	ldi	r26, 0x7A	; 122
    69e8:	b4 e4       	ldi	r27, 0x44	; 68
    69ea:	8b 87       	std	Y+11, r24	; 0x0b
    69ec:	9c 87       	std	Y+12, r25	; 0x0c
    69ee:	ad 87       	std	Y+13, r26	; 0x0d
    69f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    69f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    69f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    69f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    69f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    69fa:	20 e0       	ldi	r18, 0x00	; 0
    69fc:	30 e0       	ldi	r19, 0x00	; 0
    69fe:	4a ef       	ldi	r20, 0xFA	; 250
    6a00:	54 e4       	ldi	r21, 0x44	; 68
    6a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a06:	dc 01       	movw	r26, r24
    6a08:	cb 01       	movw	r24, r22
    6a0a:	8f 83       	std	Y+7, r24	; 0x07
    6a0c:	98 87       	std	Y+8, r25	; 0x08
    6a0e:	a9 87       	std	Y+9, r26	; 0x09
    6a10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6a12:	6f 81       	ldd	r22, Y+7	; 0x07
    6a14:	78 85       	ldd	r23, Y+8	; 0x08
    6a16:	89 85       	ldd	r24, Y+9	; 0x09
    6a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a1a:	20 e0       	ldi	r18, 0x00	; 0
    6a1c:	30 e0       	ldi	r19, 0x00	; 0
    6a1e:	40 e8       	ldi	r20, 0x80	; 128
    6a20:	5f e3       	ldi	r21, 0x3F	; 63
    6a22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6a26:	88 23       	and	r24, r24
    6a28:	2c f4       	brge	.+10     	; 0x6a34 <DOOR_voidDoorOpen+0x170>
		__ticks = 1;
    6a2a:	81 e0       	ldi	r24, 0x01	; 1
    6a2c:	90 e0       	ldi	r25, 0x00	; 0
    6a2e:	9e 83       	std	Y+6, r25	; 0x06
    6a30:	8d 83       	std	Y+5, r24	; 0x05
    6a32:	3f c0       	rjmp	.+126    	; 0x6ab2 <DOOR_voidDoorOpen+0x1ee>
	else if (__tmp > 65535)
    6a34:	6f 81       	ldd	r22, Y+7	; 0x07
    6a36:	78 85       	ldd	r23, Y+8	; 0x08
    6a38:	89 85       	ldd	r24, Y+9	; 0x09
    6a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a3c:	20 e0       	ldi	r18, 0x00	; 0
    6a3e:	3f ef       	ldi	r19, 0xFF	; 255
    6a40:	4f e7       	ldi	r20, 0x7F	; 127
    6a42:	57 e4       	ldi	r21, 0x47	; 71
    6a44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6a48:	18 16       	cp	r1, r24
    6a4a:	4c f5       	brge	.+82     	; 0x6a9e <DOOR_voidDoorOpen+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a50:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a52:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a54:	20 e0       	ldi	r18, 0x00	; 0
    6a56:	30 e0       	ldi	r19, 0x00	; 0
    6a58:	40 e2       	ldi	r20, 0x20	; 32
    6a5a:	51 e4       	ldi	r21, 0x41	; 65
    6a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a60:	dc 01       	movw	r26, r24
    6a62:	cb 01       	movw	r24, r22
    6a64:	bc 01       	movw	r22, r24
    6a66:	cd 01       	movw	r24, r26
    6a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a6c:	dc 01       	movw	r26, r24
    6a6e:	cb 01       	movw	r24, r22
    6a70:	9e 83       	std	Y+6, r25	; 0x06
    6a72:	8d 83       	std	Y+5, r24	; 0x05
    6a74:	0f c0       	rjmp	.+30     	; 0x6a94 <DOOR_voidDoorOpen+0x1d0>
    6a76:	88 ec       	ldi	r24, 0xC8	; 200
    6a78:	90 e0       	ldi	r25, 0x00	; 0
    6a7a:	9c 83       	std	Y+4, r25	; 0x04
    6a7c:	8b 83       	std	Y+3, r24	; 0x03
    6a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    6a80:	9c 81       	ldd	r25, Y+4	; 0x04
    6a82:	01 97       	sbiw	r24, 0x01	; 1
    6a84:	f1 f7       	brne	.-4      	; 0x6a82 <DOOR_voidDoorOpen+0x1be>
    6a86:	9c 83       	std	Y+4, r25	; 0x04
    6a88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    6a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    6a8e:	01 97       	sbiw	r24, 0x01	; 1
    6a90:	9e 83       	std	Y+6, r25	; 0x06
    6a92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a94:	8d 81       	ldd	r24, Y+5	; 0x05
    6a96:	9e 81       	ldd	r25, Y+6	; 0x06
    6a98:	00 97       	sbiw	r24, 0x00	; 0
    6a9a:	69 f7       	brne	.-38     	; 0x6a76 <DOOR_voidDoorOpen+0x1b2>
    6a9c:	14 c0       	rjmp	.+40     	; 0x6ac6 <DOOR_voidDoorOpen+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    6aa0:	78 85       	ldd	r23, Y+8	; 0x08
    6aa2:	89 85       	ldd	r24, Y+9	; 0x09
    6aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    6aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6aaa:	dc 01       	movw	r26, r24
    6aac:	cb 01       	movw	r24, r22
    6aae:	9e 83       	std	Y+6, r25	; 0x06
    6ab0:	8d 83       	std	Y+5, r24	; 0x05
    6ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    6ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    6ab6:	9a 83       	std	Y+2, r25	; 0x02
    6ab8:	89 83       	std	Y+1, r24	; 0x01
    6aba:	89 81       	ldd	r24, Y+1	; 0x01
    6abc:	9a 81       	ldd	r25, Y+2	; 0x02
    6abe:	01 97       	sbiw	r24, 0x01	; 1
    6ac0:	f1 f7       	brne	.-4      	; 0x6abe <DOOR_voidDoorOpen+0x1fa>
    6ac2:	9a 83       	std	Y+2, r25	; 0x02
    6ac4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);


}
    6ac6:	6c 96       	adiw	r28, 0x1c	; 28
    6ac8:	0f b6       	in	r0, 0x3f	; 63
    6aca:	f8 94       	cli
    6acc:	de bf       	out	0x3e, r29	; 62
    6ace:	0f be       	out	0x3f, r0	; 63
    6ad0:	cd bf       	out	0x3d, r28	; 61
    6ad2:	cf 91       	pop	r28
    6ad4:	df 91       	pop	r29
    6ad6:	08 95       	ret

00006ad8 <DOOR_voidDoorClose>:
void DOOR_voidDoorClose(void)
{
    6ad8:	df 93       	push	r29
    6ada:	cf 93       	push	r28
    6adc:	cd b7       	in	r28, 0x3d	; 61
    6ade:	de b7       	in	r29, 0x3e	; 62
    6ae0:	6c 97       	sbiw	r28, 0x1c	; 28
    6ae2:	0f b6       	in	r0, 0x3f	; 63
    6ae4:	f8 94       	cli
    6ae6:	de bf       	out	0x3e, r29	; 62
    6ae8:	0f be       	out	0x3f, r0	; 63
    6aea:	cd bf       	out	0x3d, r28	; 61
	SERVO_voidRotate(0);
    6aec:	80 e0       	ldi	r24, 0x00	; 0
    6aee:	0e 94 86 20 	call	0x410c	; 0x410c <SERVO_voidRotate>
	LED_voidLedOn(PORTA,PIN1,VCC);
    6af2:	80 e0       	ldi	r24, 0x00	; 0
    6af4:	61 e0       	ldi	r22, 0x01	; 1
    6af6:	41 e0       	ldi	r20, 0x01	; 1
    6af8:	0e 94 36 21 	call	0x426c	; 0x426c <LED_voidLedOn>
			BUZZER_voidBuzzerON(PORTA ,PIN0);
    6afc:	80 e0       	ldi	r24, 0x00	; 0
    6afe:	60 e0       	ldi	r22, 0x00	; 0
    6b00:	0e 94 cc 2b 	call	0x5798	; 0x5798 <BUZZER_voidBuzzerON>
    6b04:	80 e0       	ldi	r24, 0x00	; 0
    6b06:	90 e0       	ldi	r25, 0x00	; 0
    6b08:	a8 ec       	ldi	r26, 0xC8	; 200
    6b0a:	b2 e4       	ldi	r27, 0x42	; 66
    6b0c:	89 8f       	std	Y+25, r24	; 0x19
    6b0e:	9a 8f       	std	Y+26, r25	; 0x1a
    6b10:	ab 8f       	std	Y+27, r26	; 0x1b
    6b12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6b14:	69 8d       	ldd	r22, Y+25	; 0x19
    6b16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6b1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6b1c:	20 e0       	ldi	r18, 0x00	; 0
    6b1e:	30 e0       	ldi	r19, 0x00	; 0
    6b20:	4a ef       	ldi	r20, 0xFA	; 250
    6b22:	54 e4       	ldi	r21, 0x44	; 68
    6b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b28:	dc 01       	movw	r26, r24
    6b2a:	cb 01       	movw	r24, r22
    6b2c:	8d 8b       	std	Y+21, r24	; 0x15
    6b2e:	9e 8b       	std	Y+22, r25	; 0x16
    6b30:	af 8b       	std	Y+23, r26	; 0x17
    6b32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6b34:	6d 89       	ldd	r22, Y+21	; 0x15
    6b36:	7e 89       	ldd	r23, Y+22	; 0x16
    6b38:	8f 89       	ldd	r24, Y+23	; 0x17
    6b3a:	98 8d       	ldd	r25, Y+24	; 0x18
    6b3c:	20 e0       	ldi	r18, 0x00	; 0
    6b3e:	30 e0       	ldi	r19, 0x00	; 0
    6b40:	40 e8       	ldi	r20, 0x80	; 128
    6b42:	5f e3       	ldi	r21, 0x3F	; 63
    6b44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6b48:	88 23       	and	r24, r24
    6b4a:	2c f4       	brge	.+10     	; 0x6b56 <DOOR_voidDoorClose+0x7e>
		__ticks = 1;
    6b4c:	81 e0       	ldi	r24, 0x01	; 1
    6b4e:	90 e0       	ldi	r25, 0x00	; 0
    6b50:	9c 8b       	std	Y+20, r25	; 0x14
    6b52:	8b 8b       	std	Y+19, r24	; 0x13
    6b54:	3f c0       	rjmp	.+126    	; 0x6bd4 <DOOR_voidDoorClose+0xfc>
	else if (__tmp > 65535)
    6b56:	6d 89       	ldd	r22, Y+21	; 0x15
    6b58:	7e 89       	ldd	r23, Y+22	; 0x16
    6b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    6b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    6b5e:	20 e0       	ldi	r18, 0x00	; 0
    6b60:	3f ef       	ldi	r19, 0xFF	; 255
    6b62:	4f e7       	ldi	r20, 0x7F	; 127
    6b64:	57 e4       	ldi	r21, 0x47	; 71
    6b66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6b6a:	18 16       	cp	r1, r24
    6b6c:	4c f5       	brge	.+82     	; 0x6bc0 <DOOR_voidDoorClose+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b6e:	69 8d       	ldd	r22, Y+25	; 0x19
    6b70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6b72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6b74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6b76:	20 e0       	ldi	r18, 0x00	; 0
    6b78:	30 e0       	ldi	r19, 0x00	; 0
    6b7a:	40 e2       	ldi	r20, 0x20	; 32
    6b7c:	51 e4       	ldi	r21, 0x41	; 65
    6b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b82:	dc 01       	movw	r26, r24
    6b84:	cb 01       	movw	r24, r22
    6b86:	bc 01       	movw	r22, r24
    6b88:	cd 01       	movw	r24, r26
    6b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b8e:	dc 01       	movw	r26, r24
    6b90:	cb 01       	movw	r24, r22
    6b92:	9c 8b       	std	Y+20, r25	; 0x14
    6b94:	8b 8b       	std	Y+19, r24	; 0x13
    6b96:	0f c0       	rjmp	.+30     	; 0x6bb6 <DOOR_voidDoorClose+0xde>
    6b98:	88 ec       	ldi	r24, 0xC8	; 200
    6b9a:	90 e0       	ldi	r25, 0x00	; 0
    6b9c:	9a 8b       	std	Y+18, r25	; 0x12
    6b9e:	89 8b       	std	Y+17, r24	; 0x11
    6ba0:	89 89       	ldd	r24, Y+17	; 0x11
    6ba2:	9a 89       	ldd	r25, Y+18	; 0x12
    6ba4:	01 97       	sbiw	r24, 0x01	; 1
    6ba6:	f1 f7       	brne	.-4      	; 0x6ba4 <DOOR_voidDoorClose+0xcc>
    6ba8:	9a 8b       	std	Y+18, r25	; 0x12
    6baa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6bac:	8b 89       	ldd	r24, Y+19	; 0x13
    6bae:	9c 89       	ldd	r25, Y+20	; 0x14
    6bb0:	01 97       	sbiw	r24, 0x01	; 1
    6bb2:	9c 8b       	std	Y+20, r25	; 0x14
    6bb4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6bb6:	8b 89       	ldd	r24, Y+19	; 0x13
    6bb8:	9c 89       	ldd	r25, Y+20	; 0x14
    6bba:	00 97       	sbiw	r24, 0x00	; 0
    6bbc:	69 f7       	brne	.-38     	; 0x6b98 <DOOR_voidDoorClose+0xc0>
    6bbe:	14 c0       	rjmp	.+40     	; 0x6be8 <DOOR_voidDoorClose+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6bc0:	6d 89       	ldd	r22, Y+21	; 0x15
    6bc2:	7e 89       	ldd	r23, Y+22	; 0x16
    6bc4:	8f 89       	ldd	r24, Y+23	; 0x17
    6bc6:	98 8d       	ldd	r25, Y+24	; 0x18
    6bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6bcc:	dc 01       	movw	r26, r24
    6bce:	cb 01       	movw	r24, r22
    6bd0:	9c 8b       	std	Y+20, r25	; 0x14
    6bd2:	8b 8b       	std	Y+19, r24	; 0x13
    6bd4:	8b 89       	ldd	r24, Y+19	; 0x13
    6bd6:	9c 89       	ldd	r25, Y+20	; 0x14
    6bd8:	98 8b       	std	Y+16, r25	; 0x10
    6bda:	8f 87       	std	Y+15, r24	; 0x0f
    6bdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    6bde:	98 89       	ldd	r25, Y+16	; 0x10
    6be0:	01 97       	sbiw	r24, 0x01	; 1
    6be2:	f1 f7       	brne	.-4      	; 0x6be0 <DOOR_voidDoorClose+0x108>
    6be4:	98 8b       	std	Y+16, r25	; 0x10
    6be6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			BUZZER_voidBuzzerOFF(PORTA ,PIN0);
    6be8:	80 e0       	ldi	r24, 0x00	; 0
    6bea:	60 e0       	ldi	r22, 0x00	; 0
    6bec:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <BUZZER_voidBuzzerOFF>
    6bf0:	80 e0       	ldi	r24, 0x00	; 0
    6bf2:	90 e0       	ldi	r25, 0x00	; 0
    6bf4:	aa e7       	ldi	r26, 0x7A	; 122
    6bf6:	b4 e4       	ldi	r27, 0x44	; 68
    6bf8:	8b 87       	std	Y+11, r24	; 0x0b
    6bfa:	9c 87       	std	Y+12, r25	; 0x0c
    6bfc:	ad 87       	std	Y+13, r26	; 0x0d
    6bfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6c00:	6b 85       	ldd	r22, Y+11	; 0x0b
    6c02:	7c 85       	ldd	r23, Y+12	; 0x0c
    6c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c06:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c08:	20 e0       	ldi	r18, 0x00	; 0
    6c0a:	30 e0       	ldi	r19, 0x00	; 0
    6c0c:	4a ef       	ldi	r20, 0xFA	; 250
    6c0e:	54 e4       	ldi	r21, 0x44	; 68
    6c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c14:	dc 01       	movw	r26, r24
    6c16:	cb 01       	movw	r24, r22
    6c18:	8f 83       	std	Y+7, r24	; 0x07
    6c1a:	98 87       	std	Y+8, r25	; 0x08
    6c1c:	a9 87       	std	Y+9, r26	; 0x09
    6c1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6c20:	6f 81       	ldd	r22, Y+7	; 0x07
    6c22:	78 85       	ldd	r23, Y+8	; 0x08
    6c24:	89 85       	ldd	r24, Y+9	; 0x09
    6c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c28:	20 e0       	ldi	r18, 0x00	; 0
    6c2a:	30 e0       	ldi	r19, 0x00	; 0
    6c2c:	40 e8       	ldi	r20, 0x80	; 128
    6c2e:	5f e3       	ldi	r21, 0x3F	; 63
    6c30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6c34:	88 23       	and	r24, r24
    6c36:	2c f4       	brge	.+10     	; 0x6c42 <DOOR_voidDoorClose+0x16a>
		__ticks = 1;
    6c38:	81 e0       	ldi	r24, 0x01	; 1
    6c3a:	90 e0       	ldi	r25, 0x00	; 0
    6c3c:	9e 83       	std	Y+6, r25	; 0x06
    6c3e:	8d 83       	std	Y+5, r24	; 0x05
    6c40:	3f c0       	rjmp	.+126    	; 0x6cc0 <DOOR_voidDoorClose+0x1e8>
	else if (__tmp > 65535)
    6c42:	6f 81       	ldd	r22, Y+7	; 0x07
    6c44:	78 85       	ldd	r23, Y+8	; 0x08
    6c46:	89 85       	ldd	r24, Y+9	; 0x09
    6c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c4a:	20 e0       	ldi	r18, 0x00	; 0
    6c4c:	3f ef       	ldi	r19, 0xFF	; 255
    6c4e:	4f e7       	ldi	r20, 0x7F	; 127
    6c50:	57 e4       	ldi	r21, 0x47	; 71
    6c52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6c56:	18 16       	cp	r1, r24
    6c58:	4c f5       	brge	.+82     	; 0x6cac <DOOR_voidDoorClose+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6c5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c60:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c62:	20 e0       	ldi	r18, 0x00	; 0
    6c64:	30 e0       	ldi	r19, 0x00	; 0
    6c66:	40 e2       	ldi	r20, 0x20	; 32
    6c68:	51 e4       	ldi	r21, 0x41	; 65
    6c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c6e:	dc 01       	movw	r26, r24
    6c70:	cb 01       	movw	r24, r22
    6c72:	bc 01       	movw	r22, r24
    6c74:	cd 01       	movw	r24, r26
    6c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c7a:	dc 01       	movw	r26, r24
    6c7c:	cb 01       	movw	r24, r22
    6c7e:	9e 83       	std	Y+6, r25	; 0x06
    6c80:	8d 83       	std	Y+5, r24	; 0x05
    6c82:	0f c0       	rjmp	.+30     	; 0x6ca2 <DOOR_voidDoorClose+0x1ca>
    6c84:	88 ec       	ldi	r24, 0xC8	; 200
    6c86:	90 e0       	ldi	r25, 0x00	; 0
    6c88:	9c 83       	std	Y+4, r25	; 0x04
    6c8a:	8b 83       	std	Y+3, r24	; 0x03
    6c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    6c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    6c90:	01 97       	sbiw	r24, 0x01	; 1
    6c92:	f1 f7       	brne	.-4      	; 0x6c90 <DOOR_voidDoorClose+0x1b8>
    6c94:	9c 83       	std	Y+4, r25	; 0x04
    6c96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c98:	8d 81       	ldd	r24, Y+5	; 0x05
    6c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    6c9c:	01 97       	sbiw	r24, 0x01	; 1
    6c9e:	9e 83       	std	Y+6, r25	; 0x06
    6ca0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    6ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    6ca6:	00 97       	sbiw	r24, 0x00	; 0
    6ca8:	69 f7       	brne	.-38     	; 0x6c84 <DOOR_voidDoorClose+0x1ac>
    6caa:	14 c0       	rjmp	.+40     	; 0x6cd4 <DOOR_voidDoorClose+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6cac:	6f 81       	ldd	r22, Y+7	; 0x07
    6cae:	78 85       	ldd	r23, Y+8	; 0x08
    6cb0:	89 85       	ldd	r24, Y+9	; 0x09
    6cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    6cb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6cb8:	dc 01       	movw	r26, r24
    6cba:	cb 01       	movw	r24, r22
    6cbc:	9e 83       	std	Y+6, r25	; 0x06
    6cbe:	8d 83       	std	Y+5, r24	; 0x05
    6cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    6cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    6cc4:	9a 83       	std	Y+2, r25	; 0x02
    6cc6:	89 83       	std	Y+1, r24	; 0x01
    6cc8:	89 81       	ldd	r24, Y+1	; 0x01
    6cca:	9a 81       	ldd	r25, Y+2	; 0x02
    6ccc:	01 97       	sbiw	r24, 0x01	; 1
    6cce:	f1 f7       	brne	.-4      	; 0x6ccc <DOOR_voidDoorClose+0x1f4>
    6cd0:	9a 83       	std	Y+2, r25	; 0x02
    6cd2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    6cd4:	6c 96       	adiw	r28, 0x1c	; 28
    6cd6:	0f b6       	in	r0, 0x3f	; 63
    6cd8:	f8 94       	cli
    6cda:	de bf       	out	0x3e, r29	; 62
    6cdc:	0f be       	out	0x3f, r0	; 63
    6cde:	cd bf       	out	0x3d, r28	; 61
    6ce0:	cf 91       	pop	r28
    6ce2:	df 91       	pop	r29
    6ce4:	08 95       	ret

00006ce6 <FAN_voidFanOpen>:

void FAN_voidFanOpen(void)
{
    6ce6:	df 93       	push	r29
    6ce8:	cf 93       	push	r28
    6cea:	cd b7       	in	r28, 0x3d	; 61
    6cec:	de b7       	in	r29, 0x3e	; 62
    6cee:	6c 97       	sbiw	r28, 0x1c	; 28
    6cf0:	0f b6       	in	r0, 0x3f	; 63
    6cf2:	f8 94       	cli
    6cf4:	de bf       	out	0x3e, r29	; 62
    6cf6:	0f be       	out	0x3f, r0	; 63
    6cf8:	cd bf       	out	0x3d, r28	; 61
	DCMotor_voidMotorON(PORTA ,PIN1);
    6cfa:	80 e0       	ldi	r24, 0x00	; 0
    6cfc:	61 e0       	ldi	r22, 0x01	; 1
    6cfe:	0e 94 66 2b 	call	0x56cc	; 0x56cc <DCMotor_voidMotorON>
	LCD_voidWriteCommand(Lcd_Clear);
    6d02:	81 e0       	ldi	r24, 0x01	; 1
    6d04:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <LCD_voidWriteCommand>
	LCD_voidWriteString("FAN ON ..");
    6d08:	8c ea       	ldi	r24, 0xAC	; 172
    6d0a:	90 e0       	ldi	r25, 0x00	; 0
    6d0c:	0e 94 35 28 	call	0x506a	; 0x506a <LCD_voidWriteString>
	BUZZER_voidBuzzerON(PORTA ,PIN0);
    6d10:	80 e0       	ldi	r24, 0x00	; 0
    6d12:	60 e0       	ldi	r22, 0x00	; 0
    6d14:	0e 94 cc 2b 	call	0x5798	; 0x5798 <BUZZER_voidBuzzerON>
    6d18:	80 e0       	ldi	r24, 0x00	; 0
    6d1a:	90 e0       	ldi	r25, 0x00	; 0
    6d1c:	a8 ec       	ldi	r26, 0xC8	; 200
    6d1e:	b2 e4       	ldi	r27, 0x42	; 66
    6d20:	89 8f       	std	Y+25, r24	; 0x19
    6d22:	9a 8f       	std	Y+26, r25	; 0x1a
    6d24:	ab 8f       	std	Y+27, r26	; 0x1b
    6d26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6d28:	69 8d       	ldd	r22, Y+25	; 0x19
    6d2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6d2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6d2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6d30:	20 e0       	ldi	r18, 0x00	; 0
    6d32:	30 e0       	ldi	r19, 0x00	; 0
    6d34:	4a ef       	ldi	r20, 0xFA	; 250
    6d36:	54 e4       	ldi	r21, 0x44	; 68
    6d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d3c:	dc 01       	movw	r26, r24
    6d3e:	cb 01       	movw	r24, r22
    6d40:	8d 8b       	std	Y+21, r24	; 0x15
    6d42:	9e 8b       	std	Y+22, r25	; 0x16
    6d44:	af 8b       	std	Y+23, r26	; 0x17
    6d46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6d48:	6d 89       	ldd	r22, Y+21	; 0x15
    6d4a:	7e 89       	ldd	r23, Y+22	; 0x16
    6d4c:	8f 89       	ldd	r24, Y+23	; 0x17
    6d4e:	98 8d       	ldd	r25, Y+24	; 0x18
    6d50:	20 e0       	ldi	r18, 0x00	; 0
    6d52:	30 e0       	ldi	r19, 0x00	; 0
    6d54:	40 e8       	ldi	r20, 0x80	; 128
    6d56:	5f e3       	ldi	r21, 0x3F	; 63
    6d58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6d5c:	88 23       	and	r24, r24
    6d5e:	2c f4       	brge	.+10     	; 0x6d6a <FAN_voidFanOpen+0x84>
		__ticks = 1;
    6d60:	81 e0       	ldi	r24, 0x01	; 1
    6d62:	90 e0       	ldi	r25, 0x00	; 0
    6d64:	9c 8b       	std	Y+20, r25	; 0x14
    6d66:	8b 8b       	std	Y+19, r24	; 0x13
    6d68:	3f c0       	rjmp	.+126    	; 0x6de8 <FAN_voidFanOpen+0x102>
	else if (__tmp > 65535)
    6d6a:	6d 89       	ldd	r22, Y+21	; 0x15
    6d6c:	7e 89       	ldd	r23, Y+22	; 0x16
    6d6e:	8f 89       	ldd	r24, Y+23	; 0x17
    6d70:	98 8d       	ldd	r25, Y+24	; 0x18
    6d72:	20 e0       	ldi	r18, 0x00	; 0
    6d74:	3f ef       	ldi	r19, 0xFF	; 255
    6d76:	4f e7       	ldi	r20, 0x7F	; 127
    6d78:	57 e4       	ldi	r21, 0x47	; 71
    6d7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6d7e:	18 16       	cp	r1, r24
    6d80:	4c f5       	brge	.+82     	; 0x6dd4 <FAN_voidFanOpen+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d82:	69 8d       	ldd	r22, Y+25	; 0x19
    6d84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6d86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6d88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6d8a:	20 e0       	ldi	r18, 0x00	; 0
    6d8c:	30 e0       	ldi	r19, 0x00	; 0
    6d8e:	40 e2       	ldi	r20, 0x20	; 32
    6d90:	51 e4       	ldi	r21, 0x41	; 65
    6d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d96:	dc 01       	movw	r26, r24
    6d98:	cb 01       	movw	r24, r22
    6d9a:	bc 01       	movw	r22, r24
    6d9c:	cd 01       	movw	r24, r26
    6d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6da2:	dc 01       	movw	r26, r24
    6da4:	cb 01       	movw	r24, r22
    6da6:	9c 8b       	std	Y+20, r25	; 0x14
    6da8:	8b 8b       	std	Y+19, r24	; 0x13
    6daa:	0f c0       	rjmp	.+30     	; 0x6dca <FAN_voidFanOpen+0xe4>
    6dac:	88 ec       	ldi	r24, 0xC8	; 200
    6dae:	90 e0       	ldi	r25, 0x00	; 0
    6db0:	9a 8b       	std	Y+18, r25	; 0x12
    6db2:	89 8b       	std	Y+17, r24	; 0x11
    6db4:	89 89       	ldd	r24, Y+17	; 0x11
    6db6:	9a 89       	ldd	r25, Y+18	; 0x12
    6db8:	01 97       	sbiw	r24, 0x01	; 1
    6dba:	f1 f7       	brne	.-4      	; 0x6db8 <FAN_voidFanOpen+0xd2>
    6dbc:	9a 8b       	std	Y+18, r25	; 0x12
    6dbe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6dc0:	8b 89       	ldd	r24, Y+19	; 0x13
    6dc2:	9c 89       	ldd	r25, Y+20	; 0x14
    6dc4:	01 97       	sbiw	r24, 0x01	; 1
    6dc6:	9c 8b       	std	Y+20, r25	; 0x14
    6dc8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6dca:	8b 89       	ldd	r24, Y+19	; 0x13
    6dcc:	9c 89       	ldd	r25, Y+20	; 0x14
    6dce:	00 97       	sbiw	r24, 0x00	; 0
    6dd0:	69 f7       	brne	.-38     	; 0x6dac <FAN_voidFanOpen+0xc6>
    6dd2:	14 c0       	rjmp	.+40     	; 0x6dfc <FAN_voidFanOpen+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6dd4:	6d 89       	ldd	r22, Y+21	; 0x15
    6dd6:	7e 89       	ldd	r23, Y+22	; 0x16
    6dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    6dda:	98 8d       	ldd	r25, Y+24	; 0x18
    6ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6de0:	dc 01       	movw	r26, r24
    6de2:	cb 01       	movw	r24, r22
    6de4:	9c 8b       	std	Y+20, r25	; 0x14
    6de6:	8b 8b       	std	Y+19, r24	; 0x13
    6de8:	8b 89       	ldd	r24, Y+19	; 0x13
    6dea:	9c 89       	ldd	r25, Y+20	; 0x14
    6dec:	98 8b       	std	Y+16, r25	; 0x10
    6dee:	8f 87       	std	Y+15, r24	; 0x0f
    6df0:	8f 85       	ldd	r24, Y+15	; 0x0f
    6df2:	98 89       	ldd	r25, Y+16	; 0x10
    6df4:	01 97       	sbiw	r24, 0x01	; 1
    6df6:	f1 f7       	brne	.-4      	; 0x6df4 <FAN_voidFanOpen+0x10e>
    6df8:	98 8b       	std	Y+16, r25	; 0x10
    6dfa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	BUZZER_voidBuzzerOFF(PORTA ,PIN0);
    6dfc:	80 e0       	ldi	r24, 0x00	; 0
    6dfe:	60 e0       	ldi	r22, 0x00	; 0
    6e00:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <BUZZER_voidBuzzerOFF>
    6e04:	80 e0       	ldi	r24, 0x00	; 0
    6e06:	90 e0       	ldi	r25, 0x00	; 0
    6e08:	aa e7       	ldi	r26, 0x7A	; 122
    6e0a:	b4 e4       	ldi	r27, 0x44	; 68
    6e0c:	8b 87       	std	Y+11, r24	; 0x0b
    6e0e:	9c 87       	std	Y+12, r25	; 0x0c
    6e10:	ad 87       	std	Y+13, r26	; 0x0d
    6e12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e14:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e16:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e18:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e1c:	20 e0       	ldi	r18, 0x00	; 0
    6e1e:	30 e0       	ldi	r19, 0x00	; 0
    6e20:	4a ef       	ldi	r20, 0xFA	; 250
    6e22:	54 e4       	ldi	r21, 0x44	; 68
    6e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6e28:	dc 01       	movw	r26, r24
    6e2a:	cb 01       	movw	r24, r22
    6e2c:	8f 83       	std	Y+7, r24	; 0x07
    6e2e:	98 87       	std	Y+8, r25	; 0x08
    6e30:	a9 87       	std	Y+9, r26	; 0x09
    6e32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6e34:	6f 81       	ldd	r22, Y+7	; 0x07
    6e36:	78 85       	ldd	r23, Y+8	; 0x08
    6e38:	89 85       	ldd	r24, Y+9	; 0x09
    6e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e3c:	20 e0       	ldi	r18, 0x00	; 0
    6e3e:	30 e0       	ldi	r19, 0x00	; 0
    6e40:	40 e8       	ldi	r20, 0x80	; 128
    6e42:	5f e3       	ldi	r21, 0x3F	; 63
    6e44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6e48:	88 23       	and	r24, r24
    6e4a:	2c f4       	brge	.+10     	; 0x6e56 <FAN_voidFanOpen+0x170>
		__ticks = 1;
    6e4c:	81 e0       	ldi	r24, 0x01	; 1
    6e4e:	90 e0       	ldi	r25, 0x00	; 0
    6e50:	9e 83       	std	Y+6, r25	; 0x06
    6e52:	8d 83       	std	Y+5, r24	; 0x05
    6e54:	3f c0       	rjmp	.+126    	; 0x6ed4 <FAN_voidFanOpen+0x1ee>
	else if (__tmp > 65535)
    6e56:	6f 81       	ldd	r22, Y+7	; 0x07
    6e58:	78 85       	ldd	r23, Y+8	; 0x08
    6e5a:	89 85       	ldd	r24, Y+9	; 0x09
    6e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e5e:	20 e0       	ldi	r18, 0x00	; 0
    6e60:	3f ef       	ldi	r19, 0xFF	; 255
    6e62:	4f e7       	ldi	r20, 0x7F	; 127
    6e64:	57 e4       	ldi	r21, 0x47	; 71
    6e66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6e6a:	18 16       	cp	r1, r24
    6e6c:	4c f5       	brge	.+82     	; 0x6ec0 <FAN_voidFanOpen+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e70:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e72:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e74:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e76:	20 e0       	ldi	r18, 0x00	; 0
    6e78:	30 e0       	ldi	r19, 0x00	; 0
    6e7a:	40 e2       	ldi	r20, 0x20	; 32
    6e7c:	51 e4       	ldi	r21, 0x41	; 65
    6e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6e82:	dc 01       	movw	r26, r24
    6e84:	cb 01       	movw	r24, r22
    6e86:	bc 01       	movw	r22, r24
    6e88:	cd 01       	movw	r24, r26
    6e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e8e:	dc 01       	movw	r26, r24
    6e90:	cb 01       	movw	r24, r22
    6e92:	9e 83       	std	Y+6, r25	; 0x06
    6e94:	8d 83       	std	Y+5, r24	; 0x05
    6e96:	0f c0       	rjmp	.+30     	; 0x6eb6 <FAN_voidFanOpen+0x1d0>
    6e98:	88 ec       	ldi	r24, 0xC8	; 200
    6e9a:	90 e0       	ldi	r25, 0x00	; 0
    6e9c:	9c 83       	std	Y+4, r25	; 0x04
    6e9e:	8b 83       	std	Y+3, r24	; 0x03
    6ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    6ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    6ea4:	01 97       	sbiw	r24, 0x01	; 1
    6ea6:	f1 f7       	brne	.-4      	; 0x6ea4 <FAN_voidFanOpen+0x1be>
    6ea8:	9c 83       	std	Y+4, r25	; 0x04
    6eaa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6eac:	8d 81       	ldd	r24, Y+5	; 0x05
    6eae:	9e 81       	ldd	r25, Y+6	; 0x06
    6eb0:	01 97       	sbiw	r24, 0x01	; 1
    6eb2:	9e 83       	std	Y+6, r25	; 0x06
    6eb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    6eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    6eba:	00 97       	sbiw	r24, 0x00	; 0
    6ebc:	69 f7       	brne	.-38     	; 0x6e98 <FAN_voidFanOpen+0x1b2>
    6ebe:	14 c0       	rjmp	.+40     	; 0x6ee8 <FAN_voidFanOpen+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    6ec2:	78 85       	ldd	r23, Y+8	; 0x08
    6ec4:	89 85       	ldd	r24, Y+9	; 0x09
    6ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ecc:	dc 01       	movw	r26, r24
    6ece:	cb 01       	movw	r24, r22
    6ed0:	9e 83       	std	Y+6, r25	; 0x06
    6ed2:	8d 83       	std	Y+5, r24	; 0x05
    6ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    6ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    6ed8:	9a 83       	std	Y+2, r25	; 0x02
    6eda:	89 83       	std	Y+1, r24	; 0x01
    6edc:	89 81       	ldd	r24, Y+1	; 0x01
    6ede:	9a 81       	ldd	r25, Y+2	; 0x02
    6ee0:	01 97       	sbiw	r24, 0x01	; 1
    6ee2:	f1 f7       	brne	.-4      	; 0x6ee0 <FAN_voidFanOpen+0x1fa>
    6ee4:	9a 83       	std	Y+2, r25	; 0x02
    6ee6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    6ee8:	6c 96       	adiw	r28, 0x1c	; 28
    6eea:	0f b6       	in	r0, 0x3f	; 63
    6eec:	f8 94       	cli
    6eee:	de bf       	out	0x3e, r29	; 62
    6ef0:	0f be       	out	0x3f, r0	; 63
    6ef2:	cd bf       	out	0x3d, r28	; 61
    6ef4:	cf 91       	pop	r28
    6ef6:	df 91       	pop	r29
    6ef8:	08 95       	ret

00006efa <FAN_voidFanClose>:
void FAN_voidFanClose(void)
{
    6efa:	df 93       	push	r29
    6efc:	cf 93       	push	r28
    6efe:	cd b7       	in	r28, 0x3d	; 61
    6f00:	de b7       	in	r29, 0x3e	; 62
    6f02:	6c 97       	sbiw	r28, 0x1c	; 28
    6f04:	0f b6       	in	r0, 0x3f	; 63
    6f06:	f8 94       	cli
    6f08:	de bf       	out	0x3e, r29	; 62
    6f0a:	0f be       	out	0x3f, r0	; 63
    6f0c:	cd bf       	out	0x3d, r28	; 61
	DCMotor_voidMotorOFF(PORTA ,PIN1);
    6f0e:	80 e0       	ldi	r24, 0x00	; 0
    6f10:	61 e0       	ldi	r22, 0x01	; 1
    6f12:	0e 94 77 2b 	call	0x56ee	; 0x56ee <DCMotor_voidMotorOFF>
	LCD_voidWriteCommand(Lcd_Clear);
    6f16:	81 e0       	ldi	r24, 0x01	; 1
    6f18:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <LCD_voidWriteCommand>
	LCD_voidWriteString("FAN OFF ..");
    6f1c:	86 eb       	ldi	r24, 0xB6	; 182
    6f1e:	90 e0       	ldi	r25, 0x00	; 0
    6f20:	0e 94 35 28 	call	0x506a	; 0x506a <LCD_voidWriteString>
	BUZZER_voidBuzzerON(PORTA ,PIN0);
    6f24:	80 e0       	ldi	r24, 0x00	; 0
    6f26:	60 e0       	ldi	r22, 0x00	; 0
    6f28:	0e 94 cc 2b 	call	0x5798	; 0x5798 <BUZZER_voidBuzzerON>
    6f2c:	80 e0       	ldi	r24, 0x00	; 0
    6f2e:	90 e0       	ldi	r25, 0x00	; 0
    6f30:	a8 ec       	ldi	r26, 0xC8	; 200
    6f32:	b2 e4       	ldi	r27, 0x42	; 66
    6f34:	89 8f       	std	Y+25, r24	; 0x19
    6f36:	9a 8f       	std	Y+26, r25	; 0x1a
    6f38:	ab 8f       	std	Y+27, r26	; 0x1b
    6f3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6f3c:	69 8d       	ldd	r22, Y+25	; 0x19
    6f3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6f40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6f42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6f44:	20 e0       	ldi	r18, 0x00	; 0
    6f46:	30 e0       	ldi	r19, 0x00	; 0
    6f48:	4a ef       	ldi	r20, 0xFA	; 250
    6f4a:	54 e4       	ldi	r21, 0x44	; 68
    6f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6f50:	dc 01       	movw	r26, r24
    6f52:	cb 01       	movw	r24, r22
    6f54:	8d 8b       	std	Y+21, r24	; 0x15
    6f56:	9e 8b       	std	Y+22, r25	; 0x16
    6f58:	af 8b       	std	Y+23, r26	; 0x17
    6f5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6f5c:	6d 89       	ldd	r22, Y+21	; 0x15
    6f5e:	7e 89       	ldd	r23, Y+22	; 0x16
    6f60:	8f 89       	ldd	r24, Y+23	; 0x17
    6f62:	98 8d       	ldd	r25, Y+24	; 0x18
    6f64:	20 e0       	ldi	r18, 0x00	; 0
    6f66:	30 e0       	ldi	r19, 0x00	; 0
    6f68:	40 e8       	ldi	r20, 0x80	; 128
    6f6a:	5f e3       	ldi	r21, 0x3F	; 63
    6f6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6f70:	88 23       	and	r24, r24
    6f72:	2c f4       	brge	.+10     	; 0x6f7e <FAN_voidFanClose+0x84>
		__ticks = 1;
    6f74:	81 e0       	ldi	r24, 0x01	; 1
    6f76:	90 e0       	ldi	r25, 0x00	; 0
    6f78:	9c 8b       	std	Y+20, r25	; 0x14
    6f7a:	8b 8b       	std	Y+19, r24	; 0x13
    6f7c:	3f c0       	rjmp	.+126    	; 0x6ffc <FAN_voidFanClose+0x102>
	else if (__tmp > 65535)
    6f7e:	6d 89       	ldd	r22, Y+21	; 0x15
    6f80:	7e 89       	ldd	r23, Y+22	; 0x16
    6f82:	8f 89       	ldd	r24, Y+23	; 0x17
    6f84:	98 8d       	ldd	r25, Y+24	; 0x18
    6f86:	20 e0       	ldi	r18, 0x00	; 0
    6f88:	3f ef       	ldi	r19, 0xFF	; 255
    6f8a:	4f e7       	ldi	r20, 0x7F	; 127
    6f8c:	57 e4       	ldi	r21, 0x47	; 71
    6f8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6f92:	18 16       	cp	r1, r24
    6f94:	4c f5       	brge	.+82     	; 0x6fe8 <FAN_voidFanClose+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6f96:	69 8d       	ldd	r22, Y+25	; 0x19
    6f98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6f9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6f9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6f9e:	20 e0       	ldi	r18, 0x00	; 0
    6fa0:	30 e0       	ldi	r19, 0x00	; 0
    6fa2:	40 e2       	ldi	r20, 0x20	; 32
    6fa4:	51 e4       	ldi	r21, 0x41	; 65
    6fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6faa:	dc 01       	movw	r26, r24
    6fac:	cb 01       	movw	r24, r22
    6fae:	bc 01       	movw	r22, r24
    6fb0:	cd 01       	movw	r24, r26
    6fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6fb6:	dc 01       	movw	r26, r24
    6fb8:	cb 01       	movw	r24, r22
    6fba:	9c 8b       	std	Y+20, r25	; 0x14
    6fbc:	8b 8b       	std	Y+19, r24	; 0x13
    6fbe:	0f c0       	rjmp	.+30     	; 0x6fde <FAN_voidFanClose+0xe4>
    6fc0:	88 ec       	ldi	r24, 0xC8	; 200
    6fc2:	90 e0       	ldi	r25, 0x00	; 0
    6fc4:	9a 8b       	std	Y+18, r25	; 0x12
    6fc6:	89 8b       	std	Y+17, r24	; 0x11
    6fc8:	89 89       	ldd	r24, Y+17	; 0x11
    6fca:	9a 89       	ldd	r25, Y+18	; 0x12
    6fcc:	01 97       	sbiw	r24, 0x01	; 1
    6fce:	f1 f7       	brne	.-4      	; 0x6fcc <FAN_voidFanClose+0xd2>
    6fd0:	9a 8b       	std	Y+18, r25	; 0x12
    6fd2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6fd4:	8b 89       	ldd	r24, Y+19	; 0x13
    6fd6:	9c 89       	ldd	r25, Y+20	; 0x14
    6fd8:	01 97       	sbiw	r24, 0x01	; 1
    6fda:	9c 8b       	std	Y+20, r25	; 0x14
    6fdc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6fde:	8b 89       	ldd	r24, Y+19	; 0x13
    6fe0:	9c 89       	ldd	r25, Y+20	; 0x14
    6fe2:	00 97       	sbiw	r24, 0x00	; 0
    6fe4:	69 f7       	brne	.-38     	; 0x6fc0 <FAN_voidFanClose+0xc6>
    6fe6:	14 c0       	rjmp	.+40     	; 0x7010 <FAN_voidFanClose+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6fe8:	6d 89       	ldd	r22, Y+21	; 0x15
    6fea:	7e 89       	ldd	r23, Y+22	; 0x16
    6fec:	8f 89       	ldd	r24, Y+23	; 0x17
    6fee:	98 8d       	ldd	r25, Y+24	; 0x18
    6ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ff4:	dc 01       	movw	r26, r24
    6ff6:	cb 01       	movw	r24, r22
    6ff8:	9c 8b       	std	Y+20, r25	; 0x14
    6ffa:	8b 8b       	std	Y+19, r24	; 0x13
    6ffc:	8b 89       	ldd	r24, Y+19	; 0x13
    6ffe:	9c 89       	ldd	r25, Y+20	; 0x14
    7000:	98 8b       	std	Y+16, r25	; 0x10
    7002:	8f 87       	std	Y+15, r24	; 0x0f
    7004:	8f 85       	ldd	r24, Y+15	; 0x0f
    7006:	98 89       	ldd	r25, Y+16	; 0x10
    7008:	01 97       	sbiw	r24, 0x01	; 1
    700a:	f1 f7       	brne	.-4      	; 0x7008 <FAN_voidFanClose+0x10e>
    700c:	98 8b       	std	Y+16, r25	; 0x10
    700e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	BUZZER_voidBuzzerOFF(PORTA ,PIN0);
    7010:	80 e0       	ldi	r24, 0x00	; 0
    7012:	60 e0       	ldi	r22, 0x00	; 0
    7014:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <BUZZER_voidBuzzerOFF>
    7018:	80 e0       	ldi	r24, 0x00	; 0
    701a:	90 e0       	ldi	r25, 0x00	; 0
    701c:	aa e7       	ldi	r26, 0x7A	; 122
    701e:	b4 e4       	ldi	r27, 0x44	; 68
    7020:	8b 87       	std	Y+11, r24	; 0x0b
    7022:	9c 87       	std	Y+12, r25	; 0x0c
    7024:	ad 87       	std	Y+13, r26	; 0x0d
    7026:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7028:	6b 85       	ldd	r22, Y+11	; 0x0b
    702a:	7c 85       	ldd	r23, Y+12	; 0x0c
    702c:	8d 85       	ldd	r24, Y+13	; 0x0d
    702e:	9e 85       	ldd	r25, Y+14	; 0x0e
    7030:	20 e0       	ldi	r18, 0x00	; 0
    7032:	30 e0       	ldi	r19, 0x00	; 0
    7034:	4a ef       	ldi	r20, 0xFA	; 250
    7036:	54 e4       	ldi	r21, 0x44	; 68
    7038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    703c:	dc 01       	movw	r26, r24
    703e:	cb 01       	movw	r24, r22
    7040:	8f 83       	std	Y+7, r24	; 0x07
    7042:	98 87       	std	Y+8, r25	; 0x08
    7044:	a9 87       	std	Y+9, r26	; 0x09
    7046:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7048:	6f 81       	ldd	r22, Y+7	; 0x07
    704a:	78 85       	ldd	r23, Y+8	; 0x08
    704c:	89 85       	ldd	r24, Y+9	; 0x09
    704e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7050:	20 e0       	ldi	r18, 0x00	; 0
    7052:	30 e0       	ldi	r19, 0x00	; 0
    7054:	40 e8       	ldi	r20, 0x80	; 128
    7056:	5f e3       	ldi	r21, 0x3F	; 63
    7058:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    705c:	88 23       	and	r24, r24
    705e:	2c f4       	brge	.+10     	; 0x706a <FAN_voidFanClose+0x170>
		__ticks = 1;
    7060:	81 e0       	ldi	r24, 0x01	; 1
    7062:	90 e0       	ldi	r25, 0x00	; 0
    7064:	9e 83       	std	Y+6, r25	; 0x06
    7066:	8d 83       	std	Y+5, r24	; 0x05
    7068:	3f c0       	rjmp	.+126    	; 0x70e8 <FAN_voidFanClose+0x1ee>
	else if (__tmp > 65535)
    706a:	6f 81       	ldd	r22, Y+7	; 0x07
    706c:	78 85       	ldd	r23, Y+8	; 0x08
    706e:	89 85       	ldd	r24, Y+9	; 0x09
    7070:	9a 85       	ldd	r25, Y+10	; 0x0a
    7072:	20 e0       	ldi	r18, 0x00	; 0
    7074:	3f ef       	ldi	r19, 0xFF	; 255
    7076:	4f e7       	ldi	r20, 0x7F	; 127
    7078:	57 e4       	ldi	r21, 0x47	; 71
    707a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    707e:	18 16       	cp	r1, r24
    7080:	4c f5       	brge	.+82     	; 0x70d4 <FAN_voidFanClose+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7082:	6b 85       	ldd	r22, Y+11	; 0x0b
    7084:	7c 85       	ldd	r23, Y+12	; 0x0c
    7086:	8d 85       	ldd	r24, Y+13	; 0x0d
    7088:	9e 85       	ldd	r25, Y+14	; 0x0e
    708a:	20 e0       	ldi	r18, 0x00	; 0
    708c:	30 e0       	ldi	r19, 0x00	; 0
    708e:	40 e2       	ldi	r20, 0x20	; 32
    7090:	51 e4       	ldi	r21, 0x41	; 65
    7092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7096:	dc 01       	movw	r26, r24
    7098:	cb 01       	movw	r24, r22
    709a:	bc 01       	movw	r22, r24
    709c:	cd 01       	movw	r24, r26
    709e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    70a2:	dc 01       	movw	r26, r24
    70a4:	cb 01       	movw	r24, r22
    70a6:	9e 83       	std	Y+6, r25	; 0x06
    70a8:	8d 83       	std	Y+5, r24	; 0x05
    70aa:	0f c0       	rjmp	.+30     	; 0x70ca <FAN_voidFanClose+0x1d0>
    70ac:	88 ec       	ldi	r24, 0xC8	; 200
    70ae:	90 e0       	ldi	r25, 0x00	; 0
    70b0:	9c 83       	std	Y+4, r25	; 0x04
    70b2:	8b 83       	std	Y+3, r24	; 0x03
    70b4:	8b 81       	ldd	r24, Y+3	; 0x03
    70b6:	9c 81       	ldd	r25, Y+4	; 0x04
    70b8:	01 97       	sbiw	r24, 0x01	; 1
    70ba:	f1 f7       	brne	.-4      	; 0x70b8 <FAN_voidFanClose+0x1be>
    70bc:	9c 83       	std	Y+4, r25	; 0x04
    70be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    70c0:	8d 81       	ldd	r24, Y+5	; 0x05
    70c2:	9e 81       	ldd	r25, Y+6	; 0x06
    70c4:	01 97       	sbiw	r24, 0x01	; 1
    70c6:	9e 83       	std	Y+6, r25	; 0x06
    70c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    70ca:	8d 81       	ldd	r24, Y+5	; 0x05
    70cc:	9e 81       	ldd	r25, Y+6	; 0x06
    70ce:	00 97       	sbiw	r24, 0x00	; 0
    70d0:	69 f7       	brne	.-38     	; 0x70ac <FAN_voidFanClose+0x1b2>
    70d2:	14 c0       	rjmp	.+40     	; 0x70fc <FAN_voidFanClose+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    70d4:	6f 81       	ldd	r22, Y+7	; 0x07
    70d6:	78 85       	ldd	r23, Y+8	; 0x08
    70d8:	89 85       	ldd	r24, Y+9	; 0x09
    70da:	9a 85       	ldd	r25, Y+10	; 0x0a
    70dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    70e0:	dc 01       	movw	r26, r24
    70e2:	cb 01       	movw	r24, r22
    70e4:	9e 83       	std	Y+6, r25	; 0x06
    70e6:	8d 83       	std	Y+5, r24	; 0x05
    70e8:	8d 81       	ldd	r24, Y+5	; 0x05
    70ea:	9e 81       	ldd	r25, Y+6	; 0x06
    70ec:	9a 83       	std	Y+2, r25	; 0x02
    70ee:	89 83       	std	Y+1, r24	; 0x01
    70f0:	89 81       	ldd	r24, Y+1	; 0x01
    70f2:	9a 81       	ldd	r25, Y+2	; 0x02
    70f4:	01 97       	sbiw	r24, 0x01	; 1
    70f6:	f1 f7       	brne	.-4      	; 0x70f4 <FAN_voidFanClose+0x1fa>
    70f8:	9a 83       	std	Y+2, r25	; 0x02
    70fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    70fc:	6c 96       	adiw	r28, 0x1c	; 28
    70fe:	0f b6       	in	r0, 0x3f	; 63
    7100:	f8 94       	cli
    7102:	de bf       	out	0x3e, r29	; 62
    7104:	0f be       	out	0x3f, r0	; 63
    7106:	cd bf       	out	0x3d, r28	; 61
    7108:	cf 91       	pop	r28
    710a:	df 91       	pop	r29
    710c:	08 95       	ret

0000710e <ALARM_voidBuzzerOn>:

void ALARM_voidBuzzerOn(void)
{
    710e:	df 93       	push	r29
    7110:	cf 93       	push	r28
    7112:	cd b7       	in	r28, 0x3d	; 61
    7114:	de b7       	in	r29, 0x3e	; 62
    7116:	2f 97       	sbiw	r28, 0x0f	; 15
    7118:	0f b6       	in	r0, 0x3f	; 63
    711a:	f8 94       	cli
    711c:	de bf       	out	0x3e, r29	; 62
    711e:	0f be       	out	0x3f, r0	; 63
    7120:	cd bf       	out	0x3d, r28	; 61
	for(u8 counter = 0 ; counter < 50 ; counter++)
    7122:	1f 86       	std	Y+15, r1	; 0x0f
    7124:	79 c0       	rjmp	.+242    	; 0x7218 <ALARM_voidBuzzerOn+0x10a>
		{
			BUZZER_voidBuzzerToggel(PORTA ,PIN0);
    7126:	80 e0       	ldi	r24, 0x00	; 0
    7128:	60 e0       	ldi	r22, 0x00	; 0
    712a:	0e 94 ee 2b 	call	0x57dc	; 0x57dc <BUZZER_voidBuzzerToggel>
    712e:	80 e0       	ldi	r24, 0x00	; 0
    7130:	90 e0       	ldi	r25, 0x00	; 0
    7132:	a8 e4       	ldi	r26, 0x48	; 72
    7134:	b2 e4       	ldi	r27, 0x42	; 66
    7136:	8b 87       	std	Y+11, r24	; 0x0b
    7138:	9c 87       	std	Y+12, r25	; 0x0c
    713a:	ad 87       	std	Y+13, r26	; 0x0d
    713c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    713e:	6b 85       	ldd	r22, Y+11	; 0x0b
    7140:	7c 85       	ldd	r23, Y+12	; 0x0c
    7142:	8d 85       	ldd	r24, Y+13	; 0x0d
    7144:	9e 85       	ldd	r25, Y+14	; 0x0e
    7146:	20 e0       	ldi	r18, 0x00	; 0
    7148:	30 e0       	ldi	r19, 0x00	; 0
    714a:	4a ef       	ldi	r20, 0xFA	; 250
    714c:	54 e4       	ldi	r21, 0x44	; 68
    714e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7152:	dc 01       	movw	r26, r24
    7154:	cb 01       	movw	r24, r22
    7156:	8f 83       	std	Y+7, r24	; 0x07
    7158:	98 87       	std	Y+8, r25	; 0x08
    715a:	a9 87       	std	Y+9, r26	; 0x09
    715c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    715e:	6f 81       	ldd	r22, Y+7	; 0x07
    7160:	78 85       	ldd	r23, Y+8	; 0x08
    7162:	89 85       	ldd	r24, Y+9	; 0x09
    7164:	9a 85       	ldd	r25, Y+10	; 0x0a
    7166:	20 e0       	ldi	r18, 0x00	; 0
    7168:	30 e0       	ldi	r19, 0x00	; 0
    716a:	40 e8       	ldi	r20, 0x80	; 128
    716c:	5f e3       	ldi	r21, 0x3F	; 63
    716e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    7172:	88 23       	and	r24, r24
    7174:	2c f4       	brge	.+10     	; 0x7180 <ALARM_voidBuzzerOn+0x72>
		__ticks = 1;
    7176:	81 e0       	ldi	r24, 0x01	; 1
    7178:	90 e0       	ldi	r25, 0x00	; 0
    717a:	9e 83       	std	Y+6, r25	; 0x06
    717c:	8d 83       	std	Y+5, r24	; 0x05
    717e:	3f c0       	rjmp	.+126    	; 0x71fe <ALARM_voidBuzzerOn+0xf0>
	else if (__tmp > 65535)
    7180:	6f 81       	ldd	r22, Y+7	; 0x07
    7182:	78 85       	ldd	r23, Y+8	; 0x08
    7184:	89 85       	ldd	r24, Y+9	; 0x09
    7186:	9a 85       	ldd	r25, Y+10	; 0x0a
    7188:	20 e0       	ldi	r18, 0x00	; 0
    718a:	3f ef       	ldi	r19, 0xFF	; 255
    718c:	4f e7       	ldi	r20, 0x7F	; 127
    718e:	57 e4       	ldi	r21, 0x47	; 71
    7190:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    7194:	18 16       	cp	r1, r24
    7196:	4c f5       	brge	.+82     	; 0x71ea <ALARM_voidBuzzerOn+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7198:	6b 85       	ldd	r22, Y+11	; 0x0b
    719a:	7c 85       	ldd	r23, Y+12	; 0x0c
    719c:	8d 85       	ldd	r24, Y+13	; 0x0d
    719e:	9e 85       	ldd	r25, Y+14	; 0x0e
    71a0:	20 e0       	ldi	r18, 0x00	; 0
    71a2:	30 e0       	ldi	r19, 0x00	; 0
    71a4:	40 e2       	ldi	r20, 0x20	; 32
    71a6:	51 e4       	ldi	r21, 0x41	; 65
    71a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    71ac:	dc 01       	movw	r26, r24
    71ae:	cb 01       	movw	r24, r22
    71b0:	bc 01       	movw	r22, r24
    71b2:	cd 01       	movw	r24, r26
    71b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    71b8:	dc 01       	movw	r26, r24
    71ba:	cb 01       	movw	r24, r22
    71bc:	9e 83       	std	Y+6, r25	; 0x06
    71be:	8d 83       	std	Y+5, r24	; 0x05
    71c0:	0f c0       	rjmp	.+30     	; 0x71e0 <ALARM_voidBuzzerOn+0xd2>
    71c2:	88 ec       	ldi	r24, 0xC8	; 200
    71c4:	90 e0       	ldi	r25, 0x00	; 0
    71c6:	9c 83       	std	Y+4, r25	; 0x04
    71c8:	8b 83       	std	Y+3, r24	; 0x03
    71ca:	8b 81       	ldd	r24, Y+3	; 0x03
    71cc:	9c 81       	ldd	r25, Y+4	; 0x04
    71ce:	01 97       	sbiw	r24, 0x01	; 1
    71d0:	f1 f7       	brne	.-4      	; 0x71ce <ALARM_voidBuzzerOn+0xc0>
    71d2:	9c 83       	std	Y+4, r25	; 0x04
    71d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    71d6:	8d 81       	ldd	r24, Y+5	; 0x05
    71d8:	9e 81       	ldd	r25, Y+6	; 0x06
    71da:	01 97       	sbiw	r24, 0x01	; 1
    71dc:	9e 83       	std	Y+6, r25	; 0x06
    71de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    71e0:	8d 81       	ldd	r24, Y+5	; 0x05
    71e2:	9e 81       	ldd	r25, Y+6	; 0x06
    71e4:	00 97       	sbiw	r24, 0x00	; 0
    71e6:	69 f7       	brne	.-38     	; 0x71c2 <ALARM_voidBuzzerOn+0xb4>
    71e8:	14 c0       	rjmp	.+40     	; 0x7212 <ALARM_voidBuzzerOn+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    71ea:	6f 81       	ldd	r22, Y+7	; 0x07
    71ec:	78 85       	ldd	r23, Y+8	; 0x08
    71ee:	89 85       	ldd	r24, Y+9	; 0x09
    71f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    71f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    71f6:	dc 01       	movw	r26, r24
    71f8:	cb 01       	movw	r24, r22
    71fa:	9e 83       	std	Y+6, r25	; 0x06
    71fc:	8d 83       	std	Y+5, r24	; 0x05
    71fe:	8d 81       	ldd	r24, Y+5	; 0x05
    7200:	9e 81       	ldd	r25, Y+6	; 0x06
    7202:	9a 83       	std	Y+2, r25	; 0x02
    7204:	89 83       	std	Y+1, r24	; 0x01
    7206:	89 81       	ldd	r24, Y+1	; 0x01
    7208:	9a 81       	ldd	r25, Y+2	; 0x02
    720a:	01 97       	sbiw	r24, 0x01	; 1
    720c:	f1 f7       	brne	.-4      	; 0x720a <ALARM_voidBuzzerOn+0xfc>
    720e:	9a 83       	std	Y+2, r25	; 0x02
    7210:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}

void ALARM_voidBuzzerOn(void)
{
	for(u8 counter = 0 ; counter < 50 ; counter++)
    7212:	8f 85       	ldd	r24, Y+15	; 0x0f
    7214:	8f 5f       	subi	r24, 0xFF	; 255
    7216:	8f 87       	std	Y+15, r24	; 0x0f
    7218:	8f 85       	ldd	r24, Y+15	; 0x0f
    721a:	82 33       	cpi	r24, 0x32	; 50
    721c:	08 f4       	brcc	.+2      	; 0x7220 <ALARM_voidBuzzerOn+0x112>
    721e:	83 cf       	rjmp	.-250    	; 0x7126 <ALARM_voidBuzzerOn+0x18>
		{
			BUZZER_voidBuzzerToggel(PORTA ,PIN0);
			_delay_ms(50);
		}
}
    7220:	2f 96       	adiw	r28, 0x0f	; 15
    7222:	0f b6       	in	r0, 0x3f	; 63
    7224:	f8 94       	cli
    7226:	de bf       	out	0x3e, r29	; 62
    7228:	0f be       	out	0x3f, r0	; 63
    722a:	cd bf       	out	0x3d, r28	; 61
    722c:	cf 91       	pop	r28
    722e:	df 91       	pop	r29
    7230:	08 95       	ret

00007232 <Wifi_voidInit>:

// Send initialization commands to the Wi-Fi module
void Wifi_voidInit()
{
    7232:	df 93       	push	r29
    7234:	cf 93       	push	r28
    7236:	cd b7       	in	r28, 0x3d	; 61
    7238:	de b7       	in	r29, 0x3e	; 62
    723a:	6c 97       	sbiw	r28, 0x1c	; 28
    723c:	0f b6       	in	r0, 0x3f	; 63
    723e:	f8 94       	cli
    7240:	de bf       	out	0x3e, r29	; 62
    7242:	0f be       	out	0x3f, r0	; 63
    7244:	cd bf       	out	0x3d, r28	; 61
	  UART_voidSendStringSync("AT+CIPMUX=1\r\n");  // Enable multiple connections
    7246:	81 ec       	ldi	r24, 0xC1	; 193
    7248:	90 e0       	ldi	r25, 0x00	; 0
    724a:	0e 94 19 06 	call	0xc32	; 0xc32 <UART_voidSendStringSync>
    724e:	80 e0       	ldi	r24, 0x00	; 0
    7250:	90 e0       	ldi	r25, 0x00	; 0
    7252:	aa e7       	ldi	r26, 0x7A	; 122
    7254:	b4 e4       	ldi	r27, 0x44	; 68
    7256:	89 8f       	std	Y+25, r24	; 0x19
    7258:	9a 8f       	std	Y+26, r25	; 0x1a
    725a:	ab 8f       	std	Y+27, r26	; 0x1b
    725c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    725e:	69 8d       	ldd	r22, Y+25	; 0x19
    7260:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7262:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7264:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7266:	20 e0       	ldi	r18, 0x00	; 0
    7268:	30 e0       	ldi	r19, 0x00	; 0
    726a:	4a ef       	ldi	r20, 0xFA	; 250
    726c:	54 e4       	ldi	r21, 0x44	; 68
    726e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7272:	dc 01       	movw	r26, r24
    7274:	cb 01       	movw	r24, r22
    7276:	8d 8b       	std	Y+21, r24	; 0x15
    7278:	9e 8b       	std	Y+22, r25	; 0x16
    727a:	af 8b       	std	Y+23, r26	; 0x17
    727c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    727e:	6d 89       	ldd	r22, Y+21	; 0x15
    7280:	7e 89       	ldd	r23, Y+22	; 0x16
    7282:	8f 89       	ldd	r24, Y+23	; 0x17
    7284:	98 8d       	ldd	r25, Y+24	; 0x18
    7286:	20 e0       	ldi	r18, 0x00	; 0
    7288:	30 e0       	ldi	r19, 0x00	; 0
    728a:	40 e8       	ldi	r20, 0x80	; 128
    728c:	5f e3       	ldi	r21, 0x3F	; 63
    728e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    7292:	88 23       	and	r24, r24
    7294:	2c f4       	brge	.+10     	; 0x72a0 <Wifi_voidInit+0x6e>
		__ticks = 1;
    7296:	81 e0       	ldi	r24, 0x01	; 1
    7298:	90 e0       	ldi	r25, 0x00	; 0
    729a:	9c 8b       	std	Y+20, r25	; 0x14
    729c:	8b 8b       	std	Y+19, r24	; 0x13
    729e:	3f c0       	rjmp	.+126    	; 0x731e <Wifi_voidInit+0xec>
	else if (__tmp > 65535)
    72a0:	6d 89       	ldd	r22, Y+21	; 0x15
    72a2:	7e 89       	ldd	r23, Y+22	; 0x16
    72a4:	8f 89       	ldd	r24, Y+23	; 0x17
    72a6:	98 8d       	ldd	r25, Y+24	; 0x18
    72a8:	20 e0       	ldi	r18, 0x00	; 0
    72aa:	3f ef       	ldi	r19, 0xFF	; 255
    72ac:	4f e7       	ldi	r20, 0x7F	; 127
    72ae:	57 e4       	ldi	r21, 0x47	; 71
    72b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    72b4:	18 16       	cp	r1, r24
    72b6:	4c f5       	brge	.+82     	; 0x730a <Wifi_voidInit+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    72b8:	69 8d       	ldd	r22, Y+25	; 0x19
    72ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    72bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    72be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    72c0:	20 e0       	ldi	r18, 0x00	; 0
    72c2:	30 e0       	ldi	r19, 0x00	; 0
    72c4:	40 e2       	ldi	r20, 0x20	; 32
    72c6:	51 e4       	ldi	r21, 0x41	; 65
    72c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    72cc:	dc 01       	movw	r26, r24
    72ce:	cb 01       	movw	r24, r22
    72d0:	bc 01       	movw	r22, r24
    72d2:	cd 01       	movw	r24, r26
    72d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    72d8:	dc 01       	movw	r26, r24
    72da:	cb 01       	movw	r24, r22
    72dc:	9c 8b       	std	Y+20, r25	; 0x14
    72de:	8b 8b       	std	Y+19, r24	; 0x13
    72e0:	0f c0       	rjmp	.+30     	; 0x7300 <Wifi_voidInit+0xce>
    72e2:	88 ec       	ldi	r24, 0xC8	; 200
    72e4:	90 e0       	ldi	r25, 0x00	; 0
    72e6:	9a 8b       	std	Y+18, r25	; 0x12
    72e8:	89 8b       	std	Y+17, r24	; 0x11
    72ea:	89 89       	ldd	r24, Y+17	; 0x11
    72ec:	9a 89       	ldd	r25, Y+18	; 0x12
    72ee:	01 97       	sbiw	r24, 0x01	; 1
    72f0:	f1 f7       	brne	.-4      	; 0x72ee <Wifi_voidInit+0xbc>
    72f2:	9a 8b       	std	Y+18, r25	; 0x12
    72f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    72f6:	8b 89       	ldd	r24, Y+19	; 0x13
    72f8:	9c 89       	ldd	r25, Y+20	; 0x14
    72fa:	01 97       	sbiw	r24, 0x01	; 1
    72fc:	9c 8b       	std	Y+20, r25	; 0x14
    72fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7300:	8b 89       	ldd	r24, Y+19	; 0x13
    7302:	9c 89       	ldd	r25, Y+20	; 0x14
    7304:	00 97       	sbiw	r24, 0x00	; 0
    7306:	69 f7       	brne	.-38     	; 0x72e2 <Wifi_voidInit+0xb0>
    7308:	14 c0       	rjmp	.+40     	; 0x7332 <Wifi_voidInit+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    730a:	6d 89       	ldd	r22, Y+21	; 0x15
    730c:	7e 89       	ldd	r23, Y+22	; 0x16
    730e:	8f 89       	ldd	r24, Y+23	; 0x17
    7310:	98 8d       	ldd	r25, Y+24	; 0x18
    7312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7316:	dc 01       	movw	r26, r24
    7318:	cb 01       	movw	r24, r22
    731a:	9c 8b       	std	Y+20, r25	; 0x14
    731c:	8b 8b       	std	Y+19, r24	; 0x13
    731e:	8b 89       	ldd	r24, Y+19	; 0x13
    7320:	9c 89       	ldd	r25, Y+20	; 0x14
    7322:	98 8b       	std	Y+16, r25	; 0x10
    7324:	8f 87       	std	Y+15, r24	; 0x0f
    7326:	8f 85       	ldd	r24, Y+15	; 0x0f
    7328:	98 89       	ldd	r25, Y+16	; 0x10
    732a:	01 97       	sbiw	r24, 0x01	; 1
    732c:	f1 f7       	brne	.-4      	; 0x732a <Wifi_voidInit+0xf8>
    732e:	98 8b       	std	Y+16, r25	; 0x10
    7330:	8f 87       	std	Y+15, r24	; 0x0f
	  _delay_ms(1000);                             // Wait for command to process
	  UART_voidSendStringSync("AT+CIPSERVER=1,80\r\n");  // Start server on port 80
    7332:	8f ec       	ldi	r24, 0xCF	; 207
    7334:	90 e0       	ldi	r25, 0x00	; 0
    7336:	0e 94 19 06 	call	0xc32	; 0xc32 <UART_voidSendStringSync>
    733a:	80 e0       	ldi	r24, 0x00	; 0
    733c:	90 e0       	ldi	r25, 0x00	; 0
    733e:	aa e7       	ldi	r26, 0x7A	; 122
    7340:	b4 e4       	ldi	r27, 0x44	; 68
    7342:	8b 87       	std	Y+11, r24	; 0x0b
    7344:	9c 87       	std	Y+12, r25	; 0x0c
    7346:	ad 87       	std	Y+13, r26	; 0x0d
    7348:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    734a:	6b 85       	ldd	r22, Y+11	; 0x0b
    734c:	7c 85       	ldd	r23, Y+12	; 0x0c
    734e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7350:	9e 85       	ldd	r25, Y+14	; 0x0e
    7352:	20 e0       	ldi	r18, 0x00	; 0
    7354:	30 e0       	ldi	r19, 0x00	; 0
    7356:	4a ef       	ldi	r20, 0xFA	; 250
    7358:	54 e4       	ldi	r21, 0x44	; 68
    735a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    735e:	dc 01       	movw	r26, r24
    7360:	cb 01       	movw	r24, r22
    7362:	8f 83       	std	Y+7, r24	; 0x07
    7364:	98 87       	std	Y+8, r25	; 0x08
    7366:	a9 87       	std	Y+9, r26	; 0x09
    7368:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    736a:	6f 81       	ldd	r22, Y+7	; 0x07
    736c:	78 85       	ldd	r23, Y+8	; 0x08
    736e:	89 85       	ldd	r24, Y+9	; 0x09
    7370:	9a 85       	ldd	r25, Y+10	; 0x0a
    7372:	20 e0       	ldi	r18, 0x00	; 0
    7374:	30 e0       	ldi	r19, 0x00	; 0
    7376:	40 e8       	ldi	r20, 0x80	; 128
    7378:	5f e3       	ldi	r21, 0x3F	; 63
    737a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    737e:	88 23       	and	r24, r24
    7380:	2c f4       	brge	.+10     	; 0x738c <Wifi_voidInit+0x15a>
		__ticks = 1;
    7382:	81 e0       	ldi	r24, 0x01	; 1
    7384:	90 e0       	ldi	r25, 0x00	; 0
    7386:	9e 83       	std	Y+6, r25	; 0x06
    7388:	8d 83       	std	Y+5, r24	; 0x05
    738a:	3f c0       	rjmp	.+126    	; 0x740a <Wifi_voidInit+0x1d8>
	else if (__tmp > 65535)
    738c:	6f 81       	ldd	r22, Y+7	; 0x07
    738e:	78 85       	ldd	r23, Y+8	; 0x08
    7390:	89 85       	ldd	r24, Y+9	; 0x09
    7392:	9a 85       	ldd	r25, Y+10	; 0x0a
    7394:	20 e0       	ldi	r18, 0x00	; 0
    7396:	3f ef       	ldi	r19, 0xFF	; 255
    7398:	4f e7       	ldi	r20, 0x7F	; 127
    739a:	57 e4       	ldi	r21, 0x47	; 71
    739c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    73a0:	18 16       	cp	r1, r24
    73a2:	4c f5       	brge	.+82     	; 0x73f6 <Wifi_voidInit+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    73a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    73a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    73a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    73aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    73ac:	20 e0       	ldi	r18, 0x00	; 0
    73ae:	30 e0       	ldi	r19, 0x00	; 0
    73b0:	40 e2       	ldi	r20, 0x20	; 32
    73b2:	51 e4       	ldi	r21, 0x41	; 65
    73b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    73b8:	dc 01       	movw	r26, r24
    73ba:	cb 01       	movw	r24, r22
    73bc:	bc 01       	movw	r22, r24
    73be:	cd 01       	movw	r24, r26
    73c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    73c4:	dc 01       	movw	r26, r24
    73c6:	cb 01       	movw	r24, r22
    73c8:	9e 83       	std	Y+6, r25	; 0x06
    73ca:	8d 83       	std	Y+5, r24	; 0x05
    73cc:	0f c0       	rjmp	.+30     	; 0x73ec <Wifi_voidInit+0x1ba>
    73ce:	88 ec       	ldi	r24, 0xC8	; 200
    73d0:	90 e0       	ldi	r25, 0x00	; 0
    73d2:	9c 83       	std	Y+4, r25	; 0x04
    73d4:	8b 83       	std	Y+3, r24	; 0x03
    73d6:	8b 81       	ldd	r24, Y+3	; 0x03
    73d8:	9c 81       	ldd	r25, Y+4	; 0x04
    73da:	01 97       	sbiw	r24, 0x01	; 1
    73dc:	f1 f7       	brne	.-4      	; 0x73da <Wifi_voidInit+0x1a8>
    73de:	9c 83       	std	Y+4, r25	; 0x04
    73e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    73e2:	8d 81       	ldd	r24, Y+5	; 0x05
    73e4:	9e 81       	ldd	r25, Y+6	; 0x06
    73e6:	01 97       	sbiw	r24, 0x01	; 1
    73e8:	9e 83       	std	Y+6, r25	; 0x06
    73ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    73ec:	8d 81       	ldd	r24, Y+5	; 0x05
    73ee:	9e 81       	ldd	r25, Y+6	; 0x06
    73f0:	00 97       	sbiw	r24, 0x00	; 0
    73f2:	69 f7       	brne	.-38     	; 0x73ce <Wifi_voidInit+0x19c>
    73f4:	14 c0       	rjmp	.+40     	; 0x741e <Wifi_voidInit+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    73f6:	6f 81       	ldd	r22, Y+7	; 0x07
    73f8:	78 85       	ldd	r23, Y+8	; 0x08
    73fa:	89 85       	ldd	r24, Y+9	; 0x09
    73fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    73fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7402:	dc 01       	movw	r26, r24
    7404:	cb 01       	movw	r24, r22
    7406:	9e 83       	std	Y+6, r25	; 0x06
    7408:	8d 83       	std	Y+5, r24	; 0x05
    740a:	8d 81       	ldd	r24, Y+5	; 0x05
    740c:	9e 81       	ldd	r25, Y+6	; 0x06
    740e:	9a 83       	std	Y+2, r25	; 0x02
    7410:	89 83       	std	Y+1, r24	; 0x01
    7412:	89 81       	ldd	r24, Y+1	; 0x01
    7414:	9a 81       	ldd	r25, Y+2	; 0x02
    7416:	01 97       	sbiw	r24, 0x01	; 1
    7418:	f1 f7       	brne	.-4      	; 0x7416 <Wifi_voidInit+0x1e4>
    741a:	9a 83       	std	Y+2, r25	; 0x02
    741c:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms(1000);
}
    741e:	6c 96       	adiw	r28, 0x1c	; 28
    7420:	0f b6       	in	r0, 0x3f	; 63
    7422:	f8 94       	cli
    7424:	de bf       	out	0x3e, r29	; 62
    7426:	0f be       	out	0x3f, r0	; 63
    7428:	cd bf       	out	0x3d, r28	; 61
    742a:	cf 91       	pop	r28
    742c:	df 91       	pop	r29
    742e:	08 95       	ret

00007430 <checkRain>:

void checkRain()
{
    7430:	df 93       	push	r29
    7432:	cf 93       	push	r28
    7434:	0f 92       	push	r0
    7436:	cd b7       	in	r28, 0x3d	; 61
    7438:	de b7       	in	r29, 0x3e	; 62
    // Initialize raindrop sensor pin
    u8 isRaining = DIO_u8GetPinValue(PORTA, PIN4) == 0;
    743a:	80 e0       	ldi	r24, 0x00	; 0
    743c:	64 e0       	ldi	r22, 0x04	; 4
    743e:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <DIO_u8GetPinValue>
    7442:	19 82       	std	Y+1, r1	; 0x01
    7444:	88 23       	and	r24, r24
    7446:	11 f4       	brne	.+4      	; 0x744c <checkRain+0x1c>
    7448:	81 e0       	ldi	r24, 0x01	; 1
    744a:	89 83       	std	Y+1, r24	; 0x01

    if (isRaining) { // Active LOW signal indicates rain
    744c:	89 81       	ldd	r24, Y+1	; 0x01
    744e:	88 23       	and	r24, r24
    7450:	31 f0       	breq	.+12     	; 0x745e <checkRain+0x2e>
        LED_voidLedOn(PORTA, PIN3, VCC);
    7452:	80 e0       	ldi	r24, 0x00	; 0
    7454:	63 e0       	ldi	r22, 0x03	; 3
    7456:	41 e0       	ldi	r20, 0x01	; 1
    7458:	0e 94 36 21 	call	0x426c	; 0x426c <LED_voidLedOn>
    745c:	08 c0       	rjmp	.+16     	; 0x746e <checkRain+0x3e>
    } else {
        LED_voidLedOff(PORTA, PIN3, VCC);
    745e:	80 e0       	ldi	r24, 0x00	; 0
    7460:	90 e0       	ldi	r25, 0x00	; 0
    7462:	63 e0       	ldi	r22, 0x03	; 3
    7464:	70 e0       	ldi	r23, 0x00	; 0
    7466:	41 e0       	ldi	r20, 0x01	; 1
    7468:	50 e0       	ldi	r21, 0x00	; 0
    746a:	0e 94 bf 21 	call	0x437e	; 0x437e <LED_voidLedOff>
    }
}
    746e:	0f 90       	pop	r0
    7470:	cf 91       	pop	r28
    7472:	df 91       	pop	r29
    7474:	08 95       	ret

00007476 <main>:
u8 Local_u8Command = 0;          // Command extracted from GET request

void checkRain(void);
u8 UART_u8IsDataAvailable(void);

void main(void) {
    7476:	0f 93       	push	r16
    7478:	1f 93       	push	r17
    747a:	df 93       	push	r29
    747c:	cf 93       	push	r28
    747e:	cd b7       	in	r28, 0x3d	; 61
    7480:	de b7       	in	r29, 0x3e	; 62
    7482:	62 97       	sbiw	r28, 0x12	; 18
    7484:	0f b6       	in	r0, 0x3f	; 63
    7486:	f8 94       	cli
    7488:	de bf       	out	0x3e, r29	; 62
    748a:	0f be       	out	0x3f, r0	; 63
    748c:	cd bf       	out	0x3d, r28	; 61
    // Initialize peripherals
    LED_voidLedInit(PORTA, PIN0); // Initialize LED 0
    748e:	80 e0       	ldi	r24, 0x00	; 0
    7490:	60 e0       	ldi	r22, 0x00	; 0
    7492:	0e 94 b2 20 	call	0x4164	; 0x4164 <LED_voidLedInit>
    LED_voidLedInit(PORTA, PIN1); // Initialize LED 1
    7496:	80 e0       	ldi	r24, 0x00	; 0
    7498:	61 e0       	ldi	r22, 0x01	; 1
    749a:	0e 94 b2 20 	call	0x4164	; 0x4164 <LED_voidLedInit>
    LED_voidLedInit(PORTA, PIN2); // Initialize LED 2
    749e:	80 e0       	ldi	r24, 0x00	; 0
    74a0:	62 e0       	ldi	r22, 0x02	; 2
    74a2:	0e 94 b2 20 	call	0x4164	; 0x4164 <LED_voidLedInit>
    LED_voidLedInit(PORTA, PIN3); // Initialize LED for raindrop sensor
    74a6:	80 e0       	ldi	r24, 0x00	; 0
    74a8:	63 e0       	ldi	r22, 0x03	; 3
    74aa:	0e 94 b2 20 	call	0x4164	; 0x4164 <LED_voidLedInit>
    SERVO_voidInit();             // Initialize Servo Motor
    74ae:	0e 94 78 20 	call	0x40f0	; 0x40f0 <SERVO_voidInit>
    UART_voidInit();              // Initialize UART
    74b2:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_voidInit>

    Wifi_voidInit();
    74b6:	0e 94 19 39 	call	0x7232	; 0x7232 <Wifi_voidInit>

    while (1) {
        checkRain();
    74ba:	0e 94 18 3a 	call	0x7430	; 0x7430 <checkRain>

        // Check if data is available on the serial port
        if (UART_u8IsDataAvailable()) {
    74be:	0e 94 6f 07 	call	0xede	; 0xede <UART_u8IsDataAvailable>
    74c2:	88 23       	and	r24, r24
    74c4:	d1 f3       	breq	.-12     	; 0x74ba <main+0x44>
            // Receive data from the Wi-Fi module
            Local_u8Index = 0;
    74c6:	10 92 50 01 	sts	0x0150, r1
            memset(Local_u8ReceivedBuffer, 0, sizeof(Local_u8ReceivedBuffer)); // Clear buffer
    74ca:	84 e5       	ldi	r24, 0x54	; 84
    74cc:	91 e0       	ldi	r25, 0x01	; 1
    74ce:	60 e0       	ldi	r22, 0x00	; 0
    74d0:	70 e0       	ldi	r23, 0x00	; 0
    74d2:	46 e9       	ldi	r20, 0x96	; 150
    74d4:	50 e0       	ldi	r21, 0x00	; 0
    74d6:	0e 94 d1 3b 	call	0x77a2	; 0x77a2 <memset>

            while (1) {
                Local_u8ReceivedBuffer[Local_u8Index] = UART_u8ReceiveDataSync();
    74da:	80 91 50 01 	lds	r24, 0x0150
    74de:	08 2f       	mov	r16, r24
    74e0:	10 e0       	ldi	r17, 0x00	; 0
    74e2:	0e 94 42 06 	call	0xc84	; 0xc84 <UART_u8ReceiveDataSync>
    74e6:	f8 01       	movw	r30, r16
    74e8:	ec 5a       	subi	r30, 0xAC	; 172
    74ea:	fe 4f       	sbci	r31, 0xFE	; 254
    74ec:	80 83       	st	Z, r24
                if (Local_u8ReceivedBuffer[Local_u8Index] == '\n') { // End of message
    74ee:	80 91 50 01 	lds	r24, 0x0150
    74f2:	88 2f       	mov	r24, r24
    74f4:	90 e0       	ldi	r25, 0x00	; 0
    74f6:	fc 01       	movw	r30, r24
    74f8:	ec 5a       	subi	r30, 0xAC	; 172
    74fa:	fe 4f       	sbci	r31, 0xFE	; 254
    74fc:	80 81       	ld	r24, Z
    74fe:	8a 30       	cpi	r24, 0x0A	; 10
    7500:	99 f4       	brne	.+38     	; 0x7528 <main+0xb2>
                    Local_u8ReceivedBuffer[Local_u8Index + 1] = '\0'; // Null-terminate
    7502:	80 91 50 01 	lds	r24, 0x0150
    7506:	88 2f       	mov	r24, r24
    7508:	90 e0       	ldi	r25, 0x00	; 0
    750a:	01 96       	adiw	r24, 0x01	; 1
    750c:	fc 01       	movw	r30, r24
    750e:	ec 5a       	subi	r30, 0xAC	; 172
    7510:	fe 4f       	sbci	r31, 0xFE	; 254
    7512:	10 82       	st	Z, r1
                }
                Local_u8Index++;
            }

            // Check if the data contains "GET /?cmd="
            if (strstr((char *)Local_u8ReceivedBuffer, "GET /?cmd=") != NULL) {
    7514:	84 e5       	ldi	r24, 0x54	; 84
    7516:	91 e0       	ldi	r25, 0x01	; 1
    7518:	23 ee       	ldi	r18, 0xE3	; 227
    751a:	30 e0       	ldi	r19, 0x00	; 0
    751c:	b9 01       	movw	r22, r18
    751e:	0e 94 d8 3b 	call	0x77b0	; 0x77b0 <strstr>
    7522:	00 97       	sbiw	r24, 0x00	; 0
    7524:	39 f4       	brne	.+14     	; 0x7534 <main+0xbe>
    7526:	c9 cf       	rjmp	.-110    	; 0x74ba <main+0x44>
                Local_u8ReceivedBuffer[Local_u8Index] = UART_u8ReceiveDataSync();
                if (Local_u8ReceivedBuffer[Local_u8Index] == '\n') { // End of message
                    Local_u8ReceivedBuffer[Local_u8Index + 1] = '\0'; // Null-terminate
                    break;
                }
                Local_u8Index++;
    7528:	80 91 50 01 	lds	r24, 0x0150
    752c:	8f 5f       	subi	r24, 0xFF	; 255
    752e:	80 93 50 01 	sts	0x0150, r24
    7532:	d3 cf       	rjmp	.-90     	; 0x74da <main+0x64>
            }

            // Check if the data contains "GET /?cmd="
            if (strstr((char *)Local_u8ReceivedBuffer, "GET /?cmd=") != NULL) {
                // Extract the command after "cmd="
                char *commandPtr = strstr((char *)Local_u8ReceivedBuffer, "cmd=") + 4;
    7534:	84 e5       	ldi	r24, 0x54	; 84
    7536:	91 e0       	ldi	r25, 0x01	; 1
    7538:	2e ee       	ldi	r18, 0xEE	; 238
    753a:	30 e0       	ldi	r19, 0x00	; 0
    753c:	b9 01       	movw	r22, r18
    753e:	0e 94 d8 3b 	call	0x77b0	; 0x77b0 <strstr>
    7542:	04 96       	adiw	r24, 0x04	; 4
    7544:	98 8b       	std	Y+16, r25	; 0x10
    7546:	8f 87       	std	Y+15, r24	; 0x0f
                Local_u8Command = *commandPtr;
    7548:	ef 85       	ldd	r30, Y+15	; 0x0f
    754a:	f8 89       	ldd	r31, Y+16	; 0x10
    754c:	80 81       	ld	r24, Z
    754e:	80 93 51 01 	sts	0x0151, r24

                // Perform the action based on the extracted command
                switch (Local_u8Command) {
    7552:	80 91 51 01 	lds	r24, 0x0151
    7556:	28 2f       	mov	r18, r24
    7558:	30 e0       	ldi	r19, 0x00	; 0
    755a:	3a 8b       	std	Y+18, r19	; 0x12
    755c:	29 8b       	std	Y+17, r18	; 0x11
    755e:	89 89       	ldd	r24, Y+17	; 0x11
    7560:	9a 89       	ldd	r25, Y+18	; 0x12
    7562:	82 36       	cpi	r24, 0x62	; 98
    7564:	91 05       	cpc	r25, r1
    7566:	b1 f0       	breq	.+44     	; 0x7594 <main+0x11e>
    7568:	29 89       	ldd	r18, Y+17	; 0x11
    756a:	3a 89       	ldd	r19, Y+18	; 0x12
    756c:	23 36       	cpi	r18, 0x63	; 99
    756e:	31 05       	cpc	r19, r1
    7570:	34 f4       	brge	.+12     	; 0x757e <main+0x108>
    7572:	89 89       	ldd	r24, Y+17	; 0x11
    7574:	9a 89       	ldd	r25, Y+18	; 0x12
    7576:	81 36       	cpi	r24, 0x61	; 97
    7578:	91 05       	cpc	r25, r1
    757a:	91 f0       	breq	.+36     	; 0x75a0 <main+0x12a>
    757c:	1f c0       	rjmp	.+62     	; 0x75bc <main+0x146>
    757e:	29 89       	ldd	r18, Y+17	; 0x11
    7580:	3a 89       	ldd	r19, Y+18	; 0x12
    7582:	23 36       	cpi	r18, 0x63	; 99
    7584:	31 05       	cpc	r19, r1
    7586:	a9 f0       	breq	.+42     	; 0x75b2 <main+0x13c>
    7588:	89 89       	ldd	r24, Y+17	; 0x11
    758a:	9a 89       	ldd	r25, Y+18	; 0x12
    758c:	8f 36       	cpi	r24, 0x6F	; 111
    758e:	91 05       	cpc	r25, r1
    7590:	99 f0       	breq	.+38     	; 0x75b8 <main+0x142>
    7592:	14 c0       	rjmp	.+40     	; 0x75bc <main+0x146>
                    case 'b': // Open LED
                        LED_voidLedOn(PORTA, PIN2, VCC);
    7594:	80 e0       	ldi	r24, 0x00	; 0
    7596:	62 e0       	ldi	r22, 0x02	; 2
    7598:	41 e0       	ldi	r20, 0x01	; 1
    759a:	0e 94 36 21 	call	0x426c	; 0x426c <LED_voidLedOn>
    759e:	0e c0       	rjmp	.+28     	; 0x75bc <main+0x146>
                        break;
                    case 'a': // Close LED
                        LED_voidLedOff(PORTA, PIN2, VCC);
    75a0:	80 e0       	ldi	r24, 0x00	; 0
    75a2:	90 e0       	ldi	r25, 0x00	; 0
    75a4:	62 e0       	ldi	r22, 0x02	; 2
    75a6:	70 e0       	ldi	r23, 0x00	; 0
    75a8:	41 e0       	ldi	r20, 0x01	; 1
    75aa:	50 e0       	ldi	r21, 0x00	; 0
    75ac:	0e 94 bf 21 	call	0x437e	; 0x437e <LED_voidLedOff>
    75b0:	05 c0       	rjmp	.+10     	; 0x75bc <main+0x146>
                        break;
                    case 'c': // Open Door
                        DOOR_voidDoorOpen();
    75b2:	0e 94 62 34 	call	0x68c4	; 0x68c4 <DOOR_voidDoorOpen>
    75b6:	02 c0       	rjmp	.+4      	; 0x75bc <main+0x146>
                        break;
                    case 'o': // Close Door
                        DOOR_voidDoorClose();
    75b8:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <DOOR_voidDoorClose>
                    default: // Invalid or unsupported command
                        break;
                }

                // Send response back to the client
                UART_voidSendStringSync("AT+CIPSEND=0,20\r\n");  // Prepare to send response
    75bc:	83 ef       	ldi	r24, 0xF3	; 243
    75be:	90 e0       	ldi	r25, 0x00	; 0
    75c0:	0e 94 19 06 	call	0xc32	; 0xc32 <UART_voidSendStringSync>
    75c4:	80 e0       	ldi	r24, 0x00	; 0
    75c6:	90 e0       	ldi	r25, 0x00	; 0
    75c8:	a8 ec       	ldi	r26, 0xC8	; 200
    75ca:	b2 e4       	ldi	r27, 0x42	; 66
    75cc:	8b 87       	std	Y+11, r24	; 0x0b
    75ce:	9c 87       	std	Y+12, r25	; 0x0c
    75d0:	ad 87       	std	Y+13, r26	; 0x0d
    75d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    75d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    75d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    75d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    75da:	9e 85       	ldd	r25, Y+14	; 0x0e
    75dc:	20 e0       	ldi	r18, 0x00	; 0
    75de:	30 e0       	ldi	r19, 0x00	; 0
    75e0:	4a ef       	ldi	r20, 0xFA	; 250
    75e2:	54 e4       	ldi	r21, 0x44	; 68
    75e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    75e8:	dc 01       	movw	r26, r24
    75ea:	cb 01       	movw	r24, r22
    75ec:	8f 83       	std	Y+7, r24	; 0x07
    75ee:	98 87       	std	Y+8, r25	; 0x08
    75f0:	a9 87       	std	Y+9, r26	; 0x09
    75f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    75f4:	6f 81       	ldd	r22, Y+7	; 0x07
    75f6:	78 85       	ldd	r23, Y+8	; 0x08
    75f8:	89 85       	ldd	r24, Y+9	; 0x09
    75fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    75fc:	20 e0       	ldi	r18, 0x00	; 0
    75fe:	30 e0       	ldi	r19, 0x00	; 0
    7600:	40 e8       	ldi	r20, 0x80	; 128
    7602:	5f e3       	ldi	r21, 0x3F	; 63
    7604:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    7608:	88 23       	and	r24, r24
    760a:	2c f4       	brge	.+10     	; 0x7616 <main+0x1a0>
		__ticks = 1;
    760c:	81 e0       	ldi	r24, 0x01	; 1
    760e:	90 e0       	ldi	r25, 0x00	; 0
    7610:	9e 83       	std	Y+6, r25	; 0x06
    7612:	8d 83       	std	Y+5, r24	; 0x05
    7614:	3f c0       	rjmp	.+126    	; 0x7694 <main+0x21e>
	else if (__tmp > 65535)
    7616:	6f 81       	ldd	r22, Y+7	; 0x07
    7618:	78 85       	ldd	r23, Y+8	; 0x08
    761a:	89 85       	ldd	r24, Y+9	; 0x09
    761c:	9a 85       	ldd	r25, Y+10	; 0x0a
    761e:	20 e0       	ldi	r18, 0x00	; 0
    7620:	3f ef       	ldi	r19, 0xFF	; 255
    7622:	4f e7       	ldi	r20, 0x7F	; 127
    7624:	57 e4       	ldi	r21, 0x47	; 71
    7626:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    762a:	18 16       	cp	r1, r24
    762c:	4c f5       	brge	.+82     	; 0x7680 <main+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    762e:	6b 85       	ldd	r22, Y+11	; 0x0b
    7630:	7c 85       	ldd	r23, Y+12	; 0x0c
    7632:	8d 85       	ldd	r24, Y+13	; 0x0d
    7634:	9e 85       	ldd	r25, Y+14	; 0x0e
    7636:	20 e0       	ldi	r18, 0x00	; 0
    7638:	30 e0       	ldi	r19, 0x00	; 0
    763a:	40 e2       	ldi	r20, 0x20	; 32
    763c:	51 e4       	ldi	r21, 0x41	; 65
    763e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7642:	dc 01       	movw	r26, r24
    7644:	cb 01       	movw	r24, r22
    7646:	bc 01       	movw	r22, r24
    7648:	cd 01       	movw	r24, r26
    764a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    764e:	dc 01       	movw	r26, r24
    7650:	cb 01       	movw	r24, r22
    7652:	9e 83       	std	Y+6, r25	; 0x06
    7654:	8d 83       	std	Y+5, r24	; 0x05
    7656:	0f c0       	rjmp	.+30     	; 0x7676 <main+0x200>
    7658:	88 ec       	ldi	r24, 0xC8	; 200
    765a:	90 e0       	ldi	r25, 0x00	; 0
    765c:	9c 83       	std	Y+4, r25	; 0x04
    765e:	8b 83       	std	Y+3, r24	; 0x03
    7660:	8b 81       	ldd	r24, Y+3	; 0x03
    7662:	9c 81       	ldd	r25, Y+4	; 0x04
    7664:	01 97       	sbiw	r24, 0x01	; 1
    7666:	f1 f7       	brne	.-4      	; 0x7664 <main+0x1ee>
    7668:	9c 83       	std	Y+4, r25	; 0x04
    766a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    766c:	8d 81       	ldd	r24, Y+5	; 0x05
    766e:	9e 81       	ldd	r25, Y+6	; 0x06
    7670:	01 97       	sbiw	r24, 0x01	; 1
    7672:	9e 83       	std	Y+6, r25	; 0x06
    7674:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7676:	8d 81       	ldd	r24, Y+5	; 0x05
    7678:	9e 81       	ldd	r25, Y+6	; 0x06
    767a:	00 97       	sbiw	r24, 0x00	; 0
    767c:	69 f7       	brne	.-38     	; 0x7658 <main+0x1e2>
    767e:	14 c0       	rjmp	.+40     	; 0x76a8 <main+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7680:	6f 81       	ldd	r22, Y+7	; 0x07
    7682:	78 85       	ldd	r23, Y+8	; 0x08
    7684:	89 85       	ldd	r24, Y+9	; 0x09
    7686:	9a 85       	ldd	r25, Y+10	; 0x0a
    7688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    768c:	dc 01       	movw	r26, r24
    768e:	cb 01       	movw	r24, r22
    7690:	9e 83       	std	Y+6, r25	; 0x06
    7692:	8d 83       	std	Y+5, r24	; 0x05
    7694:	8d 81       	ldd	r24, Y+5	; 0x05
    7696:	9e 81       	ldd	r25, Y+6	; 0x06
    7698:	9a 83       	std	Y+2, r25	; 0x02
    769a:	89 83       	std	Y+1, r24	; 0x01
    769c:	89 81       	ldd	r24, Y+1	; 0x01
    769e:	9a 81       	ldd	r25, Y+2	; 0x02
    76a0:	01 97       	sbiw	r24, 0x01	; 1
    76a2:	f1 f7       	brne	.-4      	; 0x76a0 <main+0x22a>
    76a4:	9a 83       	std	Y+2, r25	; 0x02
    76a6:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(100);
                UART_voidSendStringSync("HTTP/1.1 200 OK\r\n\r\nCommand Executed");
    76a8:	85 e0       	ldi	r24, 0x05	; 5
    76aa:	91 e0       	ldi	r25, 0x01	; 1
    76ac:	0e 94 19 06 	call	0xc32	; 0xc32 <UART_voidSendStringSync>
    76b0:	04 cf       	rjmp	.-504    	; 0x74ba <main+0x44>

000076b2 <__mulsi3>:
    76b2:	62 9f       	mul	r22, r18
    76b4:	d0 01       	movw	r26, r0
    76b6:	73 9f       	mul	r23, r19
    76b8:	f0 01       	movw	r30, r0
    76ba:	82 9f       	mul	r24, r18
    76bc:	e0 0d       	add	r30, r0
    76be:	f1 1d       	adc	r31, r1
    76c0:	64 9f       	mul	r22, r20
    76c2:	e0 0d       	add	r30, r0
    76c4:	f1 1d       	adc	r31, r1
    76c6:	92 9f       	mul	r25, r18
    76c8:	f0 0d       	add	r31, r0
    76ca:	83 9f       	mul	r24, r19
    76cc:	f0 0d       	add	r31, r0
    76ce:	74 9f       	mul	r23, r20
    76d0:	f0 0d       	add	r31, r0
    76d2:	65 9f       	mul	r22, r21
    76d4:	f0 0d       	add	r31, r0
    76d6:	99 27       	eor	r25, r25
    76d8:	72 9f       	mul	r23, r18
    76da:	b0 0d       	add	r27, r0
    76dc:	e1 1d       	adc	r30, r1
    76de:	f9 1f       	adc	r31, r25
    76e0:	63 9f       	mul	r22, r19
    76e2:	b0 0d       	add	r27, r0
    76e4:	e1 1d       	adc	r30, r1
    76e6:	f9 1f       	adc	r31, r25
    76e8:	bd 01       	movw	r22, r26
    76ea:	cf 01       	movw	r24, r30
    76ec:	11 24       	eor	r1, r1
    76ee:	08 95       	ret

000076f0 <__udivmodsi4>:
    76f0:	a1 e2       	ldi	r26, 0x21	; 33
    76f2:	1a 2e       	mov	r1, r26
    76f4:	aa 1b       	sub	r26, r26
    76f6:	bb 1b       	sub	r27, r27
    76f8:	fd 01       	movw	r30, r26
    76fa:	0d c0       	rjmp	.+26     	; 0x7716 <__udivmodsi4_ep>

000076fc <__udivmodsi4_loop>:
    76fc:	aa 1f       	adc	r26, r26
    76fe:	bb 1f       	adc	r27, r27
    7700:	ee 1f       	adc	r30, r30
    7702:	ff 1f       	adc	r31, r31
    7704:	a2 17       	cp	r26, r18
    7706:	b3 07       	cpc	r27, r19
    7708:	e4 07       	cpc	r30, r20
    770a:	f5 07       	cpc	r31, r21
    770c:	20 f0       	brcs	.+8      	; 0x7716 <__udivmodsi4_ep>
    770e:	a2 1b       	sub	r26, r18
    7710:	b3 0b       	sbc	r27, r19
    7712:	e4 0b       	sbc	r30, r20
    7714:	f5 0b       	sbc	r31, r21

00007716 <__udivmodsi4_ep>:
    7716:	66 1f       	adc	r22, r22
    7718:	77 1f       	adc	r23, r23
    771a:	88 1f       	adc	r24, r24
    771c:	99 1f       	adc	r25, r25
    771e:	1a 94       	dec	r1
    7720:	69 f7       	brne	.-38     	; 0x76fc <__udivmodsi4_loop>
    7722:	60 95       	com	r22
    7724:	70 95       	com	r23
    7726:	80 95       	com	r24
    7728:	90 95       	com	r25
    772a:	9b 01       	movw	r18, r22
    772c:	ac 01       	movw	r20, r24
    772e:	bd 01       	movw	r22, r26
    7730:	cf 01       	movw	r24, r30
    7732:	08 95       	ret

00007734 <__prologue_saves__>:
    7734:	2f 92       	push	r2
    7736:	3f 92       	push	r3
    7738:	4f 92       	push	r4
    773a:	5f 92       	push	r5
    773c:	6f 92       	push	r6
    773e:	7f 92       	push	r7
    7740:	8f 92       	push	r8
    7742:	9f 92       	push	r9
    7744:	af 92       	push	r10
    7746:	bf 92       	push	r11
    7748:	cf 92       	push	r12
    774a:	df 92       	push	r13
    774c:	ef 92       	push	r14
    774e:	ff 92       	push	r15
    7750:	0f 93       	push	r16
    7752:	1f 93       	push	r17
    7754:	cf 93       	push	r28
    7756:	df 93       	push	r29
    7758:	cd b7       	in	r28, 0x3d	; 61
    775a:	de b7       	in	r29, 0x3e	; 62
    775c:	ca 1b       	sub	r28, r26
    775e:	db 0b       	sbc	r29, r27
    7760:	0f b6       	in	r0, 0x3f	; 63
    7762:	f8 94       	cli
    7764:	de bf       	out	0x3e, r29	; 62
    7766:	0f be       	out	0x3f, r0	; 63
    7768:	cd bf       	out	0x3d, r28	; 61
    776a:	09 94       	ijmp

0000776c <__epilogue_restores__>:
    776c:	2a 88       	ldd	r2, Y+18	; 0x12
    776e:	39 88       	ldd	r3, Y+17	; 0x11
    7770:	48 88       	ldd	r4, Y+16	; 0x10
    7772:	5f 84       	ldd	r5, Y+15	; 0x0f
    7774:	6e 84       	ldd	r6, Y+14	; 0x0e
    7776:	7d 84       	ldd	r7, Y+13	; 0x0d
    7778:	8c 84       	ldd	r8, Y+12	; 0x0c
    777a:	9b 84       	ldd	r9, Y+11	; 0x0b
    777c:	aa 84       	ldd	r10, Y+10	; 0x0a
    777e:	b9 84       	ldd	r11, Y+9	; 0x09
    7780:	c8 84       	ldd	r12, Y+8	; 0x08
    7782:	df 80       	ldd	r13, Y+7	; 0x07
    7784:	ee 80       	ldd	r14, Y+6	; 0x06
    7786:	fd 80       	ldd	r15, Y+5	; 0x05
    7788:	0c 81       	ldd	r16, Y+4	; 0x04
    778a:	1b 81       	ldd	r17, Y+3	; 0x03
    778c:	aa 81       	ldd	r26, Y+2	; 0x02
    778e:	b9 81       	ldd	r27, Y+1	; 0x01
    7790:	ce 0f       	add	r28, r30
    7792:	d1 1d       	adc	r29, r1
    7794:	0f b6       	in	r0, 0x3f	; 63
    7796:	f8 94       	cli
    7798:	de bf       	out	0x3e, r29	; 62
    779a:	0f be       	out	0x3f, r0	; 63
    779c:	cd bf       	out	0x3d, r28	; 61
    779e:	ed 01       	movw	r28, r26
    77a0:	08 95       	ret

000077a2 <memset>:
    77a2:	dc 01       	movw	r26, r24
    77a4:	01 c0       	rjmp	.+2      	; 0x77a8 <memset+0x6>
    77a6:	6d 93       	st	X+, r22
    77a8:	41 50       	subi	r20, 0x01	; 1
    77aa:	50 40       	sbci	r21, 0x00	; 0
    77ac:	e0 f7       	brcc	.-8      	; 0x77a6 <memset+0x4>
    77ae:	08 95       	ret

000077b0 <strstr>:
    77b0:	fb 01       	movw	r30, r22
    77b2:	51 91       	ld	r21, Z+
    77b4:	55 23       	and	r21, r21
    77b6:	a9 f0       	breq	.+42     	; 0x77e2 <strstr+0x32>
    77b8:	bf 01       	movw	r22, r30
    77ba:	dc 01       	movw	r26, r24
    77bc:	4d 91       	ld	r20, X+
    77be:	45 17       	cp	r20, r21
    77c0:	41 11       	cpse	r20, r1
    77c2:	e1 f7       	brne	.-8      	; 0x77bc <strstr+0xc>
    77c4:	59 f4       	brne	.+22     	; 0x77dc <strstr+0x2c>
    77c6:	cd 01       	movw	r24, r26
    77c8:	01 90       	ld	r0, Z+
    77ca:	00 20       	and	r0, r0
    77cc:	49 f0       	breq	.+18     	; 0x77e0 <strstr+0x30>
    77ce:	4d 91       	ld	r20, X+
    77d0:	40 15       	cp	r20, r0
    77d2:	41 11       	cpse	r20, r1
    77d4:	c9 f3       	breq	.-14     	; 0x77c8 <strstr+0x18>
    77d6:	fb 01       	movw	r30, r22
    77d8:	41 11       	cpse	r20, r1
    77da:	ef cf       	rjmp	.-34     	; 0x77ba <strstr+0xa>
    77dc:	81 e0       	ldi	r24, 0x01	; 1
    77de:	90 e0       	ldi	r25, 0x00	; 0
    77e0:	01 97       	sbiw	r24, 0x01	; 1
    77e2:	08 95       	ret

000077e4 <_exit>:
    77e4:	f8 94       	cli

000077e6 <__stop_program>:
    77e6:	ff cf       	rjmp	.-2      	; 0x77e6 <__stop_program>
