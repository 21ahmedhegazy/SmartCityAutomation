;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;unsigned char    *AtCommand(unsigned char    *command, const int timeout, int debug);
;unsigned char    *AtData(unsigned char    *data, const int timeout, int debug);
;void CIPData(unsigned char    *connectionId, unsigned char    *data);
;void init_esp(void);
;void test()
; 0000 001E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001F Out_Up=1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0020 Out_Dn=1;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0021 delay_ms(300);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0022 Out_Up=0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0023 Out_Dn=0;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0024 }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;interrupt [17] void timer0_ovf_isr(void)
; 0000 0027 {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0028 // Reinitialize Timer 0 value
; 0000 0029 TCNT0=0x83;  //TCNT0=0x53;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002A // Place your code here
; 0000 002B millis++;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 002C }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;int esp8266_available(void) {
; 0000 002E int esp8266_available(void) {
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 002F if (UCSR0A & (1 << RXC0))
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0030 {
; 0000 0031 return 1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0032 
; 0000 0033 }
; 0000 0034 else
;PCODE: $0000002D VOL: 0
; 0000 0035 {
; 0000 0036 return 0;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0037 }
;PCODE: $00000030 VOL: 0
; 0000 0038 }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;void init_all()
; 0000 003B {
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 003C // Crystal Oscillator division factor: 1
; 0000 003D #pragma optsize-
; 0000 003E CLKPR=0x80;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 003F CLKPR=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0040 #ifdef _OPTIMIZE_SIZE_
; 0000 0041 #pragma optsize+
; 0000 0042 #endif
; 0000 0043 
; 0000 0044 // Input/Output Ports initialization
; 0000 0045 // Port B initialization
; 0000 0046 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0047 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0048 PORTB=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0049 DDRB=0x04;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 004A 
; 0000 004B // Port C initialization
; 0000 004C // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 004D // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 004E PORTC=0x39;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004F DDRC=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0050 
; 0000 0051 // Port D initialization
; 0000 0052 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=Out Func1=In Func0=In
; 0000 0053 // State7=0 State6=0 State5=0 State4=0 State3=P State2=0 State1=T State0=T
; 0000 0054 PORTD=0x08;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0055 DDRD=0xF4;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0056 
; 0000 0057 // Timer/Counter 0 initialization
; 0000 0058 // Clock source: System Clock 8M-11.059M / 64
; 0000 0059 // Clock value: 125.000 kHz - 172.800 kHz
; 0000 005A TCCR0A=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 005B TCCR0B=0x03;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 005C TCNT0=0x83;  //0x53
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 005D OCR0A=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 005E OCR0B=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 005F 
; 0000 0060 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0061 TIMSK0=0x01;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0062 
; 0000 0063 // Timer/Counter 1 Interrupt(s) initialization
; 0000 0064 TIMSK1=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0065 
; 0000 0066 // Timer/Counter 2 Interrupt(s) initialization
; 0000 0067 TIMSK2=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0068 
; 0000 0069 // USART initialization
; 0000 006A // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 006B // USART Receiver: On
; 0000 006C // USART Transmitter: On
; 0000 006D // USART Mode: Asynchronous
; 0000 006E // USART Baud Rate: 115200
; 0000 006F UCSR0A=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0070 UCSR0B=0x18;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0071 UCSR0C=0x06;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0072 UBRR0H=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0073 UBRR0L=0x05;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0074 
; 0000 0075 // ADC initialization
; 0000 0076 // ADC disabled
; 0000 0077 ADCSRA=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0078 
; 0000 0079 // Watchdog Timer initialization
; 0000 007A // Watchdog Timer Prescaler: OSC/256k
; 0000 007B // Watchdog Timer interrupt: Off
; 0000 007C #pragma optsize-
; 0000 007D #asm("wdr")
;PCODE: $00000061 VOL: 0
; 0000 007E WDTCSR=0x1F;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 007F WDTCSR=0x0F; // 2 sec
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0080 #ifdef _OPTIMIZE_SIZE_
; 0000 0081 #pragma optsize+
; 0000 0082 #endif
; 0000 0083 
; 0000 0084 // Global enable interrupts
; 0000 0085 #asm("sei")
;PCODE: $00000066 VOL: 0
; 0000 0086 }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;void main(void)
; 0000 0089 {
;PCODE: $00000069 VOL: 0
; 0000 008A uchar idx[1];
; 0000 008B uchar buff[50];
; 0000 008C uchar stat[50];
; 0000 008D ulong currentMillis=0;
; 0000 008E //Out_R=1;
; 0000 008F 
; 0000 0090 init_all();
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;	idx -> Y+104
;	buff -> Y+54
;	stat -> Y+4
;	currentMillis -> Y+0
;PCODE: $00000073 VOL: 0
; 0000 0091 init_esp();
;PCODE: $00000074 VOL: 0
; 0000 0092 ////esp8266.setTimeout(300);
; 0000 0093 
; 0000 0094 if(DEBUG)
; 0000 0095 {
; 0000 0096 //Serial.println("start");
; 0000 0097 }
; 0000 0098 
; 0000 0099 while(1)
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 009A {
; 0000 009B currentMillis = millis;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 009C wdt_reset();
;PCODE: $00000079 VOL: 0
; 0000 009D 
; 0000 009E if(esp8266_available())
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 009F {
; 0000 00A0 //delay_ms(200);
; 0000 00A1 //+IPD,0,4:o=u
; 0000 00A2 
; 0000 00A3 esp8266_read(buff,50);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00A4 if(strstr(buff, "+IPD"))
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00A5 {
; 0000 00A6 if(DEBUG)
; 0000 00A7 {
; 0000 00A8 //Serial.println("available");
; 0000 00A9 }
; 0000 00AA sprintf(idx,"%c",*(strstr(buff, "+IPD")+11));
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00AB if(idx[0]=='u')
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00AC {
; 0000 00AD sprintf(idx,"%c",*(strstr(buff, "+IPD")+5));
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00AE CIPData(idx,"FB :u OK");
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00AF Out_Up=1;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00B0 Out_Dn=0;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00B1 }
; 0000 00B2 else if(idx[0]=='d')
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00B3 {
; 0000 00B4 sprintf(idx,"%c",*(strstr(buff, "+IPD")+5));
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00B5 CIPData(idx,"FB :d OK");
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00B6 Out_Up=0;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00B7 Out_Dn=1;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00B8 }
; 0000 00B9 else if(idx[0]=='s')
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00BA {
; 0000 00BB sprintf(idx,"%c",*(strstr(buff, "+IPD")+5));
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00BC CIPData(idx,"FB :s OK");
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00BD Out_Up=0;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00BE Out_Dn=0;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00BF }
; 0000 00C0 }
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00C1 }
;PCODE: $000000F9 VOL: 0
; 0000 00C2 else if(((unsigned long)(currentMillis - previousMillis) >= interval))
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00C3 {
; 0000 00C4 previousMillis = currentMillis;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00C5 strcpy(stat,AtCommand("AT+CIPSTATUS\r\n",100,DEBUG));
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00C6 
; 0000 00C7 if(strstr(stat,":5") || strlen(stat) ==0)
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00C8 {
; 0000 00C9 AtCommand("AT+RST\r\n",10000,DEBUG);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00CA init_esp();
;PCODE: $00000127 VOL: 0
; 0000 00CB 
; 0000 00CC strcpy(stat,AtCommand("AT+CIPSTATUS\r\n",100,DEBUG));
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00CD if(strstr(stat,":5") || strlen(stat) ==0)
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00CE {
; 0000 00CF Out_R=0; delay_ms(1000); wdt_reset();
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00D0 Out_R=1; delay_ms(1000); wdt_reset();
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00D1 
; 0000 00D2 init_esp();
;PCODE: $0000014B VOL: 0
; 0000 00D3 }
; 0000 00D4 }
;PCODE: $0000014C VOL: 0
; 0000 00D5 else if(strstr(stat,":2"))
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00D6 {
; 0000 00D7 AtCommand("AT+CIFSR\r\n",100,DEBUG); // get ip address
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00D8 AtCommand("AT+CWJAP?\r\n",100,DEBUG);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00D9 
; 0000 00DA AtCommand("AT+CIPMUX=1\r\n",150,DEBUG); // configure for multiple connections
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00DB AtCommand("AT+CIPSERVER=1,1001\r\n",150,DEBUG);// turn on server on port 80
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00DC }
; 0000 00DD else// if( stat.indexOf(":3") > -1 || stat.indexOf(":4") > -1)
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00DE {
; 0000 00DF }
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00E0 }
; 0000 00E1 }
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00E2 }
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0

	.DSEG
_0x13:
	.BYTE 0x9F
;unsigned char    *AtCommand(unsigned char    *command, const int timeout, int debug)
; 0000 00E5 {

	.CSEG
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00E6 uchar response[100]="";
; 0000 00E7 ulong time = millis;
; 0000 00E8 bit ok = 0;
; 0000 00E9 esp8266_print(command);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;	*command -> Y+108
;	timeout -> Y+106
;	debug -> Y+104
;	response -> Y+4
;	time -> Y+0
;	ok -> R15.0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00EA 
; 0000 00EB if(debug)
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 00EC {
; 0000 00ED //Serial.print(command);
; 0000 00EE }
; 0000 00EF 
; 0000 00F0 while(  !ok && (time+timeout) > millis )
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 00F1 {
; 0000 00F2 wdt_reset();
;PCODE: $000001A2 VOL: 0
; 0000 00F3 if(esp8266_available())
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 00F4 {
; 0000 00F5 esp8266_read(response,50);
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 00F6 }
; 0000 00F7 
; 0000 00F8 if(strstr(command,"CIPSEND"))
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 00F9 {
; 0000 00FA if(strstr(response,">"))
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 00FB ok = 1;
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 00FC }
;PCODE: $000001BD VOL: 0
; 0000 00FD //        else if(strstr(command,"CIPSTATUS") )
; 0000 00FE //        {
; 0000 00FF //            if(strstr(response,"STATUS") )
; 0000 0100 //            ok = 1;
; 0000 0101 //        }
; 0000 0102 else
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 0103 {
; 0000 0104 if(strstr(response,"OK")  || strstr(response,"no"))
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 0105 {
; 0000 0106 ok = 1;
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 0107 }
; 0000 0108 }
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0109 }
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 010A 
; 0000 010B if(debug)
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 010C {
; 0000 010D //Serial.print(response);
; 0000 010E }
; 0000 010F return response;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 0110 }
;PCODE: $000001DE VOL: 0

	.DSEG
_0x3F:
	.BYTE 0x10
;unsigned char    *AtData(unsigned char    *data,  const int timeout, int debug)
; 0000 0113 {

	.CSEG
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 0114 uchar response[50] = "";
; 0000 0115 bit ok = 0;
; 0000 0116 ulong time = millis;
; 0000 0117 
; 0000 0118 esp8266_print(data);
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;	*data -> Y+58
;	timeout -> Y+56
;	debug -> Y+54
;	response -> Y+4
;	ok -> R15.0
;	time -> Y+0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 0119 
; 0000 011A if(debug)
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 011B {
; 0000 011C //Serial.println("\r\nFeedBack:");
; 0000 011D //Serial.write(data,dataSize);
; 0000 011E }
; 0000 011F 
; 0000 0120 while( (time+timeout) > millis && !ok)
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0121 {
; 0000 0122 wdt_reset();
;PCODE: $000001FF VOL: 0
; 0000 0123 if(esp8266_available())
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0124 {
; 0000 0125 esp8266_read(response,10);
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 0126 }
; 0000 0127 
; 0000 0128 if(strstr(response,"OK"))
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 0129 {
; 0000 012A //Flash();
; 0000 012B ok = 1;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 012C }
; 0000 012D }
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 012E 
; 0000 012F if(debug)
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 0130 {
; 0000 0131 //Serial.print(response);
; 0000 0132 }
; 0000 0133 
; 0000 0134 return response;
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 0135 }
;PCODE: $0000021D VOL: 0

	.DSEG
_0x4F:
	.BYTE 0x3
;void CIPData(unsigned char    *connectionId, unsigned char    *data)
; 0000 0138 {

	.CSEG
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 0139 uchar buff[50]=""; //+IPD,0,4:o=u
; 0000 013A sprintf(buff,"AT+CIPSEND=%s,%d\r\n",connectionId,strlen(data));
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;	*connectionId -> Y+52
;	*data -> Y+50
;	buff -> Y+0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 013B AtCommand(buff,200,DEBUG);//****1000
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 013C 
; 0000 013D AtData(data,200,DEBUG);//****1000
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 013E 
; 0000 013F sprintf(buff,"AT+CIPCLOSE=%s\r\n",connectionId);
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 0140 AtCommand(buff,200,DEBUG); // close connection***1000
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 0141 }
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;void init_esp(void)
; 0000 0144 {
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 0145 //AT+CWJAP?
; 0000 0146 //AtCommand("AT+CWAUTOCONN?\r\n",100,DEBUG);
; 0000 0147 //AtCommand("AT+CWMODE?\r\n",100,DEBUG);
; 0000 0148 //AtCommand("AT+CIPSTA_DEF?\r\n",100,DEBUG);
; 0000 0149 //AtCommand("AT+RFPOWER=82",100,DEBUG);
; 0000 014A 
; 0000 014B AtCommand("ATE0\r\n",100,DEBUG);
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 014C 
; 0000 014D AtCommand("AT+CWMODE=1\r\n",1000,DEBUG); // configure as access point
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 014E AtCommand("AT+CWAUTOCONN=1\r\n",100,DEBUG);
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 014F AtCommand("AT+CWJAP_DEF=\"SmartLife\",\"Life@2020\"\r\n",10000,DEBUG);//,\"AC:5F:3E:48:17:E7\"   // \"Broo\",\"mrb131113\",\"60:83:34:29:2d:2c\" -- \"TP-LINK_7DEADE\",\"maf123456\",\"c4:e9:84:7d:ea:de\"
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 0150 AtCommand("AT+CIPSTA_DEF=\"192.168.1.150\",\"192.168.1.1\",\"255.255.255.0\"\r\n",500,DEBUG);
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 0151 
; 0000 0152 AtCommand("AT+CIPMUX=1\r\n",150,DEBUG); // configure for multiple connections
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 0153 AtCommand("AT+CIPSERVER=1,1001\r\n",150,DEBUG); // turn on server on port 1001
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 0154 AtCommand("AT+CIPSTO=10\r\n",150,DEBUG);
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 0155 
; 0000 0156 AtCommand("AT+CIPSTATUS\r\n",100,DEBUG); // check if =2 got ip or =5 not
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 0157 AtCommand("AT+CIFSR\r\n",100,DEBUG); // get ip address
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 0158 AtCommand("AT+CWJAP?\r\n",100,DEBUG);
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 0159 
; 0000 015A }
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0

	.DSEG
_0x52:
	.BYTE 0xE5
