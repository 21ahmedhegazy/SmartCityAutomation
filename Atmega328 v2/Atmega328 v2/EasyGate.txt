#include <mega8.h>
#include <delay.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <bcd.h>

 //--LCD-------------------------------------------
// Alphanumeric LCD initialization
// Connections specified in the
//  A0  - PORTC Bit 1   24
// _RES - PORTC Bit 2   25
// _CS1 - PORTC Bit 3   26
// SIN  - PORTC Bit 4   27
// SCLK - PORTC Bit 5   28

#define uchar unsigned char // 0~255
#define uint unsigned int   // 0~65535

#define  A0          PORTC.1
#define  _RST        PORTC.2
#define  _CS         PORTC.3
#define  SID         PORTC.4
#define  SCLK        PORTC.5

#define  LEd         PORTC.0 //

//--USART-------------------------------------------
#ifndef RXB8
#define RXB8 1
#endif

#ifndef TXB8
#define TXB8 0
#endif

#ifndef UPE
#define UPE 2
#endif

#ifndef DOR
#define DOR 3
#endif

#ifndef FE
#define FE 4
#endif

#ifndef UDRE
#define UDRE 5
#endif

#ifndef RXC
#define RXC 7
#endif

#define FRAMING_ERROR (1<<FE)
#define PARITY_ERROR (1<<UPE)
#define DATA_OVERRUN (1<<DOR)
#define DATA_REGISTER_EMPTY (1<<UDRE)
#define RX_COMPLETE (1<<RXC)

// USART Receiver buffer
#define RX_BUFFER_SIZE 64
char rx_buffer[RX_BUFFER_SIZE];
char buf[RX_BUFFER_SIZE];
unsigned char rx_wr_index,rx_rd_index,rx_counter;

// This flag is set on USART Receiver buffer overflow
bit rx_buffer_overflow;
//-----------------------------------
// dispaly data (128x64)
//-----------------------------------
flash const uchar img[]={
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xE1, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x01, 0xF1, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x03, 0xFD, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0F, 0x9F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x1E, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x7C, 0x03, 0xF0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE7, 0x00, 0x02, 0x00, 0x00,
    0x00, 0xF0, 0x01, 0xF0, 0x06, 0x40, 0x00, 0x00, 0x00, 0x60, 0xF0, 0xE6, 0x00, 0x0C, 0x80, 0x00,

    0x03, 0xE0, 0x00, 0x78, 0x06, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF0, 0x4E, 0x00, 0x1C, 0x00, 0x00,
    0x07, 0x80, 0x00, 0x3C, 0x0F, 0x0C, 0xC6, 0x1E, 0x73, 0xF0, 0xF0, 0xFF, 0x38, 0x1C, 0x46, 0x00,
    0x1F, 0x00, 0x00, 0x1F, 0x0F, 0x0D, 0xF7, 0x27, 0x76, 0xE0, 0xF0, 0xEE, 0x6C, 0x3C, 0x1D, 0x00,
    0x1C, 0x00, 0x00, 0x07, 0x0F, 0x8C, 0xE7, 0x07, 0x78, 0xE0, 0xF0, 0xEE, 0x6C, 0x3C, 0x1C, 0x00,
    0x18, 0x00, 0x00, 0x01, 0x07, 0xCC, 0xE7, 0x07, 0x70, 0xE0, 0xF0, 0xEE, 0xEE, 0x3C, 0x1C, 0x80,
    0x03, 0xFF, 0xFF, 0xFC, 0x07, 0xCC, 0xE7, 0x3F, 0x70, 0xE0, 0xF0, 0xEE, 0xEE, 0x3C, 0x3C, 0x00,
    0x07, 0xFF, 0xFF, 0xFE, 0x03, 0xCC, 0xE7, 0x77, 0x70, 0xE0, 0xF0, 0xEE, 0xFE, 0x3C, 0x3C, 0x00,
    0x07, 0xFF, 0xFF, 0xFE, 0x03, 0xEC, 0xE7, 0x77, 0x70, 0xE0, 0xF0, 0xEE, 0xE0, 0x3C, 0x3C, 0x00,
    0x0F, 0xFF, 0xFF, 0xFE, 0x01, 0xEC, 0xE7, 0x77, 0x70, 0xE0, 0xF0, 0xEE, 0xE0, 0x1C, 0x5C, 0xB8,
    0x0F, 0xFF, 0xFF, 0xFE, 0x09, 0xCC, 0xE7, 0x77, 0x70, 0xE8, 0xF0, 0xEE, 0x60, 0x1C, 0x1C, 0x38,
    0x0F, 0xCF, 0xC7, 0xFE, 0x04, 0xCC, 0xE7, 0x77, 0x70, 0xF0, 0xF0, 0xEE, 0x64, 0x0C, 0x8D, 0x38,
    0x0F, 0xCF, 0xC7, 0xFE, 0x03, 0x8E, 0xE7, 0x37, 0x70, 0x60, 0xFE, 0xEE, 0x38, 0x07, 0x06, 0x30,
    0x0F, 0xCF, 0xC7, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0F, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0F, 0x07, 0x83, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0F, 0x03, 0x01, 0xFE, 0x03, 0x00, 0x00, 0x00, 0x00, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,

    0x0F, 0x03, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0F, 0x02, 0x45, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0E, 0x00, 0xC5, 0xFE, 0x06, 0x61, 0x08, 0x08, 0x92, 0xC6, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0E, 0x84, 0xC4, 0xFE, 0x02, 0x22, 0xA8, 0x94, 0x86, 0xC4, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0E, 0x04, 0xC4, 0xCE, 0x02, 0x82, 0xA8, 0x95, 0x04, 0x04, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0E, 0x01, 0xC4, 0xCE, 0x0A, 0xA3, 0xB0, 0x9D, 0x24, 0x84, 0xA5, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0F, 0x03, 0xC6, 0x3E, 0x04, 0x42, 0xA0, 0x55, 0x04, 0x04, 0xB2, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0F, 0x03, 0xD7, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0E, 0x01, 0xD7, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0F, 0x87, 0xD7, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0F, 0x87, 0xD7, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0F, 0x87, 0xD7, 0xCE, 0x00, 0x1C, 0x00, 0x07, 0x00, 0x03, 0x80, 0x00, 0xE0, 0x00, 0x70, 0x00,
    0x0F, 0x87, 0xD7, 0xCE, 0x00, 0x1C, 0x00, 0x07, 0x00, 0x03, 0x80, 0x00, 0xE0, 0x00, 0x78, 0x00,
    0x0F, 0x87, 0xD7, 0xCE, 0x00, 0x1E, 0x00, 0x0F, 0x00, 0x03, 0xC0, 0x01, 0xE0, 0x00, 0x78, 0x00,
    0x0F, 0x87, 0xD7, 0xCE, 0x00, 0x3E, 0x00, 0x0F, 0x80, 0x07, 0xC0, 0x01, 0xF0, 0x00, 0x78, 0x00,
    0x0F, 0x87, 0xD7, 0xCE, 0x00, 0x7F, 0x00, 0x1F, 0xC0, 0x07, 0xE0, 0x03, 0xF8, 0x00, 0xFC, 0x00,

    0x0F, 0xFF, 0xFF, 0xFE, 0x00, 0xF7, 0x80, 0x3D, 0xE0, 0x1E, 0xF0, 0x07, 0xBC, 0x03, 0xDE, 0x00,
    0x0F, 0xFF, 0xFF, 0xFE, 0x03, 0xF3, 0xE0, 0xF9, 0xF0, 0x3E, 0x7C, 0x1F, 0x3E, 0x07, 0xCF, 0x80,
    0x0F, 0xFF, 0xFF, 0xFE, 0x0F, 0xC1, 0xFF, 0xF0, 0xFF, 0xFC, 0x3F, 0xFE, 0x0F, 0xFF, 0x87, 0xF8,
    0x07, 0xFF, 0xFF, 0xFE, 0x0F, 0x80, 0x7F, 0xC0, 0x3F, 0xF0, 0x0F, 0xF8, 0x07, 0xFE, 0x01, 0xF8,
    0x07, 0xFF, 0xFF, 0xFE, 0x0C, 0x00, 0x1F, 0x00, 0x0F, 0x80, 0x03, 0xE0, 0x00, 0xF8, 0x00, 0x78,
    0x03, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
flash uchar Font[]={
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,      // Code for char
    0x00, 0x00, 0x06, 0x5F, 0x06, 0x00,      // Code for char !
    0x00, 0x07, 0x03, 0x00, 0x07, 0x03,      // Code for char "
    0x00, 0x24, 0x7E, 0x24, 0x7E, 0x24,      // Code for char #
    0x00, 0x24, 0x2B, 0x6A, 0x12, 0x00,      // Code for char $
    0x00, 0x63, 0x13, 0x08, 0x64, 0x63,      // Code for char %
    0x00, 0x36, 0x49, 0x56, 0x20, 0x50,      // Code for char &
    0x00, 0x00, 0x07, 0x03, 0x00, 0x00,      // Code for char '
    0x00, 0x00, 0x3E, 0x41, 0x00, 0x00,      // Code for char (
    0x00, 0x00, 0x41, 0x3E, 0x00, 0x00,      // Code for char )
    0x00, 0x08, 0x3E, 0x1C, 0x3E, 0x08,      // Code for char *
    0x00, 0x08, 0x08, 0x3E, 0x08, 0x08,      // Code for char +
    0x00, 0x00, 0xE0, 0x60, 0x00, 0x00,      // Code for char ,
    0x00, 0x08, 0x08, 0x08, 0x08, 0x08,      // Code for char -
    0x00, 0x00, 0x60, 0x60, 0x00, 0x00,      // Code for char .
    0x00, 0x20, 0x10, 0x08, 0x04, 0x02,      // Code for char /

    0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E,      // Code for char 0  - 16
    0x00, 0x00, 0x42, 0x7F, 0x40, 0x00,      // Code for char 1
    0x00, 0x62, 0x51, 0x49, 0x49, 0x46,      // Code for char 2
    0x00, 0x22, 0x49, 0x49, 0x49, 0x36,      // Code for char 3
    0x00, 0x18, 0x14, 0x12, 0x7F, 0x10,      // Code for char 4
    0x00, 0x2F, 0x49, 0x49, 0x49, 0x31,      // Code for char 5
    0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30,      // Code for char 6
    0x00, 0x01, 0x71, 0x09, 0x05, 0x03,      // Code for char 7
    0x00, 0x36, 0x49, 0x49, 0x49, 0x36,      // Code for char 8
    0x00, 0x06, 0x49, 0x49, 0x29, 0x1E,      // Code for char 9

    0x00, 0x00, 0x6C, 0x6C, 0x00, 0x00,      // Code for char : - 26
    0x00, 0x00, 0xEC, 0x6C, 0x00, 0x00,      // Code for char ;
    0x00, 0x08, 0x14, 0x22, 0x41, 0x00,      // Code for char <
    0x00, 0x24, 0x24, 0x24, 0x24, 0x24,      // Code for char =
    0x00, 0x00, 0x41, 0x22, 0x14, 0x08,      // Code for char >
    0x00, 0x02, 0x01, 0x59, 0x09, 0x06,      // Code for char ?
    0x00, 0x3E, 0x41, 0x5D, 0x55, 0x1E,      // Code for char @

    0x00, 0x7E, 0x11, 0x11, 0x11, 0x7E,      // Code for char A - 33
    0x00, 0x7F, 0x49, 0x49, 0x49, 0x36,      // Code for char B
    0x00, 0x3E, 0x41, 0x41, 0x41, 0x22,      // Code for char C
    0x00, 0x7F, 0x41, 0x41, 0x41, 0x3E,      // Code for char D
    0x00, 0x7F, 0x49, 0x49, 0x49, 0x41,      // Code for char E
    0x00, 0x7F, 0x09, 0x09, 0x09, 0x01,      // Code for char F
    0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A,      // Code for char G
    0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F,      // Code for char H
    0x00, 0x00, 0x41, 0x7F, 0x41, 0x00,      // Code for char I
    0x00, 0x30, 0x40, 0x40, 0x40, 0x3F,      // Code for char J
    0x00, 0x7F, 0x08, 0x14, 0x22, 0x41,      // Code for char K
    0x00, 0x7F, 0x40, 0x40, 0x40, 0x40,      // Code for char L
    0x00, 0x7F, 0x02, 0x04, 0x02, 0x7F,      // Code for char M
    0x00, 0x7F, 0x02, 0x04, 0x08, 0x7F,      // Code for char N
    0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E,      // Code for char O
    0x00, 0x7F, 0x09, 0x09, 0x09, 0x06,      // Code for char P
    0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E,      // Code for char Q
    0x00, 0x7F, 0x09, 0x09, 0x19, 0x66,      // Code for char R
    0x00, 0x26, 0x49, 0x49, 0x49, 0x32,      // Code for char S
    0x00, 0x01, 0x01, 0x7F, 0x01, 0x01,      // Code for char T
    0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F,      // Code for char U
    0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F,      // Code for char V
    0x00, 0x3F, 0x40, 0x3C, 0x40, 0x3F,      // Code for char W
    0x00, 0x63, 0x14, 0x08, 0x14, 0x63,      // Code for char X
    0x00, 0x07, 0x08, 0x70, 0x08, 0x07,      // Code for char Y
    0x00, 0x71, 0x49, 0x45, 0x43, 0x00,      // Code for char Z

    0x00, 0x00, 0x7F, 0x41, 0x41, 0x00,      // Code for char [
    0x00, 0x02, 0x04, 0x08, 0x10, 0x20,      // Code for char BackSlash
    0x00, 0x00, 0x41, 0x41, 0x7F, 0x00,      // Code for char ]
    0x00, 0x04, 0x02, 0x01, 0x02, 0x04,      // Code for char ^
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80,      // Code for char _
    0x00, 0x00, 0x03, 0x07, 0x00, 0x00,      // Code for char `

    0x00, 0x20, 0x54, 0x54, 0x54, 0x78,      // Code for char a  - 65
    0x00, 0x7F, 0x44, 0x44, 0x44, 0x38,      // Code for char b
    0x00, 0x38, 0x44, 0x44, 0x44, 0x28,      // Code for char c
    0x00, 0x38, 0x44, 0x44, 0x44, 0x7F,      // Code for char d
    0x00, 0x38, 0x54, 0x54, 0x54, 0x08,      // Code for char e
    0x00, 0x08, 0x7E, 0x09, 0x09, 0x00,      // Code for char f
    0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C,      // Code for char g
    0x00, 0x7F, 0x04, 0x04, 0x78, 0x00,      // Code for char h
    0x00, 0x00, 0x00, 0x7D, 0x40, 0x00,      // Code for char i
    0x00, 0x40, 0x80, 0x84, 0x7D, 0x00,      // Code for char j
    0x00, 0x7F, 0x10, 0x28, 0x44, 0x00,      // Code for char k
    0x00, 0x00, 0x00, 0x7F, 0x40, 0x00,      // Code for char l
    0x00, 0x7C, 0x04, 0x18, 0x04, 0x78,      // Code for char m
    0x00, 0x7C, 0x04, 0x04, 0x78, 0x00,      // Code for char n
    0x00, 0x38, 0x44, 0x44, 0x44, 0x38,      // Code for char o
    0x00, 0xFC, 0x44, 0x44, 0x44, 0x38,      // Code for char p
    0x00, 0x38, 0x44, 0x44, 0x44, 0xFC,      // Code for char q
    0x00, 0x44, 0x78, 0x44, 0x04, 0x08,      // Code for char r
    0x00, 0x08, 0x54, 0x54, 0x54, 0x20,      // Code for char s
    0x00, 0x04, 0x3E, 0x44, 0x24, 0x00,      // Code for char t
    0x00, 0x3C, 0x40, 0x20, 0x7C, 0x00,      // Code for char u
    0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C,      // Code for char v
    0x00, 0x3C, 0x60, 0x30, 0x60, 0x3C,      // Code for char w
    0x00, 0x6C, 0x10, 0x10, 0x6C, 0x00,      // Code for char x
    0x00, 0x9C, 0xA0, 0x60, 0x3C, 0x00,      // Code for char y
    0x00, 0x64, 0x54, 0x54, 0x4C, 0x00,      // Code for char z

    0x00, 0x08, 0x3E, 0x41, 0x41, 0x00,      // Code for char {
    0x00, 0x00, 0x00, 0x77, 0x00, 0x00,      // Code for char |
    0x00, 0x00, 0x41, 0x41, 0x3E, 0x08,      // Code for char }
    0x00, 0x02, 0x01, 0x02, 0x01, 0x00,      // Code for char ~
    0x00, 0x3C, 0x26, 0x23, 0x26, 0x3C       // Code for char 

};
int y=0;
//-----------------------------------
// IO Routine
//-----------------------------------
void SdCmd(uchar Command)       //send command
{
    SCLK= 1;
    A0  = 0;
    _CS = 0;
    SID = Command & 0x80; SCLK= 0; SCLK= 1;
    SID = Command & 0x40; SCLK= 0; SCLK= 1;
    SID = Command & 0x20; SCLK= 0; SCLK= 1;
    SID = Command & 0x10; SCLK= 0; SCLK= 1;
    SID = Command & 0x08; SCLK= 0; SCLK= 1;
    SID = Command & 0x04; SCLK= 0; SCLK= 1;
    SID = Command & 0x02; SCLK= 0; SCLK= 1;
    SID = Command & 0x01; SCLK= 0; SCLK= 1;
    _CS = 1;
}

void SdData(uchar DData)        //send data
{
    SCLK= 1;
    A0  = 1;
    _CS = 0;
    SID = DData & 0x80; SCLK= 0; SCLK= 1;
    SID = DData & 0x40; SCLK= 0; SCLK= 1;
    SID = DData & 0x20; SCLK= 0; SCLK= 1;
    SID = DData & 0x10; SCLK= 0; SCLK= 1;
    SID = DData & 0x08; SCLK= 0; SCLK= 1;
    SID = DData & 0x04; SCLK= 0; SCLK= 1;
    SID = DData & 0x02; SCLK= 0; SCLK= 1;
    SID = DData & 0x01; SCLK= 0; SCLK= 1;
    _CS = 1;
}

//-----------------------------------
// String Functions
//-----------------------------------
void WriteChar(uchar ch)    // DisplayData should be 164x64/8 = 1312byte
{
    int i,j;
    uchar TempData;

    switch (ch)
    {
        case ' ': i=0; break; case '!': i=1; break; case '"': i=2; break; case '#': i=3; break; case '$': i=4; break; case '%': i=5; break; case '&': i=6; break;
        //case ''': i=7; break;
        case '(': i=8; break; case ')': i=9; break; case '*': i=10;break; case '+': i=11;break; case ',': i=12;break; case '-': i=13;break; case '.': i=14;break;
        case '/': i=15;break; case ':': i=26;break; case ';': i=27;break; case '<': i=28;break; case '=': i=29;break; case '>': i=30;break; case '?': i=31;break;
        case '@': i=32;break;

        case '0': i=16;break; case '1': i=17;break; case '2': i=18;break; case '3': i=19;break; case '4': i=20;break; case '5': i=21;break; case '6': i=22;break;
        case '7': i=23;break; case '8': i=24;break; case '9': i=25;break;


        case 'A': i=33;break; case 'B': i=34;break; case 'C': i=35;break; case 'D': i=36;break; case 'E': i=37;break; case 'F': i=38;break; case 'G': i=39;break;
        case 'H': i=40;break; case 'I': i=41;break; case 'J': i=42;break; case 'K': i=43;break; case 'L': i=44;break; case 'M': i=45;break; case 'N': i=46;break;
        case 'O': i=47;break; case 'P': i=48;break; case 'Q': i=49;break; case 'R': i=50;break; case 'S': i=51;break; case 'T': i=52;break; case 'U': i=53;break;
        case 'V': i=54;break; case 'W': i=55;break; case 'X': i=56;break; case 'Y': i=57;break; case 'Z': i=58;break;

        case '[': i=59;break; case ']': i=61;break; case '^': i=62;break; case '_': i=63;break; case '`': i=64;break;
        //case '\': i=60;break;

        case 'a': i=65;break; case 'b': i=66;break; case 'c': i=67;break; case 'd': i=68;break; case 'e': i=69;break; case 'f': i=70;break; case 'g': i=71;break;
        case 'h': i=72;break; case 'i': i=73;break; case 'j': i=74;break; case 'k': i=75;break; case 'l': i=76;break; case 'm': i=77;break; case 'n': i=78;break;
        case 'o': i=79;break; case 'p': i=80;break; case 'q': i=81;break; case 'r': i=82;break; case 's': i=83;break; case 't': i=84;break; case 'u': i=85;break;
        case 'v': i=86;break; case 'w': i=87;break; case 'x': i=88;break; case 'y': i=89;break; case 'z': i=90;break;

        case '{': i=91;break; case '|': i=92;break; case '}': i=93;break; case '~': i=94;break;
        //case '':  i=95;break;
    }

    for(j=0;j<6;j++)
        {
        TempData=(*(Font+j+i*6));
        SdData(TempData);
        }
}

void WriteString(int p,uchar *str)
{
    int i,j,sl;
    sl=strlen(str);

    for(i=p;i<8;i++)
    {
        SdCmd(0xb0 | i);    // select page 0~7
        SdCmd(0x10);        // start form column 4
        SdCmd(0x00);        // (2byte command)
        for(j=0;j<21;j++)
        {
            if ((j+(i*21)) >= (sl+(p*21)))
                goto end;
            WriteChar(*(str+j+((i-p)*21)));
        }
    }
end:
}

//void WriteUsart()
//{
//}
void AtCommand(void);

void init_all()
{
// Input/Output Ports initialization
// Port B initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
PORTB=0x00;
DDRB=0x00;

// Port C initialization
// Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
// State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
//PORTC=0x00;
DDRC=0xFF;

// Port D initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=In
// State7=T State6=T State5=T State4=T State3=T State2=T State1=0 State0=T
PORTD=0x00;
DDRD=0x02;

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
TCCR0=0x00;
TCNT0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: Timer1 Stopped
// Mode: Normal top=0xFFFF
// OC1A output: Discon.
// OC1B output: Discon.
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=0x00;
TCCR1B=0x00;
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0x00;
TCCR2=0x00;
TCNT2=0x00;
OCR2=0x00;

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
MCUCR=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x00;

// USART initialization
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART Receiver: On
// USART Transmitter: On
// USART Mode: Asynchronous
// USART Baud Rate: 9600
UCSRA=0x00;
UCSRB=0x98;
UCSRC=0x86;
UBRRH=0x00;
UBRRL=0x33;

// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
SFIOR=0x00;

// ADC initialization
// ADC disabled
ADCSRA=0x00;

// SPI initialization
// SPI disabled
SPCR=0x00;

// TWI initialization
// TWI disabled
TWCR=0x00;

// Global enable interrupts
#asm("sei")
}

// USART Receiver interrupt service routine
interrupt [USART_RXC] void usart_rx_isr(void)
{
    char status,data;
    status=UCSRA;
    data=UDR;

    if(data =='1')
        LEd=1;
    else
        LEd=0;

    if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
    {
        rx_buffer[rx_wr_index++]=data;

        if (rx_wr_index == RX_BUFFER_SIZE)
            rx_wr_index=0;

        if (++rx_counter == RX_BUFFER_SIZE)
        {
          rx_counter=0;
          rx_buffer_overflow=1;
        }
    }


}

#ifndef _DEBUG_TERMINAL_IO_
// Get a character from the USART Receiver buffer
#define _ALTERNATE_GETCHAR_
#pragma used+
char getchar(void)
{
char data;
while (rx_counter==0);
data=rx_buffer[rx_rd_index++];
#if RX_BUFFER_SIZE != 256
if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
#endif
#asm("cli")
--rx_counter;
#asm("sei")
return data;
}
#pragma used-
#endif
//---------------------------------------------------

uchar ContrastLevel;     // for contrast setting level

//-----------------------------------
// Delay Routine
//-----------------------------------
void delayms(uint m)        // 12MHz Xtal, close to ms value
{
    uint j;
    uint i;

    for(i=0; i<m; i++)
        for(j=0; j<109; j++)
        {
            #asm
            nop
            #endasm
        }
}

//-----------------------------------
// Write a Screen
//-----------------------------------
void WriteScreen(uchar flash *DisplayData)    // DisplayData should be 164x64/8 = 1312byte
{
    uchar TempData;
    uchar i, j;
    for(i=0;i<8;i++)
        {
        SdCmd(0xb0 | i);    // select page 0~7
        SdCmd(0x10);        // start form column 4
        SdCmd(0x00);        // (2byte command)
        for(j=0;j<128;j++)
            {
            TempData=(*(DisplayData+(i*128)+j));
            SdData(TempData);
            }
        }
}
//-----------------------------------
// Clear a Screen
//-----------------------------------
void clrScreen()    // DisplayData should be 164x64/8 = 1312byte
{
    uchar TempData=0x00;
    uchar i, j;
    for(i=0;i<8;i++)
        {
        SdCmd(0xb0 | i);    // select page 0~7
        SdCmd(0x10);        // start form column 4
        SdCmd(0x00);        // (2byte command)
        for(j=0;j<128;j++)
            {
            SdData(TempData);
            }
        }
}
//-----------------------------------
// Contrast control
//-----------------------------------
void LCD_Darker(void)
{
    if (ContrastLevel<0x3F)
        {
        ContrastLevel++;
        }
    SdCmd(0x81);            // E-Vol setting
    SdCmd(ContrastLevel);   // (2byte command)
}

void LCD_Lighter(void)
{
    if (ContrastLevel>0x00)
        {
         ContrastLevel--;
        }
    SdCmd(0x81);            // E-Vol setting
    SdCmd(ContrastLevel);   // (2byte command)
}

//-----------------------------------
// Init LCD module
//-----------------------------------
void initLCDM(void)
{
    _RST=1;                 // hardware reset LCD module
    _RST=0;
    delayms(1);
    _RST=1;
    delayms(800);

    ContrastLevel=0x17;     // default Contrast Level  1a
    SdCmd(0xab);  //new
    SdCmd(0xaf);            // display on
    SdCmd(0x40);            // display start line=0
    SdCmd(0xc8);            // Common output mode select= reverse
    SdCmd(0xa6);            // normal display
    SdCmd(0xa4);            // Duisplay all point = off
    SdCmd(0xa3);            // LCD bias = 1/9   a2
    SdCmd(0x2f);            // Power control = all on
    SdCmd(0x25);            // Rab Ratio     26
    SdCmd(0x81);            // E-Vol setting
    SdCmd(ContrastLevel);   // (2byte command)
    clrScreen();
}

//-----------------------------------
// Main Function
//-----------------------------------
void main(void)
{
    int i;  int k;
    char c='';
    char *str ;

    _CS    =1;
    _RST   =1;
    A0     =1;
    SCLK   =1;
    SID    =1;

    init_all();
    initLCDM();

    //LEd=1;

    //WriteScreen(img);
    WriteString(0,"Welcome V2");
    delayms(200);
    WriteString(2,"Bluetooth AT");

//    for(i=0;i<2;i++)
//        LCD_Lighter();
//    while (1)
//    {
//        WriteUsart();
//    }

    //printf("Hello\r\n");
    AtCommand();

    while(1)
    {
        sprintf(buf,"Char=%s",rx_buffer);
        WriteString(4,buf);
        delayms(200);

    }
}

void AtCommand(void)
{

    //USART Baud Rate: 38400
    UCSRA=0x00;
    UCSRB=0x98;
    UCSRC=0x86;
    UBRRH=0x00;
    UBRRL=0x0C;

   // printf("AT+INQM=1,3,20\r\n");

    printf("AT+INQM?\r\n");
    while(1)
    {
        if(strstr(rx_buffer, "OK"))
        {
            WriteString(4,rx_buffer);
            sprintf(rx_buffer,"");
            delayms(200);
        }
    }
}

